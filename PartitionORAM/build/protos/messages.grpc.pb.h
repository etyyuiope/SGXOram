// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: messages.proto
#ifndef GRPC_messages_2eproto__INCLUDED
#define GRPC_messages_2eproto__INCLUDED

#include "messages.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace partition_oram {

// The Oram interface is the interface that must be implemented by
// any ORAM implementation. It is used to interact with the ORAM.
class server final {
 public:
  static constexpr char const* service_full_name() {
    return "partition_oram.server";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Initialize the ORAM by sending the client's configurations.
    virtual ::grpc::Status init_oram(::grpc::ClientContext* context, const ::partition_oram::InitOramRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncinit_oram(::grpc::ClientContext* context, const ::partition_oram::InitOramRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(Asyncinit_oramRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncinit_oram(::grpc::ClientContext* context, const ::partition_oram::InitOramRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncinit_oramRaw(context, request, cq));
    }
    virtual ::grpc::Status read_block(::grpc::ClientContext* context, const ::partition_oram::ReadBlockRequest& request, ::partition_oram::ReadBlockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::partition_oram::ReadBlockResponse>> Asyncread_block(::grpc::ClientContext* context, const ::partition_oram::ReadBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::partition_oram::ReadBlockResponse>>(Asyncread_blockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::partition_oram::ReadBlockResponse>> PrepareAsyncread_block(::grpc::ClientContext* context, const ::partition_oram::ReadBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::partition_oram::ReadBlockResponse>>(PrepareAsyncread_blockRaw(context, request, cq));
    }
    virtual ::grpc::Status write_block(::grpc::ClientContext* context, const ::partition_oram::WriteBlockRequest& request, ::partition_oram::WriteBlockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::partition_oram::WriteBlockResponse>> Asyncwrite_block(::grpc::ClientContext* context, const ::partition_oram::WriteBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::partition_oram::WriteBlockResponse>>(Asyncwrite_blockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::partition_oram::WriteBlockResponse>> PrepareAsyncwrite_block(::grpc::ClientContext* context, const ::partition_oram::WriteBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::partition_oram::WriteBlockResponse>>(PrepareAsyncwrite_blockRaw(context, request, cq));
    }
    // ============ Key Exchange Using Diffie-Hellman ============ //
    // For evaluating the performance when encryption is introduced, 
    // we do not verify the public key sent from the client, i.e., 
    // we assume that there is no man-in-the-middle attacker :)
    virtual ::grpc::Status key_exchange(::grpc::ClientContext* context, const ::partition_oram::KeyExchangeRequest& request, ::partition_oram::KeyExchangeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::partition_oram::KeyExchangeResponse>> Asynckey_exchange(::grpc::ClientContext* context, const ::partition_oram::KeyExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::partition_oram::KeyExchangeResponse>>(Asynckey_exchangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::partition_oram::KeyExchangeResponse>> PrepareAsynckey_exchange(::grpc::ClientContext* context, const ::partition_oram::KeyExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::partition_oram::KeyExchangeResponse>>(PrepareAsynckey_exchangeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Initialize the ORAM by sending the client's configurations.
      virtual void init_oram(::grpc::ClientContext* context, const ::partition_oram::InitOramRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void init_oram(::grpc::ClientContext* context, const ::partition_oram::InitOramRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void read_block(::grpc::ClientContext* context, const ::partition_oram::ReadBlockRequest* request, ::partition_oram::ReadBlockResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void read_block(::grpc::ClientContext* context, const ::partition_oram::ReadBlockRequest* request, ::partition_oram::ReadBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void write_block(::grpc::ClientContext* context, const ::partition_oram::WriteBlockRequest* request, ::partition_oram::WriteBlockResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void write_block(::grpc::ClientContext* context, const ::partition_oram::WriteBlockRequest* request, ::partition_oram::WriteBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ============ Key Exchange Using Diffie-Hellman ============ //
      // For evaluating the performance when encryption is introduced, 
      // we do not verify the public key sent from the client, i.e., 
      // we assume that there is no man-in-the-middle attacker :)
      virtual void key_exchange(::grpc::ClientContext* context, const ::partition_oram::KeyExchangeRequest* request, ::partition_oram::KeyExchangeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void key_exchange(::grpc::ClientContext* context, const ::partition_oram::KeyExchangeRequest* request, ::partition_oram::KeyExchangeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* Asyncinit_oramRaw(::grpc::ClientContext* context, const ::partition_oram::InitOramRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncinit_oramRaw(::grpc::ClientContext* context, const ::partition_oram::InitOramRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::partition_oram::ReadBlockResponse>* Asyncread_blockRaw(::grpc::ClientContext* context, const ::partition_oram::ReadBlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::partition_oram::ReadBlockResponse>* PrepareAsyncread_blockRaw(::grpc::ClientContext* context, const ::partition_oram::ReadBlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::partition_oram::WriteBlockResponse>* Asyncwrite_blockRaw(::grpc::ClientContext* context, const ::partition_oram::WriteBlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::partition_oram::WriteBlockResponse>* PrepareAsyncwrite_blockRaw(::grpc::ClientContext* context, const ::partition_oram::WriteBlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::partition_oram::KeyExchangeResponse>* Asynckey_exchangeRaw(::grpc::ClientContext* context, const ::partition_oram::KeyExchangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::partition_oram::KeyExchangeResponse>* PrepareAsynckey_exchangeRaw(::grpc::ClientContext* context, const ::partition_oram::KeyExchangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status init_oram(::grpc::ClientContext* context, const ::partition_oram::InitOramRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncinit_oram(::grpc::ClientContext* context, const ::partition_oram::InitOramRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(Asyncinit_oramRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncinit_oram(::grpc::ClientContext* context, const ::partition_oram::InitOramRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncinit_oramRaw(context, request, cq));
    }
    ::grpc::Status read_block(::grpc::ClientContext* context, const ::partition_oram::ReadBlockRequest& request, ::partition_oram::ReadBlockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::partition_oram::ReadBlockResponse>> Asyncread_block(::grpc::ClientContext* context, const ::partition_oram::ReadBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::partition_oram::ReadBlockResponse>>(Asyncread_blockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::partition_oram::ReadBlockResponse>> PrepareAsyncread_block(::grpc::ClientContext* context, const ::partition_oram::ReadBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::partition_oram::ReadBlockResponse>>(PrepareAsyncread_blockRaw(context, request, cq));
    }
    ::grpc::Status write_block(::grpc::ClientContext* context, const ::partition_oram::WriteBlockRequest& request, ::partition_oram::WriteBlockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::partition_oram::WriteBlockResponse>> Asyncwrite_block(::grpc::ClientContext* context, const ::partition_oram::WriteBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::partition_oram::WriteBlockResponse>>(Asyncwrite_blockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::partition_oram::WriteBlockResponse>> PrepareAsyncwrite_block(::grpc::ClientContext* context, const ::partition_oram::WriteBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::partition_oram::WriteBlockResponse>>(PrepareAsyncwrite_blockRaw(context, request, cq));
    }
    ::grpc::Status key_exchange(::grpc::ClientContext* context, const ::partition_oram::KeyExchangeRequest& request, ::partition_oram::KeyExchangeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::partition_oram::KeyExchangeResponse>> Asynckey_exchange(::grpc::ClientContext* context, const ::partition_oram::KeyExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::partition_oram::KeyExchangeResponse>>(Asynckey_exchangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::partition_oram::KeyExchangeResponse>> PrepareAsynckey_exchange(::grpc::ClientContext* context, const ::partition_oram::KeyExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::partition_oram::KeyExchangeResponse>>(PrepareAsynckey_exchangeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void init_oram(::grpc::ClientContext* context, const ::partition_oram::InitOramRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void init_oram(::grpc::ClientContext* context, const ::partition_oram::InitOramRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void read_block(::grpc::ClientContext* context, const ::partition_oram::ReadBlockRequest* request, ::partition_oram::ReadBlockResponse* response, std::function<void(::grpc::Status)>) override;
      void read_block(::grpc::ClientContext* context, const ::partition_oram::ReadBlockRequest* request, ::partition_oram::ReadBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void write_block(::grpc::ClientContext* context, const ::partition_oram::WriteBlockRequest* request, ::partition_oram::WriteBlockResponse* response, std::function<void(::grpc::Status)>) override;
      void write_block(::grpc::ClientContext* context, const ::partition_oram::WriteBlockRequest* request, ::partition_oram::WriteBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void key_exchange(::grpc::ClientContext* context, const ::partition_oram::KeyExchangeRequest* request, ::partition_oram::KeyExchangeResponse* response, std::function<void(::grpc::Status)>) override;
      void key_exchange(::grpc::ClientContext* context, const ::partition_oram::KeyExchangeRequest* request, ::partition_oram::KeyExchangeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Asyncinit_oramRaw(::grpc::ClientContext* context, const ::partition_oram::InitOramRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncinit_oramRaw(::grpc::ClientContext* context, const ::partition_oram::InitOramRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::partition_oram::ReadBlockResponse>* Asyncread_blockRaw(::grpc::ClientContext* context, const ::partition_oram::ReadBlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::partition_oram::ReadBlockResponse>* PrepareAsyncread_blockRaw(::grpc::ClientContext* context, const ::partition_oram::ReadBlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::partition_oram::WriteBlockResponse>* Asyncwrite_blockRaw(::grpc::ClientContext* context, const ::partition_oram::WriteBlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::partition_oram::WriteBlockResponse>* PrepareAsyncwrite_blockRaw(::grpc::ClientContext* context, const ::partition_oram::WriteBlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::partition_oram::KeyExchangeResponse>* Asynckey_exchangeRaw(::grpc::ClientContext* context, const ::partition_oram::KeyExchangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::partition_oram::KeyExchangeResponse>* PrepareAsynckey_exchangeRaw(::grpc::ClientContext* context, const ::partition_oram::KeyExchangeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_init_oram_;
    const ::grpc::internal::RpcMethod rpcmethod_read_block_;
    const ::grpc::internal::RpcMethod rpcmethod_write_block_;
    const ::grpc::internal::RpcMethod rpcmethod_key_exchange_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Initialize the ORAM by sending the client's configurations.
    virtual ::grpc::Status init_oram(::grpc::ServerContext* context, const ::partition_oram::InitOramRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status read_block(::grpc::ServerContext* context, const ::partition_oram::ReadBlockRequest* request, ::partition_oram::ReadBlockResponse* response);
    virtual ::grpc::Status write_block(::grpc::ServerContext* context, const ::partition_oram::WriteBlockRequest* request, ::partition_oram::WriteBlockResponse* response);
    // ============ Key Exchange Using Diffie-Hellman ============ //
    // For evaluating the performance when encryption is introduced, 
    // we do not verify the public key sent from the client, i.e., 
    // we assume that there is no man-in-the-middle attacker :)
    virtual ::grpc::Status key_exchange(::grpc::ServerContext* context, const ::partition_oram::KeyExchangeRequest* request, ::partition_oram::KeyExchangeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_init_oram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_init_oram() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_init_oram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_oram(::grpc::ServerContext* /*context*/, const ::partition_oram::InitOramRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit_oram(::grpc::ServerContext* context, ::partition_oram::InitOramRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_read_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_read_block() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_read_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read_block(::grpc::ServerContext* /*context*/, const ::partition_oram::ReadBlockRequest* /*request*/, ::partition_oram::ReadBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestread_block(::grpc::ServerContext* context, ::partition_oram::ReadBlockRequest* request, ::grpc::ServerAsyncResponseWriter< ::partition_oram::ReadBlockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_write_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_write_block() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_write_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status write_block(::grpc::ServerContext* /*context*/, const ::partition_oram::WriteBlockRequest* /*request*/, ::partition_oram::WriteBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestwrite_block(::grpc::ServerContext* context, ::partition_oram::WriteBlockRequest* request, ::grpc::ServerAsyncResponseWriter< ::partition_oram::WriteBlockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_key_exchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_key_exchange() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_key_exchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status key_exchange(::grpc::ServerContext* /*context*/, const ::partition_oram::KeyExchangeRequest* /*request*/, ::partition_oram::KeyExchangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestkey_exchange(::grpc::ServerContext* context, ::partition_oram::KeyExchangeRequest* request, ::grpc::ServerAsyncResponseWriter< ::partition_oram::KeyExchangeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_init_oram<WithAsyncMethod_read_block<WithAsyncMethod_write_block<WithAsyncMethod_key_exchange<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_init_oram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_init_oram() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::partition_oram::InitOramRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::partition_oram::InitOramRequest* request, ::google::protobuf::Empty* response) { return this->init_oram(context, request, response); }));}
    void SetMessageAllocatorFor_init_oram(
        ::grpc::MessageAllocator< ::partition_oram::InitOramRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::partition_oram::InitOramRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_init_oram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_oram(::grpc::ServerContext* /*context*/, const ::partition_oram::InitOramRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init_oram(
      ::grpc::CallbackServerContext* /*context*/, const ::partition_oram::InitOramRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_read_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_read_block() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::partition_oram::ReadBlockRequest, ::partition_oram::ReadBlockResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::partition_oram::ReadBlockRequest* request, ::partition_oram::ReadBlockResponse* response) { return this->read_block(context, request, response); }));}
    void SetMessageAllocatorFor_read_block(
        ::grpc::MessageAllocator< ::partition_oram::ReadBlockRequest, ::partition_oram::ReadBlockResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::partition_oram::ReadBlockRequest, ::partition_oram::ReadBlockResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_read_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read_block(::grpc::ServerContext* /*context*/, const ::partition_oram::ReadBlockRequest* /*request*/, ::partition_oram::ReadBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* read_block(
      ::grpc::CallbackServerContext* /*context*/, const ::partition_oram::ReadBlockRequest* /*request*/, ::partition_oram::ReadBlockResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_write_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_write_block() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::partition_oram::WriteBlockRequest, ::partition_oram::WriteBlockResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::partition_oram::WriteBlockRequest* request, ::partition_oram::WriteBlockResponse* response) { return this->write_block(context, request, response); }));}
    void SetMessageAllocatorFor_write_block(
        ::grpc::MessageAllocator< ::partition_oram::WriteBlockRequest, ::partition_oram::WriteBlockResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::partition_oram::WriteBlockRequest, ::partition_oram::WriteBlockResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_write_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status write_block(::grpc::ServerContext* /*context*/, const ::partition_oram::WriteBlockRequest* /*request*/, ::partition_oram::WriteBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* write_block(
      ::grpc::CallbackServerContext* /*context*/, const ::partition_oram::WriteBlockRequest* /*request*/, ::partition_oram::WriteBlockResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_key_exchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_key_exchange() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::partition_oram::KeyExchangeRequest, ::partition_oram::KeyExchangeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::partition_oram::KeyExchangeRequest* request, ::partition_oram::KeyExchangeResponse* response) { return this->key_exchange(context, request, response); }));}
    void SetMessageAllocatorFor_key_exchange(
        ::grpc::MessageAllocator< ::partition_oram::KeyExchangeRequest, ::partition_oram::KeyExchangeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::partition_oram::KeyExchangeRequest, ::partition_oram::KeyExchangeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_key_exchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status key_exchange(::grpc::ServerContext* /*context*/, const ::partition_oram::KeyExchangeRequest* /*request*/, ::partition_oram::KeyExchangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* key_exchange(
      ::grpc::CallbackServerContext* /*context*/, const ::partition_oram::KeyExchangeRequest* /*request*/, ::partition_oram::KeyExchangeResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_init_oram<WithCallbackMethod_read_block<WithCallbackMethod_write_block<WithCallbackMethod_key_exchange<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_init_oram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_init_oram() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_init_oram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_oram(::grpc::ServerContext* /*context*/, const ::partition_oram::InitOramRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_read_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_read_block() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_read_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read_block(::grpc::ServerContext* /*context*/, const ::partition_oram::ReadBlockRequest* /*request*/, ::partition_oram::ReadBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_write_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_write_block() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_write_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status write_block(::grpc::ServerContext* /*context*/, const ::partition_oram::WriteBlockRequest* /*request*/, ::partition_oram::WriteBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_key_exchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_key_exchange() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_key_exchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status key_exchange(::grpc::ServerContext* /*context*/, const ::partition_oram::KeyExchangeRequest* /*request*/, ::partition_oram::KeyExchangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_init_oram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_init_oram() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_init_oram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_oram(::grpc::ServerContext* /*context*/, const ::partition_oram::InitOramRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit_oram(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_read_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_read_block() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_read_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read_block(::grpc::ServerContext* /*context*/, const ::partition_oram::ReadBlockRequest* /*request*/, ::partition_oram::ReadBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestread_block(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_write_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_write_block() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_write_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status write_block(::grpc::ServerContext* /*context*/, const ::partition_oram::WriteBlockRequest* /*request*/, ::partition_oram::WriteBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestwrite_block(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_key_exchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_key_exchange() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_key_exchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status key_exchange(::grpc::ServerContext* /*context*/, const ::partition_oram::KeyExchangeRequest* /*request*/, ::partition_oram::KeyExchangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestkey_exchange(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_init_oram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_init_oram() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->init_oram(context, request, response); }));
    }
    ~WithRawCallbackMethod_init_oram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_oram(::grpc::ServerContext* /*context*/, const ::partition_oram::InitOramRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init_oram(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_read_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_read_block() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->read_block(context, request, response); }));
    }
    ~WithRawCallbackMethod_read_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read_block(::grpc::ServerContext* /*context*/, const ::partition_oram::ReadBlockRequest* /*request*/, ::partition_oram::ReadBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* read_block(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_write_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_write_block() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->write_block(context, request, response); }));
    }
    ~WithRawCallbackMethod_write_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status write_block(::grpc::ServerContext* /*context*/, const ::partition_oram::WriteBlockRequest* /*request*/, ::partition_oram::WriteBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* write_block(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_key_exchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_key_exchange() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->key_exchange(context, request, response); }));
    }
    ~WithRawCallbackMethod_key_exchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status key_exchange(::grpc::ServerContext* /*context*/, const ::partition_oram::KeyExchangeRequest* /*request*/, ::partition_oram::KeyExchangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* key_exchange(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_init_oram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_init_oram() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::partition_oram::InitOramRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::partition_oram::InitOramRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedinit_oram(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_init_oram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status init_oram(::grpc::ServerContext* /*context*/, const ::partition_oram::InitOramRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedinit_oram(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::partition_oram::InitOramRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_read_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_read_block() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::partition_oram::ReadBlockRequest, ::partition_oram::ReadBlockResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::partition_oram::ReadBlockRequest, ::partition_oram::ReadBlockResponse>* streamer) {
                       return this->Streamedread_block(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_read_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status read_block(::grpc::ServerContext* /*context*/, const ::partition_oram::ReadBlockRequest* /*request*/, ::partition_oram::ReadBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedread_block(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::partition_oram::ReadBlockRequest,::partition_oram::ReadBlockResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_write_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_write_block() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::partition_oram::WriteBlockRequest, ::partition_oram::WriteBlockResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::partition_oram::WriteBlockRequest, ::partition_oram::WriteBlockResponse>* streamer) {
                       return this->Streamedwrite_block(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_write_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status write_block(::grpc::ServerContext* /*context*/, const ::partition_oram::WriteBlockRequest* /*request*/, ::partition_oram::WriteBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedwrite_block(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::partition_oram::WriteBlockRequest,::partition_oram::WriteBlockResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_key_exchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_key_exchange() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::partition_oram::KeyExchangeRequest, ::partition_oram::KeyExchangeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::partition_oram::KeyExchangeRequest, ::partition_oram::KeyExchangeResponse>* streamer) {
                       return this->Streamedkey_exchange(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_key_exchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status key_exchange(::grpc::ServerContext* /*context*/, const ::partition_oram::KeyExchangeRequest* /*request*/, ::partition_oram::KeyExchangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedkey_exchange(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::partition_oram::KeyExchangeRequest,::partition_oram::KeyExchangeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_init_oram<WithStreamedUnaryMethod_read_block<WithStreamedUnaryMethod_write_block<WithStreamedUnaryMethod_key_exchange<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_init_oram<WithStreamedUnaryMethod_read_block<WithStreamedUnaryMethod_write_block<WithStreamedUnaryMethod_key_exchange<Service > > > > StreamedService;
};

}  // namespace partition_oram


#endif  // GRPC_messages_2eproto__INCLUDED
