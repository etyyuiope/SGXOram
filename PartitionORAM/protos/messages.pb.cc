// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace partition_oram {
constexpr KeyExchangeRequest::KeyExchangeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_client_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct KeyExchangeRequestDefaultTypeInternal {
  constexpr KeyExchangeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyExchangeRequestDefaultTypeInternal() {}
  union {
    KeyExchangeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyExchangeRequestDefaultTypeInternal _KeyExchangeRequest_default_instance_;
constexpr KeyExchangeResponse::KeyExchangeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_server_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct KeyExchangeResponseDefaultTypeInternal {
  constexpr KeyExchangeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyExchangeResponseDefaultTypeInternal() {}
  union {
    KeyExchangeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyExchangeResponseDefaultTypeInternal _KeyExchangeResponse_default_instance_;
constexpr InitOramRequest::InitOramRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parition_num_(0u)
  , block_num_(0u){}
struct InitOramRequestDefaultTypeInternal {
  constexpr InitOramRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitOramRequestDefaultTypeInternal() {}
  union {
    InitOramRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitOramRequestDefaultTypeInternal _InitOramRequest_default_instance_;
constexpr ReadBlockRequest::ReadBlockRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ReadBlockRequestDefaultTypeInternal {
  constexpr ReadBlockRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadBlockRequestDefaultTypeInternal() {}
  union {
    ReadBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadBlockRequestDefaultTypeInternal _ReadBlockRequest_default_instance_;
constexpr ReadBlockResponse::ReadBlockResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ReadBlockResponseDefaultTypeInternal {
  constexpr ReadBlockResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadBlockResponseDefaultTypeInternal() {}
  union {
    ReadBlockResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadBlockResponseDefaultTypeInternal _ReadBlockResponse_default_instance_;
constexpr WriteBlockRequest::WriteBlockRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
{}
struct WriteBlockRequestDefaultTypeInternal {
  constexpr WriteBlockRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteBlockRequestDefaultTypeInternal() {}
  union {
    WriteBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteBlockRequestDefaultTypeInternal _WriteBlockRequest_default_instance_;
constexpr WriteBlockResponse::WriteBlockResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct WriteBlockResponseDefaultTypeInternal {
  constexpr WriteBlockResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteBlockResponseDefaultTypeInternal() {}
  union {
    WriteBlockResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteBlockResponseDefaultTypeInternal _WriteBlockResponse_default_instance_;
}  // namespace partition_oram
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_messages_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_2eproto = nullptr;

const uint32_t TableStruct_messages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::partition_oram::KeyExchangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::partition_oram::KeyExchangeRequest, public_key_client_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::partition_oram::KeyExchangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::partition_oram::KeyExchangeResponse, public_key_server_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::partition_oram::InitOramRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::partition_oram::InitOramRequest, parition_num_),
  PROTOBUF_FIELD_OFFSET(::partition_oram::InitOramRequest, block_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::partition_oram::ReadBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::partition_oram::ReadBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::partition_oram::ReadBlockResponse, data_),
  PROTOBUF_FIELD_OFFSET(::partition_oram::WriteBlockRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::partition_oram::WriteBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::partition_oram::WriteBlockRequest, type_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::partition_oram::WriteBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::partition_oram::KeyExchangeRequest)},
  { 7, -1, -1, sizeof(::partition_oram::KeyExchangeResponse)},
  { 14, -1, -1, sizeof(::partition_oram::InitOramRequest)},
  { 22, -1, -1, sizeof(::partition_oram::ReadBlockRequest)},
  { 28, -1, -1, sizeof(::partition_oram::ReadBlockResponse)},
  { 35, 42, -1, sizeof(::partition_oram::WriteBlockRequest)},
  { 43, -1, -1, sizeof(::partition_oram::WriteBlockResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::partition_oram::_KeyExchangeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::partition_oram::_KeyExchangeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::partition_oram::_InitOramRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::partition_oram::_ReadBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::partition_oram::_ReadBlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::partition_oram::_WriteBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::partition_oram::_WriteBlockResponse_default_instance_),
};

const char descriptor_table_protodef_messages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016messages.proto\022\016partition_oram\032\033google"
  "/protobuf/empty.proto\"/\n\022KeyExchangeRequ"
  "est\022\031\n\021public_key_client\030\001 \001(\014\"0\n\023KeyExc"
  "hangeResponse\022\031\n\021public_key_server\030\001 \001(\014"
  "\":\n\017InitOramRequest\022\024\n\014parition_num\030\001 \001("
  "\r\022\021\n\tblock_num\030\002 \001(\r\"\022\n\020ReadBlockRequest"
  "\"!\n\021ReadBlockResponse\022\014\n\004data\030\001 \001(\014\"E\n\021W"
  "riteBlockRequest\022\'\n\004type\030\001 \001(\0162\024.partiti"
  "on_oram.TypeH\000\210\001\001B\007\n\005_type\"\024\n\022WriteBlock"
  "Response*\"\n\004Type\022\016\n\nSequential\020\000\022\n\n\006Rand"
  "om\020\0012\330\002\n\006server\022F\n\tinit_oram\022\037.partition"
  "_oram.InitOramRequest\032\026.google.protobuf."
  "Empty\"\000\022S\n\nread_block\022 .partition_oram.R"
  "eadBlockRequest\032!.partition_oram.ReadBlo"
  "ckResponse\"\000\022V\n\013write_block\022!.partition_"
  "oram.WriteBlockRequest\032\".partition_oram."
  "WriteBlockResponse\"\000\022Y\n\014key_exchange\022\".p"
  "artition_oram.KeyExchangeRequest\032#.parti"
  "tion_oram.KeyExchangeResponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_messages_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto = {
  false, false, 759, descriptor_table_protodef_messages_2eproto, "messages.proto", 
  &descriptor_table_messages_2eproto_once, descriptor_table_messages_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_messages_2eproto::offsets,
  file_level_metadata_messages_2eproto, file_level_enum_descriptors_messages_2eproto, file_level_service_descriptors_messages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_messages_2eproto_getter() {
  return &descriptor_table_messages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_messages_2eproto(&descriptor_table_messages_2eproto);
namespace partition_oram {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[0];
}
bool Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class KeyExchangeRequest::_Internal {
 public:
};

KeyExchangeRequest::KeyExchangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:partition_oram.KeyExchangeRequest)
}
KeyExchangeRequest::KeyExchangeRequest(const KeyExchangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_client_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_key_client_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key_client().empty()) {
    public_key_client_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key_client(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:partition_oram.KeyExchangeRequest)
}

inline void KeyExchangeRequest::SharedCtor() {
public_key_client_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_key_client_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KeyExchangeRequest::~KeyExchangeRequest() {
  // @@protoc_insertion_point(destructor:partition_oram.KeyExchangeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KeyExchangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  public_key_client_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyExchangeRequest::ArenaDtor(void* object) {
  KeyExchangeRequest* _this = reinterpret_cast< KeyExchangeRequest* >(object);
  (void)_this;
}
void KeyExchangeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyExchangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyExchangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:partition_oram.KeyExchangeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_client_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyExchangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes public_key_client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_public_key_client();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyExchangeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:partition_oram.KeyExchangeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes public_key_client = 1;
  if (!this->_internal_public_key_client().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_key_client(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:partition_oram.KeyExchangeRequest)
  return target;
}

size_t KeyExchangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:partition_oram.KeyExchangeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key_client = 1;
  if (!this->_internal_public_key_client().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key_client());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyExchangeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KeyExchangeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyExchangeRequest::GetClassData() const { return &_class_data_; }

void KeyExchangeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KeyExchangeRequest *>(to)->MergeFrom(
      static_cast<const KeyExchangeRequest &>(from));
}


void KeyExchangeRequest::MergeFrom(const KeyExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:partition_oram.KeyExchangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key_client().empty()) {
    _internal_set_public_key_client(from._internal_public_key_client());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyExchangeRequest::CopyFrom(const KeyExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:partition_oram.KeyExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyExchangeRequest::IsInitialized() const {
  return true;
}

void KeyExchangeRequest::InternalSwap(KeyExchangeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_client_, lhs_arena,
      &other->public_key_client_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyExchangeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[0]);
}

// ===================================================================

class KeyExchangeResponse::_Internal {
 public:
};

KeyExchangeResponse::KeyExchangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:partition_oram.KeyExchangeResponse)
}
KeyExchangeResponse::KeyExchangeResponse(const KeyExchangeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_key_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key_server().empty()) {
    public_key_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key_server(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:partition_oram.KeyExchangeResponse)
}

inline void KeyExchangeResponse::SharedCtor() {
public_key_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_key_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KeyExchangeResponse::~KeyExchangeResponse() {
  // @@protoc_insertion_point(destructor:partition_oram.KeyExchangeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KeyExchangeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  public_key_server_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyExchangeResponse::ArenaDtor(void* object) {
  KeyExchangeResponse* _this = reinterpret_cast< KeyExchangeResponse* >(object);
  (void)_this;
}
void KeyExchangeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyExchangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyExchangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:partition_oram.KeyExchangeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_server_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyExchangeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes public_key_server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_public_key_server();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyExchangeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:partition_oram.KeyExchangeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes public_key_server = 1;
  if (!this->_internal_public_key_server().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_key_server(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:partition_oram.KeyExchangeResponse)
  return target;
}

size_t KeyExchangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:partition_oram.KeyExchangeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key_server = 1;
  if (!this->_internal_public_key_server().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key_server());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyExchangeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KeyExchangeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyExchangeResponse::GetClassData() const { return &_class_data_; }

void KeyExchangeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KeyExchangeResponse *>(to)->MergeFrom(
      static_cast<const KeyExchangeResponse &>(from));
}


void KeyExchangeResponse::MergeFrom(const KeyExchangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:partition_oram.KeyExchangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key_server().empty()) {
    _internal_set_public_key_server(from._internal_public_key_server());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyExchangeResponse::CopyFrom(const KeyExchangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:partition_oram.KeyExchangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyExchangeResponse::IsInitialized() const {
  return true;
}

void KeyExchangeResponse::InternalSwap(KeyExchangeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_server_, lhs_arena,
      &other->public_key_server_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyExchangeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[1]);
}

// ===================================================================

class InitOramRequest::_Internal {
 public:
};

InitOramRequest::InitOramRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:partition_oram.InitOramRequest)
}
InitOramRequest::InitOramRequest(const InitOramRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&parition_num_, &from.parition_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_num_) -
    reinterpret_cast<char*>(&parition_num_)) + sizeof(block_num_));
  // @@protoc_insertion_point(copy_constructor:partition_oram.InitOramRequest)
}

inline void InitOramRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parition_num_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&block_num_) -
    reinterpret_cast<char*>(&parition_num_)) + sizeof(block_num_));
}

InitOramRequest::~InitOramRequest() {
  // @@protoc_insertion_point(destructor:partition_oram.InitOramRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitOramRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InitOramRequest::ArenaDtor(void* object) {
  InitOramRequest* _this = reinterpret_cast< InitOramRequest* >(object);
  (void)_this;
}
void InitOramRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitOramRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitOramRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:partition_oram.InitOramRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&parition_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_num_) -
      reinterpret_cast<char*>(&parition_num_)) + sizeof(block_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitOramRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 parition_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          parition_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 block_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitOramRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:partition_oram.InitOramRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 parition_num = 1;
  if (this->_internal_parition_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_parition_num(), target);
  }

  // uint32 block_num = 2;
  if (this->_internal_block_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_block_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:partition_oram.InitOramRequest)
  return target;
}

size_t InitOramRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:partition_oram.InitOramRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 parition_num = 1;
  if (this->_internal_parition_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_parition_num());
  }

  // uint32 block_num = 2;
  if (this->_internal_block_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_block_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitOramRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitOramRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitOramRequest::GetClassData() const { return &_class_data_; }

void InitOramRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitOramRequest *>(to)->MergeFrom(
      static_cast<const InitOramRequest &>(from));
}


void InitOramRequest::MergeFrom(const InitOramRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:partition_oram.InitOramRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_parition_num() != 0) {
    _internal_set_parition_num(from._internal_parition_num());
  }
  if (from._internal_block_num() != 0) {
    _internal_set_block_num(from._internal_block_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitOramRequest::CopyFrom(const InitOramRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:partition_oram.InitOramRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitOramRequest::IsInitialized() const {
  return true;
}

void InitOramRequest::InternalSwap(InitOramRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitOramRequest, block_num_)
      + sizeof(InitOramRequest::block_num_)
      - PROTOBUF_FIELD_OFFSET(InitOramRequest, parition_num_)>(
          reinterpret_cast<char*>(&parition_num_),
          reinterpret_cast<char*>(&other->parition_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitOramRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[2]);
}

// ===================================================================

class ReadBlockRequest::_Internal {
 public:
};

ReadBlockRequest::ReadBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:partition_oram.ReadBlockRequest)
}
ReadBlockRequest::ReadBlockRequest(const ReadBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:partition_oram.ReadBlockRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadBlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadBlockRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReadBlockRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[3]);
}

// ===================================================================

class ReadBlockResponse::_Internal {
 public:
};

ReadBlockResponse::ReadBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:partition_oram.ReadBlockResponse)
}
ReadBlockResponse::ReadBlockResponse(const ReadBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:partition_oram.ReadBlockResponse)
}

inline void ReadBlockResponse::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReadBlockResponse::~ReadBlockResponse() {
  // @@protoc_insertion_point(destructor:partition_oram.ReadBlockResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadBlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadBlockResponse::ArenaDtor(void* object) {
  ReadBlockResponse* _this = reinterpret_cast< ReadBlockResponse* >(object);
  (void)_this;
}
void ReadBlockResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:partition_oram.ReadBlockResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadBlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadBlockResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:partition_oram.ReadBlockResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:partition_oram.ReadBlockResponse)
  return target;
}

size_t ReadBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:partition_oram.ReadBlockResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadBlockResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadBlockResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadBlockResponse::GetClassData() const { return &_class_data_; }

void ReadBlockResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadBlockResponse *>(to)->MergeFrom(
      static_cast<const ReadBlockResponse &>(from));
}


void ReadBlockResponse::MergeFrom(const ReadBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:partition_oram.ReadBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadBlockResponse::CopyFrom(const ReadBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:partition_oram.ReadBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadBlockResponse::IsInitialized() const {
  return true;
}

void ReadBlockResponse::InternalSwap(ReadBlockResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadBlockResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[4]);
}

// ===================================================================

class WriteBlockRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<WriteBlockRequest>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WriteBlockRequest::WriteBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:partition_oram.WriteBlockRequest)
}
WriteBlockRequest::WriteBlockRequest(const WriteBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:partition_oram.WriteBlockRequest)
}

inline void WriteBlockRequest::SharedCtor() {
type_ = 0;
}

WriteBlockRequest::~WriteBlockRequest() {
  // @@protoc_insertion_point(destructor:partition_oram.WriteBlockRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriteBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WriteBlockRequest::ArenaDtor(void* object) {
  WriteBlockRequest* _this = reinterpret_cast< WriteBlockRequest* >(object);
  (void)_this;
}
void WriteBlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:partition_oram.WriteBlockRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .partition_oram.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::partition_oram::Type>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WriteBlockRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:partition_oram.WriteBlockRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .partition_oram.Type type = 1;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:partition_oram.WriteBlockRequest)
  return target;
}

size_t WriteBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:partition_oram.WriteBlockRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .partition_oram.Type type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteBlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriteBlockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteBlockRequest::GetClassData() const { return &_class_data_; }

void WriteBlockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriteBlockRequest *>(to)->MergeFrom(
      static_cast<const WriteBlockRequest &>(from));
}


void WriteBlockRequest::MergeFrom(const WriteBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:partition_oram.WriteBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteBlockRequest::CopyFrom(const WriteBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:partition_oram.WriteBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteBlockRequest::IsInitialized() const {
  return true;
}

void WriteBlockRequest::InternalSwap(WriteBlockRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteBlockRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[5]);
}

// ===================================================================

class WriteBlockResponse::_Internal {
 public:
};

WriteBlockResponse::WriteBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:partition_oram.WriteBlockResponse)
}
WriteBlockResponse::WriteBlockResponse(const WriteBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:partition_oram.WriteBlockResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteBlockResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteBlockResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata WriteBlockResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace partition_oram
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::partition_oram::KeyExchangeRequest* Arena::CreateMaybeMessage< ::partition_oram::KeyExchangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::partition_oram::KeyExchangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::partition_oram::KeyExchangeResponse* Arena::CreateMaybeMessage< ::partition_oram::KeyExchangeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::partition_oram::KeyExchangeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::partition_oram::InitOramRequest* Arena::CreateMaybeMessage< ::partition_oram::InitOramRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::partition_oram::InitOramRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::partition_oram::ReadBlockRequest* Arena::CreateMaybeMessage< ::partition_oram::ReadBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::partition_oram::ReadBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::partition_oram::ReadBlockResponse* Arena::CreateMaybeMessage< ::partition_oram::ReadBlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::partition_oram::ReadBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::partition_oram::WriteBlockRequest* Arena::CreateMaybeMessage< ::partition_oram::WriteBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::partition_oram::WriteBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::partition_oram::WriteBlockResponse* Arena::CreateMaybeMessage< ::partition_oram::WriteBlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::partition_oram::WriteBlockResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
