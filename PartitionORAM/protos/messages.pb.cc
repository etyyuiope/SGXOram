// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace partition_oram {
constexpr PrintOramTreeRequest::PrintOramTreeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0u){}
struct PrintOramTreeRequestDefaultTypeInternal {
  constexpr PrintOramTreeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PrintOramTreeRequestDefaultTypeInternal() {}
  union {
    PrintOramTreeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PrintOramTreeRequestDefaultTypeInternal _PrintOramTreeRequest_default_instance_;
constexpr HelloMessage::HelloMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , iv_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct HelloMessageDefaultTypeInternal {
  constexpr HelloMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HelloMessageDefaultTypeInternal() {}
  union {
    HelloMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HelloMessageDefaultTypeInternal _HelloMessage_default_instance_;
constexpr KeyExchangeRequest::KeyExchangeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_client_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct KeyExchangeRequestDefaultTypeInternal {
  constexpr KeyExchangeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyExchangeRequestDefaultTypeInternal() {}
  union {
    KeyExchangeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyExchangeRequestDefaultTypeInternal _KeyExchangeRequest_default_instance_;
constexpr KeyExchangeResponse::KeyExchangeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_server_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct KeyExchangeResponseDefaultTypeInternal {
  constexpr KeyExchangeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyExchangeResponseDefaultTypeInternal() {}
  union {
    KeyExchangeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyExchangeResponseDefaultTypeInternal _KeyExchangeResponse_default_instance_;
constexpr InitOramRequest::InitOramRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0u)
  , bucket_size_(0u)
  , bucket_num_(0u){}
struct InitOramRequestDefaultTypeInternal {
  constexpr InitOramRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitOramRequestDefaultTypeInternal() {}
  union {
    InitOramRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitOramRequestDefaultTypeInternal _InitOramRequest_default_instance_;
constexpr ReadPathRequest::ReadPathRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0u)
  , path_(0u)
  , level_(0u){}
struct ReadPathRequestDefaultTypeInternal {
  constexpr ReadPathRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadPathRequestDefaultTypeInternal() {}
  union {
    ReadPathRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadPathRequestDefaultTypeInternal _ReadPathRequest_default_instance_;
constexpr ReadPathResponse::ReadPathResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bucket_(){}
struct ReadPathResponseDefaultTypeInternal {
  constexpr ReadPathResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadPathResponseDefaultTypeInternal() {}
  union {
    ReadPathResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadPathResponseDefaultTypeInternal _ReadPathResponse_default_instance_;
constexpr WritePathRequest::WritePathRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bucket_()
  , id_(0u)
  , path_(0u)
  , level_(0u)
  , type_(0)

  , offset_(0u){}
struct WritePathRequestDefaultTypeInternal {
  constexpr WritePathRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WritePathRequestDefaultTypeInternal() {}
  union {
    WritePathRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WritePathRequestDefaultTypeInternal _WritePathRequest_default_instance_;
constexpr WritePathResponse::WritePathResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct WritePathResponseDefaultTypeInternal {
  constexpr WritePathResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WritePathResponseDefaultTypeInternal() {}
  union {
    WritePathResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WritePathResponseDefaultTypeInternal _WritePathResponse_default_instance_;
}  // namespace partition_oram
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_messages_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_2eproto = nullptr;

const uint32_t TableStruct_messages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::partition_oram::PrintOramTreeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::partition_oram::PrintOramTreeRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::partition_oram::HelloMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::partition_oram::HelloMessage, content_),
  PROTOBUF_FIELD_OFFSET(::partition_oram::HelloMessage, iv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::partition_oram::KeyExchangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::partition_oram::KeyExchangeRequest, public_key_client_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::partition_oram::KeyExchangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::partition_oram::KeyExchangeResponse, public_key_server_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::partition_oram::InitOramRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::partition_oram::InitOramRequest, id_),
  PROTOBUF_FIELD_OFFSET(::partition_oram::InitOramRequest, bucket_size_),
  PROTOBUF_FIELD_OFFSET(::partition_oram::InitOramRequest, bucket_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::partition_oram::ReadPathRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::partition_oram::ReadPathRequest, id_),
  PROTOBUF_FIELD_OFFSET(::partition_oram::ReadPathRequest, path_),
  PROTOBUF_FIELD_OFFSET(::partition_oram::ReadPathRequest, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::partition_oram::ReadPathResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::partition_oram::ReadPathResponse, bucket_),
  PROTOBUF_FIELD_OFFSET(::partition_oram::WritePathRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::partition_oram::WritePathRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::partition_oram::WritePathRequest, id_),
  PROTOBUF_FIELD_OFFSET(::partition_oram::WritePathRequest, path_),
  PROTOBUF_FIELD_OFFSET(::partition_oram::WritePathRequest, level_),
  PROTOBUF_FIELD_OFFSET(::partition_oram::WritePathRequest, bucket_),
  PROTOBUF_FIELD_OFFSET(::partition_oram::WritePathRequest, type_),
  PROTOBUF_FIELD_OFFSET(::partition_oram::WritePathRequest, offset_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::partition_oram::WritePathResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::partition_oram::PrintOramTreeRequest)},
  { 7, -1, -1, sizeof(::partition_oram::HelloMessage)},
  { 15, -1, -1, sizeof(::partition_oram::KeyExchangeRequest)},
  { 22, -1, -1, sizeof(::partition_oram::KeyExchangeResponse)},
  { 29, -1, -1, sizeof(::partition_oram::InitOramRequest)},
  { 38, -1, -1, sizeof(::partition_oram::ReadPathRequest)},
  { 47, -1, -1, sizeof(::partition_oram::ReadPathResponse)},
  { 54, 66, -1, sizeof(::partition_oram::WritePathRequest)},
  { 72, -1, -1, sizeof(::partition_oram::WritePathResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::partition_oram::_PrintOramTreeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::partition_oram::_HelloMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::partition_oram::_KeyExchangeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::partition_oram::_KeyExchangeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::partition_oram::_InitOramRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::partition_oram::_ReadPathRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::partition_oram::_ReadPathResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::partition_oram::_WritePathRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::partition_oram::_WritePathResponse_default_instance_),
};

const char descriptor_table_protodef_messages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016messages.proto\022\016partition_oram\032\033google"
  "/protobuf/empty.proto\"\"\n\024PrintOramTreeRe"
  "quest\022\n\n\002id\030\001 \001(\r\"+\n\014HelloMessage\022\017\n\007con"
  "tent\030\001 \001(\014\022\n\n\002iv\030\002 \001(\014\"/\n\022KeyExchangeReq"
  "uest\022\031\n\021public_key_client\030\001 \001(\014\"0\n\023KeyEx"
  "changeResponse\022\031\n\021public_key_server\030\001 \001("
  "\014\"F\n\017InitOramRequest\022\n\n\002id\030\001 \001(\r\022\023\n\013buck"
  "et_size\030\002 \001(\r\022\022\n\nbucket_num\030\003 \001(\r\":\n\017Rea"
  "dPathRequest\022\n\n\002id\030\001 \001(\r\022\014\n\004path\030\002 \001(\r\022\r"
  "\n\005level\030\003 \001(\r\"\"\n\020ReadPathResponse\022\016\n\006buc"
  "ket\030\001 \003(\014\"\235\001\n\020WritePathRequest\022\n\n\002id\030\001 \001"
  "(\r\022\014\n\004path\030\002 \001(\r\022\r\n\005level\030\003 \001(\r\022\016\n\006bucke"
  "t\030\004 \003(\014\022\'\n\004type\030\005 \001(\0162\024.partition_oram.T"
  "ypeH\000\210\001\001\022\023\n\006offset\030\006 \001(\rH\001\210\001\001B\007\n\005_typeB\t"
  "\n\007_offset\"\023\n\021WritePathResponse*<\n\004Type\022\017"
  "\n\013kSequential\020\000\022\013\n\007kRandom\020\001\022\t\n\005kInit\020\002\022"
  "\013\n\007kNormal\020\0032\251\004\n\006server\022E\n\010InitOram\022\037.pa"
  "rtition_oram.InitOramRequest\032\026.google.pr"
  "otobuf.Empty\"\000\022O\n\rPrintOramTree\022$.partit"
  "ion_oram.PrintOramTreeRequest\032\026.google.p"
  "rotobuf.Empty\"\000\022O\n\010ReadPath\022\037.partition_"
  "oram.ReadPathRequest\032 .partition_oram.Re"
  "adPathResponse\"\000\022R\n\tWritePath\022 .partitio"
  "n_oram.WritePathRequest\032!.partition_oram"
  ".WritePathResponse\"\000\022C\n\017CloseConnection\022"
  "\026.google.protobuf.Empty\032\026.google.protobu"
  "f.Empty\"\000\022X\n\013KeyExchange\022\".partition_ora"
  "m.KeyExchangeRequest\032#.partition_oram.Ke"
  "yExchangeResponse\"\000\022C\n\tSendHello\022\034.parti"
  "tion_oram.HelloMessage\032\026.google.protobuf"
  ".Empty\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_messages_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto = {
  false, false, 1216, descriptor_table_protodef_messages_2eproto, "messages.proto", 
  &descriptor_table_messages_2eproto_once, descriptor_table_messages_2eproto_deps, 1, 9,
  schemas, file_default_instances, TableStruct_messages_2eproto::offsets,
  file_level_metadata_messages_2eproto, file_level_enum_descriptors_messages_2eproto, file_level_service_descriptors_messages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_messages_2eproto_getter() {
  return &descriptor_table_messages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_messages_2eproto(&descriptor_table_messages_2eproto);
namespace partition_oram {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[0];
}
bool Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PrintOramTreeRequest::_Internal {
 public:
};

PrintOramTreeRequest::PrintOramTreeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:partition_oram.PrintOramTreeRequest)
}
PrintOramTreeRequest::PrintOramTreeRequest(const PrintOramTreeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:partition_oram.PrintOramTreeRequest)
}

inline void PrintOramTreeRequest::SharedCtor() {
id_ = 0u;
}

PrintOramTreeRequest::~PrintOramTreeRequest() {
  // @@protoc_insertion_point(destructor:partition_oram.PrintOramTreeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PrintOramTreeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PrintOramTreeRequest::ArenaDtor(void* object) {
  PrintOramTreeRequest* _this = reinterpret_cast< PrintOramTreeRequest* >(object);
  (void)_this;
}
void PrintOramTreeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrintOramTreeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrintOramTreeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:partition_oram.PrintOramTreeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrintOramTreeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrintOramTreeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:partition_oram.PrintOramTreeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:partition_oram.PrintOramTreeRequest)
  return target;
}

size_t PrintOramTreeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:partition_oram.PrintOramTreeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrintOramTreeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PrintOramTreeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrintOramTreeRequest::GetClassData() const { return &_class_data_; }

void PrintOramTreeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PrintOramTreeRequest *>(to)->MergeFrom(
      static_cast<const PrintOramTreeRequest &>(from));
}


void PrintOramTreeRequest::MergeFrom(const PrintOramTreeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:partition_oram.PrintOramTreeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrintOramTreeRequest::CopyFrom(const PrintOramTreeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:partition_oram.PrintOramTreeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintOramTreeRequest::IsInitialized() const {
  return true;
}

void PrintOramTreeRequest::InternalSwap(PrintOramTreeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrintOramTreeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[0]);
}

// ===================================================================

class HelloMessage::_Internal {
 public:
};

HelloMessage::HelloMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:partition_oram.HelloMessage)
}
HelloMessage::HelloMessage(const HelloMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArenaForAllocation());
  }
  iv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    iv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_iv().empty()) {
    iv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_iv(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:partition_oram.HelloMessage)
}

inline void HelloMessage::SharedCtor() {
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
iv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  iv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HelloMessage::~HelloMessage() {
  // @@protoc_insertion_point(destructor:partition_oram.HelloMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HelloMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HelloMessage::ArenaDtor(void* object) {
  HelloMessage* _this = reinterpret_cast< HelloMessage* >(object);
  (void)_this;
}
void HelloMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HelloMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HelloMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:partition_oram.HelloMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty();
  iv_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelloMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes iv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_iv();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HelloMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:partition_oram.HelloMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_content(), target);
  }

  // bytes iv = 2;
  if (!this->_internal_iv().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_iv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:partition_oram.HelloMessage)
  return target;
}

size_t HelloMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:partition_oram.HelloMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 1;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // bytes iv = 2;
  if (!this->_internal_iv().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_iv());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HelloMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HelloMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HelloMessage::GetClassData() const { return &_class_data_; }

void HelloMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HelloMessage *>(to)->MergeFrom(
      static_cast<const HelloMessage &>(from));
}


void HelloMessage::MergeFrom(const HelloMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:partition_oram.HelloMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (!from._internal_iv().empty()) {
    _internal_set_iv(from._internal_iv());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HelloMessage::CopyFrom(const HelloMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:partition_oram.HelloMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloMessage::IsInitialized() const {
  return true;
}

void HelloMessage::InternalSwap(HelloMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &iv_, lhs_arena,
      &other->iv_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[1]);
}

// ===================================================================

class KeyExchangeRequest::_Internal {
 public:
};

KeyExchangeRequest::KeyExchangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:partition_oram.KeyExchangeRequest)
}
KeyExchangeRequest::KeyExchangeRequest(const KeyExchangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_client_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_key_client_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key_client().empty()) {
    public_key_client_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key_client(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:partition_oram.KeyExchangeRequest)
}

inline void KeyExchangeRequest::SharedCtor() {
public_key_client_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_key_client_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KeyExchangeRequest::~KeyExchangeRequest() {
  // @@protoc_insertion_point(destructor:partition_oram.KeyExchangeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KeyExchangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  public_key_client_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyExchangeRequest::ArenaDtor(void* object) {
  KeyExchangeRequest* _this = reinterpret_cast< KeyExchangeRequest* >(object);
  (void)_this;
}
void KeyExchangeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyExchangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyExchangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:partition_oram.KeyExchangeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_client_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyExchangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes public_key_client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_public_key_client();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyExchangeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:partition_oram.KeyExchangeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes public_key_client = 1;
  if (!this->_internal_public_key_client().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_key_client(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:partition_oram.KeyExchangeRequest)
  return target;
}

size_t KeyExchangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:partition_oram.KeyExchangeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key_client = 1;
  if (!this->_internal_public_key_client().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key_client());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyExchangeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KeyExchangeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyExchangeRequest::GetClassData() const { return &_class_data_; }

void KeyExchangeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KeyExchangeRequest *>(to)->MergeFrom(
      static_cast<const KeyExchangeRequest &>(from));
}


void KeyExchangeRequest::MergeFrom(const KeyExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:partition_oram.KeyExchangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key_client().empty()) {
    _internal_set_public_key_client(from._internal_public_key_client());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyExchangeRequest::CopyFrom(const KeyExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:partition_oram.KeyExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyExchangeRequest::IsInitialized() const {
  return true;
}

void KeyExchangeRequest::InternalSwap(KeyExchangeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_client_, lhs_arena,
      &other->public_key_client_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyExchangeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[2]);
}

// ===================================================================

class KeyExchangeResponse::_Internal {
 public:
};

KeyExchangeResponse::KeyExchangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:partition_oram.KeyExchangeResponse)
}
KeyExchangeResponse::KeyExchangeResponse(const KeyExchangeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_key_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key_server().empty()) {
    public_key_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key_server(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:partition_oram.KeyExchangeResponse)
}

inline void KeyExchangeResponse::SharedCtor() {
public_key_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_key_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KeyExchangeResponse::~KeyExchangeResponse() {
  // @@protoc_insertion_point(destructor:partition_oram.KeyExchangeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KeyExchangeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  public_key_server_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyExchangeResponse::ArenaDtor(void* object) {
  KeyExchangeResponse* _this = reinterpret_cast< KeyExchangeResponse* >(object);
  (void)_this;
}
void KeyExchangeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyExchangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyExchangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:partition_oram.KeyExchangeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_server_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyExchangeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes public_key_server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_public_key_server();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyExchangeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:partition_oram.KeyExchangeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes public_key_server = 1;
  if (!this->_internal_public_key_server().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_key_server(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:partition_oram.KeyExchangeResponse)
  return target;
}

size_t KeyExchangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:partition_oram.KeyExchangeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key_server = 1;
  if (!this->_internal_public_key_server().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key_server());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyExchangeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KeyExchangeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyExchangeResponse::GetClassData() const { return &_class_data_; }

void KeyExchangeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KeyExchangeResponse *>(to)->MergeFrom(
      static_cast<const KeyExchangeResponse &>(from));
}


void KeyExchangeResponse::MergeFrom(const KeyExchangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:partition_oram.KeyExchangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key_server().empty()) {
    _internal_set_public_key_server(from._internal_public_key_server());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyExchangeResponse::CopyFrom(const KeyExchangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:partition_oram.KeyExchangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyExchangeResponse::IsInitialized() const {
  return true;
}

void KeyExchangeResponse::InternalSwap(KeyExchangeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_server_, lhs_arena,
      &other->public_key_server_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyExchangeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[3]);
}

// ===================================================================

class InitOramRequest::_Internal {
 public:
};

InitOramRequest::InitOramRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:partition_oram.InitOramRequest)
}
InitOramRequest::InitOramRequest(const InitOramRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bucket_num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(bucket_num_));
  // @@protoc_insertion_point(copy_constructor:partition_oram.InitOramRequest)
}

inline void InitOramRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bucket_num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(bucket_num_));
}

InitOramRequest::~InitOramRequest() {
  // @@protoc_insertion_point(destructor:partition_oram.InitOramRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitOramRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InitOramRequest::ArenaDtor(void* object) {
  InitOramRequest* _this = reinterpret_cast< InitOramRequest* >(object);
  (void)_this;
}
void InitOramRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitOramRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitOramRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:partition_oram.InitOramRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(bucket_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitOramRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bucket_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          bucket_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bucket_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          bucket_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitOramRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:partition_oram.InitOramRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 bucket_size = 2;
  if (this->_internal_bucket_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bucket_size(), target);
  }

  // uint32 bucket_num = 3;
  if (this->_internal_bucket_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bucket_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:partition_oram.InitOramRequest)
  return target;
}

size_t InitOramRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:partition_oram.InitOramRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 bucket_size = 2;
  if (this->_internal_bucket_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bucket_size());
  }

  // uint32 bucket_num = 3;
  if (this->_internal_bucket_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bucket_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitOramRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitOramRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitOramRequest::GetClassData() const { return &_class_data_; }

void InitOramRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitOramRequest *>(to)->MergeFrom(
      static_cast<const InitOramRequest &>(from));
}


void InitOramRequest::MergeFrom(const InitOramRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:partition_oram.InitOramRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_bucket_size() != 0) {
    _internal_set_bucket_size(from._internal_bucket_size());
  }
  if (from._internal_bucket_num() != 0) {
    _internal_set_bucket_num(from._internal_bucket_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitOramRequest::CopyFrom(const InitOramRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:partition_oram.InitOramRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitOramRequest::IsInitialized() const {
  return true;
}

void InitOramRequest::InternalSwap(InitOramRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitOramRequest, bucket_num_)
      + sizeof(InitOramRequest::bucket_num_)
      - PROTOBUF_FIELD_OFFSET(InitOramRequest, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitOramRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[4]);
}

// ===================================================================

class ReadPathRequest::_Internal {
 public:
};

ReadPathRequest::ReadPathRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:partition_oram.ReadPathRequest)
}
ReadPathRequest::ReadPathRequest(const ReadPathRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&id_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:partition_oram.ReadPathRequest)
}

inline void ReadPathRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&id_)) + sizeof(level_));
}

ReadPathRequest::~ReadPathRequest() {
  // @@protoc_insertion_point(destructor:partition_oram.ReadPathRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadPathRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReadPathRequest::ArenaDtor(void* object) {
  ReadPathRequest* _this = reinterpret_cast< ReadPathRequest* >(object);
  (void)_this;
}
void ReadPathRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadPathRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadPathRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:partition_oram.ReadPathRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&id_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadPathRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadPathRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:partition_oram.ReadPathRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 path = 2;
  if (this->_internal_path() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_path(), target);
  }

  // uint32 level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:partition_oram.ReadPathRequest)
  return target;
}

size_t ReadPathRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:partition_oram.ReadPathRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 path = 2;
  if (this->_internal_path() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_path());
  }

  // uint32 level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadPathRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadPathRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadPathRequest::GetClassData() const { return &_class_data_; }

void ReadPathRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadPathRequest *>(to)->MergeFrom(
      static_cast<const ReadPathRequest &>(from));
}


void ReadPathRequest::MergeFrom(const ReadPathRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:partition_oram.ReadPathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_path() != 0) {
    _internal_set_path(from._internal_path());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadPathRequest::CopyFrom(const ReadPathRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:partition_oram.ReadPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadPathRequest::IsInitialized() const {
  return true;
}

void ReadPathRequest::InternalSwap(ReadPathRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadPathRequest, level_)
      + sizeof(ReadPathRequest::level_)
      - PROTOBUF_FIELD_OFFSET(ReadPathRequest, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadPathRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[5]);
}

// ===================================================================

class ReadPathResponse::_Internal {
 public:
};

ReadPathResponse::ReadPathResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bucket_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:partition_oram.ReadPathResponse)
}
ReadPathResponse::ReadPathResponse(const ReadPathResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bucket_(from.bucket_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:partition_oram.ReadPathResponse)
}

inline void ReadPathResponse::SharedCtor() {
}

ReadPathResponse::~ReadPathResponse() {
  // @@protoc_insertion_point(destructor:partition_oram.ReadPathResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadPathResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReadPathResponse::ArenaDtor(void* object) {
  ReadPathResponse* _this = reinterpret_cast< ReadPathResponse* >(object);
  (void)_this;
}
void ReadPathResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadPathResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadPathResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:partition_oram.ReadPathResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadPathResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes bucket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bucket();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadPathResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:partition_oram.ReadPathResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes bucket = 1;
  for (int i = 0, n = this->_internal_bucket_size(); i < n; i++) {
    const auto& s = this->_internal_bucket(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:partition_oram.ReadPathResponse)
  return target;
}

size_t ReadPathResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:partition_oram.ReadPathResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes bucket = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bucket_.size());
  for (int i = 0, n = bucket_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      bucket_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadPathResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadPathResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadPathResponse::GetClassData() const { return &_class_data_; }

void ReadPathResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadPathResponse *>(to)->MergeFrom(
      static_cast<const ReadPathResponse &>(from));
}


void ReadPathResponse::MergeFrom(const ReadPathResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:partition_oram.ReadPathResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bucket_.MergeFrom(from.bucket_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadPathResponse::CopyFrom(const ReadPathResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:partition_oram.ReadPathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadPathResponse::IsInitialized() const {
  return true;
}

void ReadPathResponse::InternalSwap(ReadPathResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bucket_.InternalSwap(&other->bucket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadPathResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[6]);
}

// ===================================================================

class WritePathRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<WritePathRequest>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WritePathRequest::WritePathRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bucket_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:partition_oram.WritePathRequest)
}
WritePathRequest::WritePathRequest(const WritePathRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      bucket_(from.bucket_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&id_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:partition_oram.WritePathRequest)
}

inline void WritePathRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&id_)) + sizeof(offset_));
}

WritePathRequest::~WritePathRequest() {
  // @@protoc_insertion_point(destructor:partition_oram.WritePathRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WritePathRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WritePathRequest::ArenaDtor(void* object) {
  WritePathRequest* _this = reinterpret_cast< WritePathRequest* >(object);
  (void)_this;
}
void WritePathRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WritePathRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WritePathRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:partition_oram.WritePathRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&id_)) + sizeof(level_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offset_) -
        reinterpret_cast<char*>(&type_)) + sizeof(offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WritePathRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes bucket = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bucket();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .partition_oram.Type type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::partition_oram::Type>(val));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WritePathRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:partition_oram.WritePathRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 path = 2;
  if (this->_internal_path() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_path(), target);
  }

  // uint32 level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // repeated bytes bucket = 4;
  for (int i = 0, n = this->_internal_bucket_size(); i < n; i++) {
    const auto& s = this->_internal_bucket(i);
    target = stream->WriteBytes(4, s, target);
  }

  // optional .partition_oram.Type type = 5;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // optional uint32 offset = 6;
  if (_internal_has_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:partition_oram.WritePathRequest)
  return target;
}

size_t WritePathRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:partition_oram.WritePathRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes bucket = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bucket_.size());
  for (int i = 0, n = bucket_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      bucket_.Get(i));
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 path = 2;
  if (this->_internal_path() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_path());
  }

  // uint32 level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .partition_oram.Type type = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 offset = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WritePathRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WritePathRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WritePathRequest::GetClassData() const { return &_class_data_; }

void WritePathRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WritePathRequest *>(to)->MergeFrom(
      static_cast<const WritePathRequest &>(from));
}


void WritePathRequest::MergeFrom(const WritePathRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:partition_oram.WritePathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bucket_.MergeFrom(from.bucket_);
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_path() != 0) {
    _internal_set_path(from._internal_path());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WritePathRequest::CopyFrom(const WritePathRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:partition_oram.WritePathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WritePathRequest::IsInitialized() const {
  return true;
}

void WritePathRequest::InternalSwap(WritePathRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bucket_.InternalSwap(&other->bucket_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WritePathRequest, offset_)
      + sizeof(WritePathRequest::offset_)
      - PROTOBUF_FIELD_OFFSET(WritePathRequest, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WritePathRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[7]);
}

// ===================================================================

class WritePathResponse::_Internal {
 public:
};

WritePathResponse::WritePathResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:partition_oram.WritePathResponse)
}
WritePathResponse::WritePathResponse(const WritePathResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:partition_oram.WritePathResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WritePathResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WritePathResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata WritePathResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace partition_oram
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::partition_oram::PrintOramTreeRequest* Arena::CreateMaybeMessage< ::partition_oram::PrintOramTreeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::partition_oram::PrintOramTreeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::partition_oram::HelloMessage* Arena::CreateMaybeMessage< ::partition_oram::HelloMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::partition_oram::HelloMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::partition_oram::KeyExchangeRequest* Arena::CreateMaybeMessage< ::partition_oram::KeyExchangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::partition_oram::KeyExchangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::partition_oram::KeyExchangeResponse* Arena::CreateMaybeMessage< ::partition_oram::KeyExchangeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::partition_oram::KeyExchangeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::partition_oram::InitOramRequest* Arena::CreateMaybeMessage< ::partition_oram::InitOramRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::partition_oram::InitOramRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::partition_oram::ReadPathRequest* Arena::CreateMaybeMessage< ::partition_oram::ReadPathRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::partition_oram::ReadPathRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::partition_oram::ReadPathResponse* Arena::CreateMaybeMessage< ::partition_oram::ReadPathResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::partition_oram::ReadPathResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::partition_oram::WritePathRequest* Arena::CreateMaybeMessage< ::partition_oram::WritePathRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::partition_oram::WritePathRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::partition_oram::WritePathResponse* Arena::CreateMaybeMessage< ::partition_oram::WritePathResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::partition_oram::WritePathResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
