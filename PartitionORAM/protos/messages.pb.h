// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace partition_oram {
class InitOramRequest;
struct InitOramRequestDefaultTypeInternal;
extern InitOramRequestDefaultTypeInternal _InitOramRequest_default_instance_;
class KeyExchangeRequest;
struct KeyExchangeRequestDefaultTypeInternal;
extern KeyExchangeRequestDefaultTypeInternal _KeyExchangeRequest_default_instance_;
class KeyExchangeResponse;
struct KeyExchangeResponseDefaultTypeInternal;
extern KeyExchangeResponseDefaultTypeInternal _KeyExchangeResponse_default_instance_;
class ReadBlockRequest;
struct ReadBlockRequestDefaultTypeInternal;
extern ReadBlockRequestDefaultTypeInternal _ReadBlockRequest_default_instance_;
class ReadBlockResponse;
struct ReadBlockResponseDefaultTypeInternal;
extern ReadBlockResponseDefaultTypeInternal _ReadBlockResponse_default_instance_;
class WriteBlockRequest;
struct WriteBlockRequestDefaultTypeInternal;
extern WriteBlockRequestDefaultTypeInternal _WriteBlockRequest_default_instance_;
class WriteBlockResponse;
struct WriteBlockResponseDefaultTypeInternal;
extern WriteBlockResponseDefaultTypeInternal _WriteBlockResponse_default_instance_;
}  // namespace partition_oram
PROTOBUF_NAMESPACE_OPEN
template<> ::partition_oram::InitOramRequest* Arena::CreateMaybeMessage<::partition_oram::InitOramRequest>(Arena*);
template<> ::partition_oram::KeyExchangeRequest* Arena::CreateMaybeMessage<::partition_oram::KeyExchangeRequest>(Arena*);
template<> ::partition_oram::KeyExchangeResponse* Arena::CreateMaybeMessage<::partition_oram::KeyExchangeResponse>(Arena*);
template<> ::partition_oram::ReadBlockRequest* Arena::CreateMaybeMessage<::partition_oram::ReadBlockRequest>(Arena*);
template<> ::partition_oram::ReadBlockResponse* Arena::CreateMaybeMessage<::partition_oram::ReadBlockResponse>(Arena*);
template<> ::partition_oram::WriteBlockRequest* Arena::CreateMaybeMessage<::partition_oram::WriteBlockRequest>(Arena*);
template<> ::partition_oram::WriteBlockResponse* Arena::CreateMaybeMessage<::partition_oram::WriteBlockResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace partition_oram {

enum Type : int {
  Sequential = 0,
  Random = 1,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = Sequential;
constexpr Type Type_MAX = Random;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor();
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_descriptor(), enum_t_value);
}
inline bool Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
// ===================================================================

class KeyExchangeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:partition_oram.KeyExchangeRequest) */ {
 public:
  inline KeyExchangeRequest() : KeyExchangeRequest(nullptr) {}
  ~KeyExchangeRequest() override;
  explicit constexpr KeyExchangeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyExchangeRequest(const KeyExchangeRequest& from);
  KeyExchangeRequest(KeyExchangeRequest&& from) noexcept
    : KeyExchangeRequest() {
    *this = ::std::move(from);
  }

  inline KeyExchangeRequest& operator=(const KeyExchangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyExchangeRequest& operator=(KeyExchangeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyExchangeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyExchangeRequest* internal_default_instance() {
    return reinterpret_cast<const KeyExchangeRequest*>(
               &_KeyExchangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyExchangeRequest& a, KeyExchangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyExchangeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyExchangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyExchangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyExchangeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyExchangeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KeyExchangeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyExchangeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "partition_oram.KeyExchangeRequest";
  }
  protected:
  explicit KeyExchangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyClientFieldNumber = 1,
  };
  // bytes public_key_client = 1;
  void clear_public_key_client();
  const std::string& public_key_client() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key_client(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key_client();
  PROTOBUF_NODISCARD std::string* release_public_key_client();
  void set_allocated_public_key_client(std::string* public_key_client);
  private:
  const std::string& _internal_public_key_client() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key_client(const std::string& value);
  std::string* _internal_mutable_public_key_client();
  public:

  // @@protoc_insertion_point(class_scope:partition_oram.KeyExchangeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_client_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class KeyExchangeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:partition_oram.KeyExchangeResponse) */ {
 public:
  inline KeyExchangeResponse() : KeyExchangeResponse(nullptr) {}
  ~KeyExchangeResponse() override;
  explicit constexpr KeyExchangeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyExchangeResponse(const KeyExchangeResponse& from);
  KeyExchangeResponse(KeyExchangeResponse&& from) noexcept
    : KeyExchangeResponse() {
    *this = ::std::move(from);
  }

  inline KeyExchangeResponse& operator=(const KeyExchangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyExchangeResponse& operator=(KeyExchangeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyExchangeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyExchangeResponse* internal_default_instance() {
    return reinterpret_cast<const KeyExchangeResponse*>(
               &_KeyExchangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KeyExchangeResponse& a, KeyExchangeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyExchangeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyExchangeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyExchangeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyExchangeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyExchangeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KeyExchangeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyExchangeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "partition_oram.KeyExchangeResponse";
  }
  protected:
  explicit KeyExchangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyServerFieldNumber = 1,
  };
  // bytes public_key_server = 1;
  void clear_public_key_server();
  const std::string& public_key_server() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key_server(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key_server();
  PROTOBUF_NODISCARD std::string* release_public_key_server();
  void set_allocated_public_key_server(std::string* public_key_server);
  private:
  const std::string& _internal_public_key_server() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key_server(const std::string& value);
  std::string* _internal_mutable_public_key_server();
  public:

  // @@protoc_insertion_point(class_scope:partition_oram.KeyExchangeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class InitOramRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:partition_oram.InitOramRequest) */ {
 public:
  inline InitOramRequest() : InitOramRequest(nullptr) {}
  ~InitOramRequest() override;
  explicit constexpr InitOramRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitOramRequest(const InitOramRequest& from);
  InitOramRequest(InitOramRequest&& from) noexcept
    : InitOramRequest() {
    *this = ::std::move(from);
  }

  inline InitOramRequest& operator=(const InitOramRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitOramRequest& operator=(InitOramRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitOramRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitOramRequest* internal_default_instance() {
    return reinterpret_cast<const InitOramRequest*>(
               &_InitOramRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InitOramRequest& a, InitOramRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InitOramRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitOramRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitOramRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitOramRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitOramRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitOramRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitOramRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "partition_oram.InitOramRequest";
  }
  protected:
  explicit InitOramRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParitionNumFieldNumber = 1,
    kBlockNumFieldNumber = 2,
  };
  // uint32 parition_num = 1;
  void clear_parition_num();
  uint32_t parition_num() const;
  void set_parition_num(uint32_t value);
  private:
  uint32_t _internal_parition_num() const;
  void _internal_set_parition_num(uint32_t value);
  public:

  // uint32 block_num = 2;
  void clear_block_num();
  uint32_t block_num() const;
  void set_block_num(uint32_t value);
  private:
  uint32_t _internal_block_num() const;
  void _internal_set_block_num(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:partition_oram.InitOramRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t parition_num_;
  uint32_t block_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ReadBlockRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:partition_oram.ReadBlockRequest) */ {
 public:
  inline ReadBlockRequest() : ReadBlockRequest(nullptr) {}
  explicit constexpr ReadBlockRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadBlockRequest(const ReadBlockRequest& from);
  ReadBlockRequest(ReadBlockRequest&& from) noexcept
    : ReadBlockRequest() {
    *this = ::std::move(from);
  }

  inline ReadBlockRequest& operator=(const ReadBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadBlockRequest& operator=(ReadBlockRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadBlockRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadBlockRequest* internal_default_instance() {
    return reinterpret_cast<const ReadBlockRequest*>(
               &_ReadBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReadBlockRequest& a, ReadBlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadBlockRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadBlockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadBlockRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReadBlockRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReadBlockRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "partition_oram.ReadBlockRequest";
  }
  protected:
  explicit ReadBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:partition_oram.ReadBlockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ReadBlockResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:partition_oram.ReadBlockResponse) */ {
 public:
  inline ReadBlockResponse() : ReadBlockResponse(nullptr) {}
  ~ReadBlockResponse() override;
  explicit constexpr ReadBlockResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadBlockResponse(const ReadBlockResponse& from);
  ReadBlockResponse(ReadBlockResponse&& from) noexcept
    : ReadBlockResponse() {
    *this = ::std::move(from);
  }

  inline ReadBlockResponse& operator=(const ReadBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadBlockResponse& operator=(ReadBlockResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadBlockResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadBlockResponse* internal_default_instance() {
    return reinterpret_cast<const ReadBlockResponse*>(
               &_ReadBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReadBlockResponse& a, ReadBlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadBlockResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadBlockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadBlockResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadBlockResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadBlockResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadBlockResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "partition_oram.ReadBlockResponse";
  }
  protected:
  explicit ReadBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:partition_oram.ReadBlockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class WriteBlockRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:partition_oram.WriteBlockRequest) */ {
 public:
  inline WriteBlockRequest() : WriteBlockRequest(nullptr) {}
  ~WriteBlockRequest() override;
  explicit constexpr WriteBlockRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteBlockRequest(const WriteBlockRequest& from);
  WriteBlockRequest(WriteBlockRequest&& from) noexcept
    : WriteBlockRequest() {
    *this = ::std::move(from);
  }

  inline WriteBlockRequest& operator=(const WriteBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteBlockRequest& operator=(WriteBlockRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteBlockRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteBlockRequest* internal_default_instance() {
    return reinterpret_cast<const WriteBlockRequest*>(
               &_WriteBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WriteBlockRequest& a, WriteBlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteBlockRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteBlockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteBlockRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteBlockRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriteBlockRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteBlockRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "partition_oram.WriteBlockRequest";
  }
  protected:
  explicit WriteBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // optional .partition_oram.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::partition_oram::Type type() const;
  void set_type(::partition_oram::Type value);
  private:
  ::partition_oram::Type _internal_type() const;
  void _internal_set_type(::partition_oram::Type value);
  public:

  // @@protoc_insertion_point(class_scope:partition_oram.WriteBlockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class WriteBlockResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:partition_oram.WriteBlockResponse) */ {
 public:
  inline WriteBlockResponse() : WriteBlockResponse(nullptr) {}
  explicit constexpr WriteBlockResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteBlockResponse(const WriteBlockResponse& from);
  WriteBlockResponse(WriteBlockResponse&& from) noexcept
    : WriteBlockResponse() {
    *this = ::std::move(from);
  }

  inline WriteBlockResponse& operator=(const WriteBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteBlockResponse& operator=(WriteBlockResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteBlockResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteBlockResponse* internal_default_instance() {
    return reinterpret_cast<const WriteBlockResponse*>(
               &_WriteBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WriteBlockResponse& a, WriteBlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteBlockResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteBlockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteBlockResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const WriteBlockResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const WriteBlockResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "partition_oram.WriteBlockResponse";
  }
  protected:
  explicit WriteBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:partition_oram.WriteBlockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyExchangeRequest

// bytes public_key_client = 1;
inline void KeyExchangeRequest::clear_public_key_client() {
  public_key_client_.ClearToEmpty();
}
inline const std::string& KeyExchangeRequest::public_key_client() const {
  // @@protoc_insertion_point(field_get:partition_oram.KeyExchangeRequest.public_key_client)
  return _internal_public_key_client();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyExchangeRequest::set_public_key_client(ArgT0&& arg0, ArgT... args) {
 
 public_key_client_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:partition_oram.KeyExchangeRequest.public_key_client)
}
inline std::string* KeyExchangeRequest::mutable_public_key_client() {
  std::string* _s = _internal_mutable_public_key_client();
  // @@protoc_insertion_point(field_mutable:partition_oram.KeyExchangeRequest.public_key_client)
  return _s;
}
inline const std::string& KeyExchangeRequest::_internal_public_key_client() const {
  return public_key_client_.Get();
}
inline void KeyExchangeRequest::_internal_set_public_key_client(const std::string& value) {
  
  public_key_client_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeyExchangeRequest::_internal_mutable_public_key_client() {
  
  return public_key_client_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeyExchangeRequest::release_public_key_client() {
  // @@protoc_insertion_point(field_release:partition_oram.KeyExchangeRequest.public_key_client)
  return public_key_client_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KeyExchangeRequest::set_allocated_public_key_client(std::string* public_key_client) {
  if (public_key_client != nullptr) {
    
  } else {
    
  }
  public_key_client_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key_client,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_key_client_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    public_key_client_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:partition_oram.KeyExchangeRequest.public_key_client)
}

// -------------------------------------------------------------------

// KeyExchangeResponse

// bytes public_key_server = 1;
inline void KeyExchangeResponse::clear_public_key_server() {
  public_key_server_.ClearToEmpty();
}
inline const std::string& KeyExchangeResponse::public_key_server() const {
  // @@protoc_insertion_point(field_get:partition_oram.KeyExchangeResponse.public_key_server)
  return _internal_public_key_server();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyExchangeResponse::set_public_key_server(ArgT0&& arg0, ArgT... args) {
 
 public_key_server_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:partition_oram.KeyExchangeResponse.public_key_server)
}
inline std::string* KeyExchangeResponse::mutable_public_key_server() {
  std::string* _s = _internal_mutable_public_key_server();
  // @@protoc_insertion_point(field_mutable:partition_oram.KeyExchangeResponse.public_key_server)
  return _s;
}
inline const std::string& KeyExchangeResponse::_internal_public_key_server() const {
  return public_key_server_.Get();
}
inline void KeyExchangeResponse::_internal_set_public_key_server(const std::string& value) {
  
  public_key_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeyExchangeResponse::_internal_mutable_public_key_server() {
  
  return public_key_server_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeyExchangeResponse::release_public_key_server() {
  // @@protoc_insertion_point(field_release:partition_oram.KeyExchangeResponse.public_key_server)
  return public_key_server_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KeyExchangeResponse::set_allocated_public_key_server(std::string* public_key_server) {
  if (public_key_server != nullptr) {
    
  } else {
    
  }
  public_key_server_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key_server,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_key_server_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    public_key_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:partition_oram.KeyExchangeResponse.public_key_server)
}

// -------------------------------------------------------------------

// InitOramRequest

// uint32 parition_num = 1;
inline void InitOramRequest::clear_parition_num() {
  parition_num_ = 0u;
}
inline uint32_t InitOramRequest::_internal_parition_num() const {
  return parition_num_;
}
inline uint32_t InitOramRequest::parition_num() const {
  // @@protoc_insertion_point(field_get:partition_oram.InitOramRequest.parition_num)
  return _internal_parition_num();
}
inline void InitOramRequest::_internal_set_parition_num(uint32_t value) {
  
  parition_num_ = value;
}
inline void InitOramRequest::set_parition_num(uint32_t value) {
  _internal_set_parition_num(value);
  // @@protoc_insertion_point(field_set:partition_oram.InitOramRequest.parition_num)
}

// uint32 block_num = 2;
inline void InitOramRequest::clear_block_num() {
  block_num_ = 0u;
}
inline uint32_t InitOramRequest::_internal_block_num() const {
  return block_num_;
}
inline uint32_t InitOramRequest::block_num() const {
  // @@protoc_insertion_point(field_get:partition_oram.InitOramRequest.block_num)
  return _internal_block_num();
}
inline void InitOramRequest::_internal_set_block_num(uint32_t value) {
  
  block_num_ = value;
}
inline void InitOramRequest::set_block_num(uint32_t value) {
  _internal_set_block_num(value);
  // @@protoc_insertion_point(field_set:partition_oram.InitOramRequest.block_num)
}

// -------------------------------------------------------------------

// ReadBlockRequest

// -------------------------------------------------------------------

// ReadBlockResponse

// bytes data = 1;
inline void ReadBlockResponse::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ReadBlockResponse::data() const {
  // @@protoc_insertion_point(field_get:partition_oram.ReadBlockResponse.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadBlockResponse::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:partition_oram.ReadBlockResponse.data)
}
inline std::string* ReadBlockResponse::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:partition_oram.ReadBlockResponse.data)
  return _s;
}
inline const std::string& ReadBlockResponse::_internal_data() const {
  return data_.Get();
}
inline void ReadBlockResponse::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadBlockResponse::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadBlockResponse::release_data() {
  // @@protoc_insertion_point(field_release:partition_oram.ReadBlockResponse.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadBlockResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:partition_oram.ReadBlockResponse.data)
}

// -------------------------------------------------------------------

// WriteBlockRequest

// optional .partition_oram.Type type = 1;
inline bool WriteBlockRequest::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WriteBlockRequest::has_type() const {
  return _internal_has_type();
}
inline void WriteBlockRequest::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::partition_oram::Type WriteBlockRequest::_internal_type() const {
  return static_cast< ::partition_oram::Type >(type_);
}
inline ::partition_oram::Type WriteBlockRequest::type() const {
  // @@protoc_insertion_point(field_get:partition_oram.WriteBlockRequest.type)
  return _internal_type();
}
inline void WriteBlockRequest::_internal_set_type(::partition_oram::Type value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void WriteBlockRequest::set_type(::partition_oram::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:partition_oram.WriteBlockRequest.type)
}

// -------------------------------------------------------------------

// WriteBlockResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace partition_oram

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::partition_oram::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::partition_oram::Type>() {
  return ::partition_oram::Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
