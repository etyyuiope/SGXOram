/*
 Copyright (c) 2021 Haobin Chen

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

enclave {
  include "sgx_tseal.h"
  
  /* std::xxx should be avoided because enclave's interfaces are written in C language. */
  /* C++ style classes and structs can only be passed after serialization. */
  /* To pass C++ style classes and structs to the enclave,
     the untrusted application must first create a buffer and then specify its length. */

  trusted {
		// Invoked by the client to intialize the inner oram controller.
		public int ecall_init_oram_controller();

    // Interfaces for sealing and unsealing data on the disk (if needed).
    public sgx_status_t ecall_seal([ in, size = plaintext_len ] const uint8_t *plaintext,
                                   size_t plaintext_len,
                                   [ out, size = sealed_size ] sgx_sealed_data_t *sealed_data,
                                   size_t sealed_size);

    public sgx_status_t ecall_unseal([ in, size = sealed_size ] const sgx_sealed_data_t *sealed_data,
                                     size_t sealed_size,
                                     [ out, size = plaintext_len ] uint8_t *plaintext,
                                     size_t plaintext_len);
  };

  untrusted {
		// A function for printing the buffer inside the enclave to the console.
		// Only invoked by the enclave.
    void ocall_printf([ in, string ] const char *str);

		// A slot is stored outside the enclave; thus we need to get the slot 
		// from the outside by its hashed fingerprint.
		void ocall_get_slot([ in, string ] const char *slot_fingerprint);

    // Exception handler.
    void ocall_exception_handler([ in, string ] const char* err_msg);
  };
};