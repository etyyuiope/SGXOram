// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: messages.proto
#ifndef GRPC_messages_2eproto__INCLUDED
#define GRPC_messages_2eproto__INCLUDED

#include "messages.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

// This defines all the functionalies that a remote server should provide.
// Currently we only support read / write. This ORAM data are generated by the server at random.
// If you need to upload data to the server, you should define other interfaces.
class sgx_oram final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Initialize the enclave and starts to negotiate a shared session key.
    virtual ::grpc::Status init_enclave(::grpc::ClientContext* context, const ::InitRequest& request, ::InitReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InitReply>> Asyncinit_enclave(::grpc::ClientContext* context, const ::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InitReply>>(Asyncinit_enclaveRaw(context, request, cq));
    }
    virtual ::grpc::Status read_block(::grpc::ClientContext* context, const ::ReadRequest& request, ::ReadReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ReadReply>> Asyncread_block(::grpc::ClientContext* context, const ::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ReadReply>>(Asyncread_blockRaw(context, request, cq));
    }
    virtual ::grpc::Status write_block(::grpc::ClientContext* context, const ::WriteRequest& request, ::WriteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WriteReply>> Asyncwrite_block(::grpc::ClientContext* context, const ::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WriteReply>>(Asyncwrite_blockRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InitReply>* Asyncinit_enclaveRaw(::grpc::ClientContext* context, const ::InitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ReadReply>* Asyncread_blockRaw(::grpc::ClientContext* context, const ::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::WriteReply>* Asyncwrite_blockRaw(::grpc::ClientContext* context, const ::WriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status init_enclave(::grpc::ClientContext* context, const ::InitRequest& request, ::InitReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InitReply>> Asyncinit_enclave(::grpc::ClientContext* context, const ::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InitReply>>(Asyncinit_enclaveRaw(context, request, cq));
    }
    ::grpc::Status read_block(::grpc::ClientContext* context, const ::ReadRequest& request, ::ReadReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ReadReply>> Asyncread_block(::grpc::ClientContext* context, const ::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ReadReply>>(Asyncread_blockRaw(context, request, cq));
    }
    ::grpc::Status write_block(::grpc::ClientContext* context, const ::WriteRequest& request, ::WriteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WriteReply>> Asyncwrite_block(::grpc::ClientContext* context, const ::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WriteReply>>(Asyncwrite_blockRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::InitReply>* Asyncinit_enclaveRaw(::grpc::ClientContext* context, const ::InitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ReadReply>* Asyncread_blockRaw(::grpc::ClientContext* context, const ::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::WriteReply>* Asyncwrite_blockRaw(::grpc::ClientContext* context, const ::WriteRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_init_enclave_;
    const ::grpc::RpcMethod rpcmethod_read_block_;
    const ::grpc::RpcMethod rpcmethod_write_block_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Initialize the enclave and starts to negotiate a shared session key.
    virtual ::grpc::Status init_enclave(::grpc::ServerContext* context, const ::InitRequest* request, ::InitReply* response);
    virtual ::grpc::Status read_block(::grpc::ServerContext* context, const ::ReadRequest* request, ::ReadReply* response);
    virtual ::grpc::Status write_block(::grpc::ServerContext* context, const ::WriteRequest* request, ::WriteReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_init_enclave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_init_enclave() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_init_enclave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_enclave(::grpc::ServerContext* context, const ::InitRequest* request, ::InitReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit_enclave(::grpc::ServerContext* context, ::InitRequest* request, ::grpc::ServerAsyncResponseWriter< ::InitReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_read_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_read_block() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_read_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read_block(::grpc::ServerContext* context, const ::ReadRequest* request, ::ReadReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestread_block(::grpc::ServerContext* context, ::ReadRequest* request, ::grpc::ServerAsyncResponseWriter< ::ReadReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_write_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_write_block() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_write_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status write_block(::grpc::ServerContext* context, const ::WriteRequest* request, ::WriteReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestwrite_block(::grpc::ServerContext* context, ::WriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::WriteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_init_enclave<WithAsyncMethod_read_block<WithAsyncMethod_write_block<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_init_enclave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_init_enclave() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_init_enclave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_enclave(::grpc::ServerContext* context, const ::InitRequest* request, ::InitReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_read_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_read_block() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_read_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read_block(::grpc::ServerContext* context, const ::ReadRequest* request, ::ReadReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_write_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_write_block() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_write_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status write_block(::grpc::ServerContext* context, const ::WriteRequest* request, ::WriteReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_init_enclave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_init_enclave() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::InitRequest, ::InitReply>(std::bind(&WithStreamedUnaryMethod_init_enclave<BaseClass>::Streamedinit_enclave, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_init_enclave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status init_enclave(::grpc::ServerContext* context, const ::InitRequest* request, ::InitReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedinit_enclave(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::InitRequest,::InitReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_read_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_read_block() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::ReadRequest, ::ReadReply>(std::bind(&WithStreamedUnaryMethod_read_block<BaseClass>::Streamedread_block, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_read_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status read_block(::grpc::ServerContext* context, const ::ReadRequest* request, ::ReadReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedread_block(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ReadRequest,::ReadReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_write_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_write_block() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::WriteRequest, ::WriteReply>(std::bind(&WithStreamedUnaryMethod_write_block<BaseClass>::Streamedwrite_block, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_write_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status write_block(::grpc::ServerContext* context, const ::WriteRequest* request, ::WriteReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedwrite_block(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::WriteRequest,::WriteReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_init_enclave<WithStreamedUnaryMethod_read_block<WithStreamedUnaryMethod_write_block<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_init_enclave<WithStreamedUnaryMethod_read_block<WithStreamedUnaryMethod_write_block<Service > > > StreamedService;
};


#endif  // GRPC_messages_2eproto__INCLUDED
