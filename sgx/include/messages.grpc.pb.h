// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: messages.proto
#ifndef GRPC_messages_2eproto__INCLUDED
#define GRPC_messages_2eproto__INCLUDED

#include "messages.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace oram {

// This defines all the functionalies that a remote server should provide.
// Currently we only support read / write. This ORAM data are generated by the server at random.
// If you need to upload data to the server, you should define other interfaces.
class sgx_oram final {
 public:
  static constexpr char const* service_full_name() {
    return "oram.sgx_oram";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // ===================================================== //
    // Enclave-related remote process calls.
    virtual ::grpc::Status init_enclave(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::oram::InitReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::InitReply>> Asyncinit_enclave(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::InitReply>>(Asyncinit_enclaveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::InitReply>> PrepareAsyncinit_enclave(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::InitReply>>(PrepareAsyncinit_enclaveRaw(context, request, cq));
    }
    virtual ::grpc::Status init_oram(::grpc::ClientContext* context, const ::oram::OramInitRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncinit_oram(::grpc::ClientContext* context, const ::oram::OramInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(Asyncinit_oramRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncinit_oram(::grpc::ClientContext* context, const ::oram::OramInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncinit_oramRaw(context, request, cq));
    }
    virtual ::grpc::Status generate_session_key(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::oram::InitReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::InitReply>> Asyncgenerate_session_key(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::InitReply>>(Asyncgenerate_session_keyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::InitReply>> PrepareAsyncgenerate_session_key(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::InitReply>>(PrepareAsyncgenerate_session_keyRaw(context, request, cq));
    }
    // ===================================================== //
    // Functions for remote attestation and key derivation.
    // @note Deprecated.
    virtual ::grpc::Status remote_attestation_begin(::grpc::ClientContext* context, const ::oram::InitialMessage& request, ::oram::Message0* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::Message0>> Asyncremote_attestation_begin(::grpc::ClientContext* context, const ::oram::InitialMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::Message0>>(Asyncremote_attestation_beginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::Message0>> PrepareAsyncremote_attestation_begin(::grpc::ClientContext* context, const ::oram::InitialMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::Message0>>(PrepareAsyncremote_attestation_beginRaw(context, request, cq));
    }
    virtual ::grpc::Status remote_attestation_msg0(::grpc::ClientContext* context, const ::oram::Message0& request, ::oram::Message1* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::Message1>> Asyncremote_attestation_msg0(::grpc::ClientContext* context, const ::oram::Message0& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::Message1>>(Asyncremote_attestation_msg0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::Message1>> PrepareAsyncremote_attestation_msg0(::grpc::ClientContext* context, const ::oram::Message0& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::Message1>>(PrepareAsyncremote_attestation_msg0Raw(context, request, cq));
    }
    virtual ::grpc::Status remote_attestation_msg2(::grpc::ClientContext* context, const ::oram::Message2& request, ::oram::Message3* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::Message3>> Asyncremote_attestation_msg2(::grpc::ClientContext* context, const ::oram::Message2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::Message3>>(Asyncremote_attestation_msg2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::Message3>> PrepareAsyncremote_attestation_msg2(::grpc::ClientContext* context, const ::oram::Message2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::Message3>>(PrepareAsyncremote_attestation_msg2Raw(context, request, cq));
    }
    virtual ::grpc::Status remote_attestation_final(::grpc::ClientContext* context, const ::oram::AttestationMessage& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncremote_attestation_final(::grpc::ClientContext* context, const ::oram::AttestationMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(Asyncremote_attestation_finalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncremote_attestation_final(::grpc::ClientContext* context, const ::oram::AttestationMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncremote_attestation_finalRaw(context, request, cq));
    }
    virtual ::grpc::Status read_block(::grpc::ClientContext* context, const ::oram::ReadRequest& request, ::oram::ReadReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::ReadReply>> Asyncread_block(::grpc::ClientContext* context, const ::oram::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::ReadReply>>(Asyncread_blockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::ReadReply>> PrepareAsyncread_block(::grpc::ClientContext* context, const ::oram::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::ReadReply>>(PrepareAsyncread_blockRaw(context, request, cq));
    }
    virtual ::grpc::Status write_block(::grpc::ClientContext* context, const ::oram::WriteRequest& request, ::oram::WriteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::WriteReply>> Asyncwrite_block(::grpc::ClientContext* context, const ::oram::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::WriteReply>>(Asyncwrite_blockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::WriteReply>> PrepareAsyncwrite_block(::grpc::ClientContext* context, const ::oram::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::oram::WriteReply>>(PrepareAsyncwrite_blockRaw(context, request, cq));
    }
    virtual ::grpc::Status test_oram_cache(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asynctest_oram_cache(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(Asynctest_oram_cacheRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsynctest_oram_cache(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsynctest_oram_cacheRaw(context, request, cq));
    }
    virtual ::grpc::Status close_connection(::grpc::ClientContext* context, const ::oram::CloseRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncclose_connection(::grpc::ClientContext* context, const ::oram::CloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(Asyncclose_connectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncclose_connection(::grpc::ClientContext* context, const ::oram::CloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncclose_connectionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // ===================================================== //
      // Enclave-related remote process calls.
      virtual void init_enclave(::grpc::ClientContext* context, const ::oram::InitRequest* request, ::oram::InitReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void init_enclave(::grpc::ClientContext* context, const ::oram::InitRequest* request, ::oram::InitReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void init_oram(::grpc::ClientContext* context, const ::oram::OramInitRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void init_oram(::grpc::ClientContext* context, const ::oram::OramInitRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void generate_session_key(::grpc::ClientContext* context, const ::oram::InitRequest* request, ::oram::InitReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void generate_session_key(::grpc::ClientContext* context, const ::oram::InitRequest* request, ::oram::InitReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ===================================================== //
      // Functions for remote attestation and key derivation.
      // @note Deprecated.
      virtual void remote_attestation_begin(::grpc::ClientContext* context, const ::oram::InitialMessage* request, ::oram::Message0* response, std::function<void(::grpc::Status)>) = 0;
      virtual void remote_attestation_begin(::grpc::ClientContext* context, const ::oram::InitialMessage* request, ::oram::Message0* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void remote_attestation_msg0(::grpc::ClientContext* context, const ::oram::Message0* request, ::oram::Message1* response, std::function<void(::grpc::Status)>) = 0;
      virtual void remote_attestation_msg0(::grpc::ClientContext* context, const ::oram::Message0* request, ::oram::Message1* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void remote_attestation_msg2(::grpc::ClientContext* context, const ::oram::Message2* request, ::oram::Message3* response, std::function<void(::grpc::Status)>) = 0;
      virtual void remote_attestation_msg2(::grpc::ClientContext* context, const ::oram::Message2* request, ::oram::Message3* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void remote_attestation_final(::grpc::ClientContext* context, const ::oram::AttestationMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void remote_attestation_final(::grpc::ClientContext* context, const ::oram::AttestationMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void read_block(::grpc::ClientContext* context, const ::oram::ReadRequest* request, ::oram::ReadReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void read_block(::grpc::ClientContext* context, const ::oram::ReadRequest* request, ::oram::ReadReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void write_block(::grpc::ClientContext* context, const ::oram::WriteRequest* request, ::oram::WriteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void write_block(::grpc::ClientContext* context, const ::oram::WriteRequest* request, ::oram::WriteReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void test_oram_cache(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void test_oram_cache(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void close_connection(::grpc::ClientContext* context, const ::oram::CloseRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void close_connection(::grpc::ClientContext* context, const ::oram::CloseRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::oram::InitReply>* Asyncinit_enclaveRaw(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::oram::InitReply>* PrepareAsyncinit_enclaveRaw(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* Asyncinit_oramRaw(::grpc::ClientContext* context, const ::oram::OramInitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncinit_oramRaw(::grpc::ClientContext* context, const ::oram::OramInitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::oram::InitReply>* Asyncgenerate_session_keyRaw(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::oram::InitReply>* PrepareAsyncgenerate_session_keyRaw(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::oram::Message0>* Asyncremote_attestation_beginRaw(::grpc::ClientContext* context, const ::oram::InitialMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::oram::Message0>* PrepareAsyncremote_attestation_beginRaw(::grpc::ClientContext* context, const ::oram::InitialMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::oram::Message1>* Asyncremote_attestation_msg0Raw(::grpc::ClientContext* context, const ::oram::Message0& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::oram::Message1>* PrepareAsyncremote_attestation_msg0Raw(::grpc::ClientContext* context, const ::oram::Message0& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::oram::Message3>* Asyncremote_attestation_msg2Raw(::grpc::ClientContext* context, const ::oram::Message2& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::oram::Message3>* PrepareAsyncremote_attestation_msg2Raw(::grpc::ClientContext* context, const ::oram::Message2& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* Asyncremote_attestation_finalRaw(::grpc::ClientContext* context, const ::oram::AttestationMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncremote_attestation_finalRaw(::grpc::ClientContext* context, const ::oram::AttestationMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::oram::ReadReply>* Asyncread_blockRaw(::grpc::ClientContext* context, const ::oram::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::oram::ReadReply>* PrepareAsyncread_blockRaw(::grpc::ClientContext* context, const ::oram::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::oram::WriteReply>* Asyncwrite_blockRaw(::grpc::ClientContext* context, const ::oram::WriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::oram::WriteReply>* PrepareAsyncwrite_blockRaw(::grpc::ClientContext* context, const ::oram::WriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* Asynctest_oram_cacheRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsynctest_oram_cacheRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* Asyncclose_connectionRaw(::grpc::ClientContext* context, const ::oram::CloseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncclose_connectionRaw(::grpc::ClientContext* context, const ::oram::CloseRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status init_enclave(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::oram::InitReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::InitReply>> Asyncinit_enclave(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::InitReply>>(Asyncinit_enclaveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::InitReply>> PrepareAsyncinit_enclave(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::InitReply>>(PrepareAsyncinit_enclaveRaw(context, request, cq));
    }
    ::grpc::Status init_oram(::grpc::ClientContext* context, const ::oram::OramInitRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncinit_oram(::grpc::ClientContext* context, const ::oram::OramInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(Asyncinit_oramRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncinit_oram(::grpc::ClientContext* context, const ::oram::OramInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncinit_oramRaw(context, request, cq));
    }
    ::grpc::Status generate_session_key(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::oram::InitReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::InitReply>> Asyncgenerate_session_key(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::InitReply>>(Asyncgenerate_session_keyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::InitReply>> PrepareAsyncgenerate_session_key(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::InitReply>>(PrepareAsyncgenerate_session_keyRaw(context, request, cq));
    }
    ::grpc::Status remote_attestation_begin(::grpc::ClientContext* context, const ::oram::InitialMessage& request, ::oram::Message0* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::Message0>> Asyncremote_attestation_begin(::grpc::ClientContext* context, const ::oram::InitialMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::Message0>>(Asyncremote_attestation_beginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::Message0>> PrepareAsyncremote_attestation_begin(::grpc::ClientContext* context, const ::oram::InitialMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::Message0>>(PrepareAsyncremote_attestation_beginRaw(context, request, cq));
    }
    ::grpc::Status remote_attestation_msg0(::grpc::ClientContext* context, const ::oram::Message0& request, ::oram::Message1* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::Message1>> Asyncremote_attestation_msg0(::grpc::ClientContext* context, const ::oram::Message0& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::Message1>>(Asyncremote_attestation_msg0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::Message1>> PrepareAsyncremote_attestation_msg0(::grpc::ClientContext* context, const ::oram::Message0& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::Message1>>(PrepareAsyncremote_attestation_msg0Raw(context, request, cq));
    }
    ::grpc::Status remote_attestation_msg2(::grpc::ClientContext* context, const ::oram::Message2& request, ::oram::Message3* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::Message3>> Asyncremote_attestation_msg2(::grpc::ClientContext* context, const ::oram::Message2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::Message3>>(Asyncremote_attestation_msg2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::Message3>> PrepareAsyncremote_attestation_msg2(::grpc::ClientContext* context, const ::oram::Message2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::Message3>>(PrepareAsyncremote_attestation_msg2Raw(context, request, cq));
    }
    ::grpc::Status remote_attestation_final(::grpc::ClientContext* context, const ::oram::AttestationMessage& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncremote_attestation_final(::grpc::ClientContext* context, const ::oram::AttestationMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(Asyncremote_attestation_finalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncremote_attestation_final(::grpc::ClientContext* context, const ::oram::AttestationMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncremote_attestation_finalRaw(context, request, cq));
    }
    ::grpc::Status read_block(::grpc::ClientContext* context, const ::oram::ReadRequest& request, ::oram::ReadReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::ReadReply>> Asyncread_block(::grpc::ClientContext* context, const ::oram::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::ReadReply>>(Asyncread_blockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::ReadReply>> PrepareAsyncread_block(::grpc::ClientContext* context, const ::oram::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::ReadReply>>(PrepareAsyncread_blockRaw(context, request, cq));
    }
    ::grpc::Status write_block(::grpc::ClientContext* context, const ::oram::WriteRequest& request, ::oram::WriteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::WriteReply>> Asyncwrite_block(::grpc::ClientContext* context, const ::oram::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::WriteReply>>(Asyncwrite_blockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::WriteReply>> PrepareAsyncwrite_block(::grpc::ClientContext* context, const ::oram::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::oram::WriteReply>>(PrepareAsyncwrite_blockRaw(context, request, cq));
    }
    ::grpc::Status test_oram_cache(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asynctest_oram_cache(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(Asynctest_oram_cacheRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsynctest_oram_cache(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsynctest_oram_cacheRaw(context, request, cq));
    }
    ::grpc::Status close_connection(::grpc::ClientContext* context, const ::oram::CloseRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncclose_connection(::grpc::ClientContext* context, const ::oram::CloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(Asyncclose_connectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncclose_connection(::grpc::ClientContext* context, const ::oram::CloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncclose_connectionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void init_enclave(::grpc::ClientContext* context, const ::oram::InitRequest* request, ::oram::InitReply* response, std::function<void(::grpc::Status)>) override;
      void init_enclave(::grpc::ClientContext* context, const ::oram::InitRequest* request, ::oram::InitReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void init_oram(::grpc::ClientContext* context, const ::oram::OramInitRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void init_oram(::grpc::ClientContext* context, const ::oram::OramInitRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void generate_session_key(::grpc::ClientContext* context, const ::oram::InitRequest* request, ::oram::InitReply* response, std::function<void(::grpc::Status)>) override;
      void generate_session_key(::grpc::ClientContext* context, const ::oram::InitRequest* request, ::oram::InitReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void remote_attestation_begin(::grpc::ClientContext* context, const ::oram::InitialMessage* request, ::oram::Message0* response, std::function<void(::grpc::Status)>) override;
      void remote_attestation_begin(::grpc::ClientContext* context, const ::oram::InitialMessage* request, ::oram::Message0* response, ::grpc::ClientUnaryReactor* reactor) override;
      void remote_attestation_msg0(::grpc::ClientContext* context, const ::oram::Message0* request, ::oram::Message1* response, std::function<void(::grpc::Status)>) override;
      void remote_attestation_msg0(::grpc::ClientContext* context, const ::oram::Message0* request, ::oram::Message1* response, ::grpc::ClientUnaryReactor* reactor) override;
      void remote_attestation_msg2(::grpc::ClientContext* context, const ::oram::Message2* request, ::oram::Message3* response, std::function<void(::grpc::Status)>) override;
      void remote_attestation_msg2(::grpc::ClientContext* context, const ::oram::Message2* request, ::oram::Message3* response, ::grpc::ClientUnaryReactor* reactor) override;
      void remote_attestation_final(::grpc::ClientContext* context, const ::oram::AttestationMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void remote_attestation_final(::grpc::ClientContext* context, const ::oram::AttestationMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void read_block(::grpc::ClientContext* context, const ::oram::ReadRequest* request, ::oram::ReadReply* response, std::function<void(::grpc::Status)>) override;
      void read_block(::grpc::ClientContext* context, const ::oram::ReadRequest* request, ::oram::ReadReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void write_block(::grpc::ClientContext* context, const ::oram::WriteRequest* request, ::oram::WriteReply* response, std::function<void(::grpc::Status)>) override;
      void write_block(::grpc::ClientContext* context, const ::oram::WriteRequest* request, ::oram::WriteReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void test_oram_cache(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void test_oram_cache(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void close_connection(::grpc::ClientContext* context, const ::oram::CloseRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void close_connection(::grpc::ClientContext* context, const ::oram::CloseRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::oram::InitReply>* Asyncinit_enclaveRaw(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::oram::InitReply>* PrepareAsyncinit_enclaveRaw(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Asyncinit_oramRaw(::grpc::ClientContext* context, const ::oram::OramInitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncinit_oramRaw(::grpc::ClientContext* context, const ::oram::OramInitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::oram::InitReply>* Asyncgenerate_session_keyRaw(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::oram::InitReply>* PrepareAsyncgenerate_session_keyRaw(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::oram::Message0>* Asyncremote_attestation_beginRaw(::grpc::ClientContext* context, const ::oram::InitialMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::oram::Message0>* PrepareAsyncremote_attestation_beginRaw(::grpc::ClientContext* context, const ::oram::InitialMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::oram::Message1>* Asyncremote_attestation_msg0Raw(::grpc::ClientContext* context, const ::oram::Message0& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::oram::Message1>* PrepareAsyncremote_attestation_msg0Raw(::grpc::ClientContext* context, const ::oram::Message0& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::oram::Message3>* Asyncremote_attestation_msg2Raw(::grpc::ClientContext* context, const ::oram::Message2& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::oram::Message3>* PrepareAsyncremote_attestation_msg2Raw(::grpc::ClientContext* context, const ::oram::Message2& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Asyncremote_attestation_finalRaw(::grpc::ClientContext* context, const ::oram::AttestationMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncremote_attestation_finalRaw(::grpc::ClientContext* context, const ::oram::AttestationMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::oram::ReadReply>* Asyncread_blockRaw(::grpc::ClientContext* context, const ::oram::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::oram::ReadReply>* PrepareAsyncread_blockRaw(::grpc::ClientContext* context, const ::oram::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::oram::WriteReply>* Asyncwrite_blockRaw(::grpc::ClientContext* context, const ::oram::WriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::oram::WriteReply>* PrepareAsyncwrite_blockRaw(::grpc::ClientContext* context, const ::oram::WriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Asynctest_oram_cacheRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsynctest_oram_cacheRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Asyncclose_connectionRaw(::grpc::ClientContext* context, const ::oram::CloseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncclose_connectionRaw(::grpc::ClientContext* context, const ::oram::CloseRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_init_enclave_;
    const ::grpc::internal::RpcMethod rpcmethod_init_oram_;
    const ::grpc::internal::RpcMethod rpcmethod_generate_session_key_;
    const ::grpc::internal::RpcMethod rpcmethod_remote_attestation_begin_;
    const ::grpc::internal::RpcMethod rpcmethod_remote_attestation_msg0_;
    const ::grpc::internal::RpcMethod rpcmethod_remote_attestation_msg2_;
    const ::grpc::internal::RpcMethod rpcmethod_remote_attestation_final_;
    const ::grpc::internal::RpcMethod rpcmethod_read_block_;
    const ::grpc::internal::RpcMethod rpcmethod_write_block_;
    const ::grpc::internal::RpcMethod rpcmethod_test_oram_cache_;
    const ::grpc::internal::RpcMethod rpcmethod_close_connection_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // ===================================================== //
    // Enclave-related remote process calls.
    virtual ::grpc::Status init_enclave(::grpc::ServerContext* context, const ::oram::InitRequest* request, ::oram::InitReply* response);
    virtual ::grpc::Status init_oram(::grpc::ServerContext* context, const ::oram::OramInitRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status generate_session_key(::grpc::ServerContext* context, const ::oram::InitRequest* request, ::oram::InitReply* response);
    // ===================================================== //
    // Functions for remote attestation and key derivation.
    // @note Deprecated.
    virtual ::grpc::Status remote_attestation_begin(::grpc::ServerContext* context, const ::oram::InitialMessage* request, ::oram::Message0* response);
    virtual ::grpc::Status remote_attestation_msg0(::grpc::ServerContext* context, const ::oram::Message0* request, ::oram::Message1* response);
    virtual ::grpc::Status remote_attestation_msg2(::grpc::ServerContext* context, const ::oram::Message2* request, ::oram::Message3* response);
    virtual ::grpc::Status remote_attestation_final(::grpc::ServerContext* context, const ::oram::AttestationMessage* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status read_block(::grpc::ServerContext* context, const ::oram::ReadRequest* request, ::oram::ReadReply* response);
    virtual ::grpc::Status write_block(::grpc::ServerContext* context, const ::oram::WriteRequest* request, ::oram::WriteReply* response);
    virtual ::grpc::Status test_oram_cache(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status close_connection(::grpc::ServerContext* context, const ::oram::CloseRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_init_enclave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_init_enclave() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_init_enclave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_enclave(::grpc::ServerContext* /*context*/, const ::oram::InitRequest* /*request*/, ::oram::InitReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit_enclave(::grpc::ServerContext* context, ::oram::InitRequest* request, ::grpc::ServerAsyncResponseWriter< ::oram::InitReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_init_oram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_init_oram() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_init_oram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_oram(::grpc::ServerContext* /*context*/, const ::oram::OramInitRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit_oram(::grpc::ServerContext* context, ::oram::OramInitRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_generate_session_key : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_generate_session_key() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_generate_session_key() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status generate_session_key(::grpc::ServerContext* /*context*/, const ::oram::InitRequest* /*request*/, ::oram::InitReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestgenerate_session_key(::grpc::ServerContext* context, ::oram::InitRequest* request, ::grpc::ServerAsyncResponseWriter< ::oram::InitReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_remote_attestation_begin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_remote_attestation_begin() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_remote_attestation_begin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remote_attestation_begin(::grpc::ServerContext* /*context*/, const ::oram::InitialMessage* /*request*/, ::oram::Message0* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestremote_attestation_begin(::grpc::ServerContext* context, ::oram::InitialMessage* request, ::grpc::ServerAsyncResponseWriter< ::oram::Message0>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_remote_attestation_msg0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_remote_attestation_msg0() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_remote_attestation_msg0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remote_attestation_msg0(::grpc::ServerContext* /*context*/, const ::oram::Message0* /*request*/, ::oram::Message1* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestremote_attestation_msg0(::grpc::ServerContext* context, ::oram::Message0* request, ::grpc::ServerAsyncResponseWriter< ::oram::Message1>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_remote_attestation_msg2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_remote_attestation_msg2() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_remote_attestation_msg2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remote_attestation_msg2(::grpc::ServerContext* /*context*/, const ::oram::Message2* /*request*/, ::oram::Message3* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestremote_attestation_msg2(::grpc::ServerContext* context, ::oram::Message2* request, ::grpc::ServerAsyncResponseWriter< ::oram::Message3>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_remote_attestation_final : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_remote_attestation_final() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_remote_attestation_final() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remote_attestation_final(::grpc::ServerContext* /*context*/, const ::oram::AttestationMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestremote_attestation_final(::grpc::ServerContext* context, ::oram::AttestationMessage* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_read_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_read_block() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_read_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read_block(::grpc::ServerContext* /*context*/, const ::oram::ReadRequest* /*request*/, ::oram::ReadReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestread_block(::grpc::ServerContext* context, ::oram::ReadRequest* request, ::grpc::ServerAsyncResponseWriter< ::oram::ReadReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_write_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_write_block() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_write_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status write_block(::grpc::ServerContext* /*context*/, const ::oram::WriteRequest* /*request*/, ::oram::WriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestwrite_block(::grpc::ServerContext* context, ::oram::WriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::oram::WriteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_test_oram_cache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_test_oram_cache() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_test_oram_cache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status test_oram_cache(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttest_oram_cache(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_close_connection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_close_connection() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_close_connection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status close_connection(::grpc::ServerContext* /*context*/, const ::oram::CloseRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclose_connection(::grpc::ServerContext* context, ::oram::CloseRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_init_enclave<WithAsyncMethod_init_oram<WithAsyncMethod_generate_session_key<WithAsyncMethod_remote_attestation_begin<WithAsyncMethod_remote_attestation_msg0<WithAsyncMethod_remote_attestation_msg2<WithAsyncMethod_remote_attestation_final<WithAsyncMethod_read_block<WithAsyncMethod_write_block<WithAsyncMethod_test_oram_cache<WithAsyncMethod_close_connection<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_init_enclave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_init_enclave() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::oram::InitRequest, ::oram::InitReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::oram::InitRequest* request, ::oram::InitReply* response) { return this->init_enclave(context, request, response); }));}
    void SetMessageAllocatorFor_init_enclave(
        ::grpc::MessageAllocator< ::oram::InitRequest, ::oram::InitReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::oram::InitRequest, ::oram::InitReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_init_enclave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_enclave(::grpc::ServerContext* /*context*/, const ::oram::InitRequest* /*request*/, ::oram::InitReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init_enclave(
      ::grpc::CallbackServerContext* /*context*/, const ::oram::InitRequest* /*request*/, ::oram::InitReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_init_oram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_init_oram() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::oram::OramInitRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::oram::OramInitRequest* request, ::google::protobuf::Empty* response) { return this->init_oram(context, request, response); }));}
    void SetMessageAllocatorFor_init_oram(
        ::grpc::MessageAllocator< ::oram::OramInitRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::oram::OramInitRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_init_oram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_oram(::grpc::ServerContext* /*context*/, const ::oram::OramInitRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init_oram(
      ::grpc::CallbackServerContext* /*context*/, const ::oram::OramInitRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_generate_session_key : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_generate_session_key() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::oram::InitRequest, ::oram::InitReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::oram::InitRequest* request, ::oram::InitReply* response) { return this->generate_session_key(context, request, response); }));}
    void SetMessageAllocatorFor_generate_session_key(
        ::grpc::MessageAllocator< ::oram::InitRequest, ::oram::InitReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::oram::InitRequest, ::oram::InitReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_generate_session_key() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status generate_session_key(::grpc::ServerContext* /*context*/, const ::oram::InitRequest* /*request*/, ::oram::InitReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* generate_session_key(
      ::grpc::CallbackServerContext* /*context*/, const ::oram::InitRequest* /*request*/, ::oram::InitReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_remote_attestation_begin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_remote_attestation_begin() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::oram::InitialMessage, ::oram::Message0>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::oram::InitialMessage* request, ::oram::Message0* response) { return this->remote_attestation_begin(context, request, response); }));}
    void SetMessageAllocatorFor_remote_attestation_begin(
        ::grpc::MessageAllocator< ::oram::InitialMessage, ::oram::Message0>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::oram::InitialMessage, ::oram::Message0>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_remote_attestation_begin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remote_attestation_begin(::grpc::ServerContext* /*context*/, const ::oram::InitialMessage* /*request*/, ::oram::Message0* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* remote_attestation_begin(
      ::grpc::CallbackServerContext* /*context*/, const ::oram::InitialMessage* /*request*/, ::oram::Message0* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_remote_attestation_msg0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_remote_attestation_msg0() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::oram::Message0, ::oram::Message1>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::oram::Message0* request, ::oram::Message1* response) { return this->remote_attestation_msg0(context, request, response); }));}
    void SetMessageAllocatorFor_remote_attestation_msg0(
        ::grpc::MessageAllocator< ::oram::Message0, ::oram::Message1>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::oram::Message0, ::oram::Message1>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_remote_attestation_msg0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remote_attestation_msg0(::grpc::ServerContext* /*context*/, const ::oram::Message0* /*request*/, ::oram::Message1* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* remote_attestation_msg0(
      ::grpc::CallbackServerContext* /*context*/, const ::oram::Message0* /*request*/, ::oram::Message1* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_remote_attestation_msg2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_remote_attestation_msg2() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::oram::Message2, ::oram::Message3>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::oram::Message2* request, ::oram::Message3* response) { return this->remote_attestation_msg2(context, request, response); }));}
    void SetMessageAllocatorFor_remote_attestation_msg2(
        ::grpc::MessageAllocator< ::oram::Message2, ::oram::Message3>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::oram::Message2, ::oram::Message3>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_remote_attestation_msg2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remote_attestation_msg2(::grpc::ServerContext* /*context*/, const ::oram::Message2* /*request*/, ::oram::Message3* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* remote_attestation_msg2(
      ::grpc::CallbackServerContext* /*context*/, const ::oram::Message2* /*request*/, ::oram::Message3* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_remote_attestation_final : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_remote_attestation_final() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::oram::AttestationMessage, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::oram::AttestationMessage* request, ::google::protobuf::Empty* response) { return this->remote_attestation_final(context, request, response); }));}
    void SetMessageAllocatorFor_remote_attestation_final(
        ::grpc::MessageAllocator< ::oram::AttestationMessage, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::oram::AttestationMessage, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_remote_attestation_final() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remote_attestation_final(::grpc::ServerContext* /*context*/, const ::oram::AttestationMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* remote_attestation_final(
      ::grpc::CallbackServerContext* /*context*/, const ::oram::AttestationMessage* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_read_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_read_block() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::oram::ReadRequest, ::oram::ReadReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::oram::ReadRequest* request, ::oram::ReadReply* response) { return this->read_block(context, request, response); }));}
    void SetMessageAllocatorFor_read_block(
        ::grpc::MessageAllocator< ::oram::ReadRequest, ::oram::ReadReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::oram::ReadRequest, ::oram::ReadReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_read_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read_block(::grpc::ServerContext* /*context*/, const ::oram::ReadRequest* /*request*/, ::oram::ReadReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* read_block(
      ::grpc::CallbackServerContext* /*context*/, const ::oram::ReadRequest* /*request*/, ::oram::ReadReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_write_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_write_block() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::oram::WriteRequest, ::oram::WriteReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::oram::WriteRequest* request, ::oram::WriteReply* response) { return this->write_block(context, request, response); }));}
    void SetMessageAllocatorFor_write_block(
        ::grpc::MessageAllocator< ::oram::WriteRequest, ::oram::WriteReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::oram::WriteRequest, ::oram::WriteReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_write_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status write_block(::grpc::ServerContext* /*context*/, const ::oram::WriteRequest* /*request*/, ::oram::WriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* write_block(
      ::grpc::CallbackServerContext* /*context*/, const ::oram::WriteRequest* /*request*/, ::oram::WriteReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_test_oram_cache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_test_oram_cache() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) { return this->test_oram_cache(context, request, response); }));}
    void SetMessageAllocatorFor_test_oram_cache(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_test_oram_cache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status test_oram_cache(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* test_oram_cache(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_close_connection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_close_connection() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::oram::CloseRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::oram::CloseRequest* request, ::google::protobuf::Empty* response) { return this->close_connection(context, request, response); }));}
    void SetMessageAllocatorFor_close_connection(
        ::grpc::MessageAllocator< ::oram::CloseRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::oram::CloseRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_close_connection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status close_connection(::grpc::ServerContext* /*context*/, const ::oram::CloseRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* close_connection(
      ::grpc::CallbackServerContext* /*context*/, const ::oram::CloseRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_init_enclave<WithCallbackMethod_init_oram<WithCallbackMethod_generate_session_key<WithCallbackMethod_remote_attestation_begin<WithCallbackMethod_remote_attestation_msg0<WithCallbackMethod_remote_attestation_msg2<WithCallbackMethod_remote_attestation_final<WithCallbackMethod_read_block<WithCallbackMethod_write_block<WithCallbackMethod_test_oram_cache<WithCallbackMethod_close_connection<Service > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_init_enclave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_init_enclave() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_init_enclave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_enclave(::grpc::ServerContext* /*context*/, const ::oram::InitRequest* /*request*/, ::oram::InitReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_init_oram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_init_oram() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_init_oram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_oram(::grpc::ServerContext* /*context*/, const ::oram::OramInitRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_generate_session_key : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_generate_session_key() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_generate_session_key() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status generate_session_key(::grpc::ServerContext* /*context*/, const ::oram::InitRequest* /*request*/, ::oram::InitReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_remote_attestation_begin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_remote_attestation_begin() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_remote_attestation_begin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remote_attestation_begin(::grpc::ServerContext* /*context*/, const ::oram::InitialMessage* /*request*/, ::oram::Message0* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_remote_attestation_msg0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_remote_attestation_msg0() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_remote_attestation_msg0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remote_attestation_msg0(::grpc::ServerContext* /*context*/, const ::oram::Message0* /*request*/, ::oram::Message1* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_remote_attestation_msg2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_remote_attestation_msg2() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_remote_attestation_msg2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remote_attestation_msg2(::grpc::ServerContext* /*context*/, const ::oram::Message2* /*request*/, ::oram::Message3* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_remote_attestation_final : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_remote_attestation_final() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_remote_attestation_final() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remote_attestation_final(::grpc::ServerContext* /*context*/, const ::oram::AttestationMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_read_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_read_block() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_read_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read_block(::grpc::ServerContext* /*context*/, const ::oram::ReadRequest* /*request*/, ::oram::ReadReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_write_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_write_block() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_write_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status write_block(::grpc::ServerContext* /*context*/, const ::oram::WriteRequest* /*request*/, ::oram::WriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_test_oram_cache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_test_oram_cache() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_test_oram_cache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status test_oram_cache(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_close_connection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_close_connection() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_close_connection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status close_connection(::grpc::ServerContext* /*context*/, const ::oram::CloseRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_init_enclave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_init_enclave() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_init_enclave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_enclave(::grpc::ServerContext* /*context*/, const ::oram::InitRequest* /*request*/, ::oram::InitReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit_enclave(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_init_oram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_init_oram() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_init_oram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_oram(::grpc::ServerContext* /*context*/, const ::oram::OramInitRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit_oram(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_generate_session_key : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_generate_session_key() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_generate_session_key() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status generate_session_key(::grpc::ServerContext* /*context*/, const ::oram::InitRequest* /*request*/, ::oram::InitReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestgenerate_session_key(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_remote_attestation_begin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_remote_attestation_begin() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_remote_attestation_begin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remote_attestation_begin(::grpc::ServerContext* /*context*/, const ::oram::InitialMessage* /*request*/, ::oram::Message0* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestremote_attestation_begin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_remote_attestation_msg0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_remote_attestation_msg0() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_remote_attestation_msg0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remote_attestation_msg0(::grpc::ServerContext* /*context*/, const ::oram::Message0* /*request*/, ::oram::Message1* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestremote_attestation_msg0(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_remote_attestation_msg2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_remote_attestation_msg2() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_remote_attestation_msg2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remote_attestation_msg2(::grpc::ServerContext* /*context*/, const ::oram::Message2* /*request*/, ::oram::Message3* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestremote_attestation_msg2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_remote_attestation_final : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_remote_attestation_final() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_remote_attestation_final() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remote_attestation_final(::grpc::ServerContext* /*context*/, const ::oram::AttestationMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestremote_attestation_final(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_read_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_read_block() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_read_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read_block(::grpc::ServerContext* /*context*/, const ::oram::ReadRequest* /*request*/, ::oram::ReadReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestread_block(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_write_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_write_block() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_write_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status write_block(::grpc::ServerContext* /*context*/, const ::oram::WriteRequest* /*request*/, ::oram::WriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestwrite_block(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_test_oram_cache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_test_oram_cache() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_test_oram_cache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status test_oram_cache(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttest_oram_cache(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_close_connection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_close_connection() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_close_connection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status close_connection(::grpc::ServerContext* /*context*/, const ::oram::CloseRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclose_connection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_init_enclave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_init_enclave() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->init_enclave(context, request, response); }));
    }
    ~WithRawCallbackMethod_init_enclave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_enclave(::grpc::ServerContext* /*context*/, const ::oram::InitRequest* /*request*/, ::oram::InitReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init_enclave(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_init_oram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_init_oram() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->init_oram(context, request, response); }));
    }
    ~WithRawCallbackMethod_init_oram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_oram(::grpc::ServerContext* /*context*/, const ::oram::OramInitRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init_oram(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_generate_session_key : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_generate_session_key() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->generate_session_key(context, request, response); }));
    }
    ~WithRawCallbackMethod_generate_session_key() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status generate_session_key(::grpc::ServerContext* /*context*/, const ::oram::InitRequest* /*request*/, ::oram::InitReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* generate_session_key(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_remote_attestation_begin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_remote_attestation_begin() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->remote_attestation_begin(context, request, response); }));
    }
    ~WithRawCallbackMethod_remote_attestation_begin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remote_attestation_begin(::grpc::ServerContext* /*context*/, const ::oram::InitialMessage* /*request*/, ::oram::Message0* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* remote_attestation_begin(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_remote_attestation_msg0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_remote_attestation_msg0() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->remote_attestation_msg0(context, request, response); }));
    }
    ~WithRawCallbackMethod_remote_attestation_msg0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remote_attestation_msg0(::grpc::ServerContext* /*context*/, const ::oram::Message0* /*request*/, ::oram::Message1* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* remote_attestation_msg0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_remote_attestation_msg2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_remote_attestation_msg2() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->remote_attestation_msg2(context, request, response); }));
    }
    ~WithRawCallbackMethod_remote_attestation_msg2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remote_attestation_msg2(::grpc::ServerContext* /*context*/, const ::oram::Message2* /*request*/, ::oram::Message3* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* remote_attestation_msg2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_remote_attestation_final : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_remote_attestation_final() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->remote_attestation_final(context, request, response); }));
    }
    ~WithRawCallbackMethod_remote_attestation_final() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remote_attestation_final(::grpc::ServerContext* /*context*/, const ::oram::AttestationMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* remote_attestation_final(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_read_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_read_block() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->read_block(context, request, response); }));
    }
    ~WithRawCallbackMethod_read_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read_block(::grpc::ServerContext* /*context*/, const ::oram::ReadRequest* /*request*/, ::oram::ReadReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* read_block(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_write_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_write_block() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->write_block(context, request, response); }));
    }
    ~WithRawCallbackMethod_write_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status write_block(::grpc::ServerContext* /*context*/, const ::oram::WriteRequest* /*request*/, ::oram::WriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* write_block(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_test_oram_cache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_test_oram_cache() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->test_oram_cache(context, request, response); }));
    }
    ~WithRawCallbackMethod_test_oram_cache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status test_oram_cache(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* test_oram_cache(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_close_connection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_close_connection() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->close_connection(context, request, response); }));
    }
    ~WithRawCallbackMethod_close_connection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status close_connection(::grpc::ServerContext* /*context*/, const ::oram::CloseRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* close_connection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_init_enclave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_init_enclave() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::oram::InitRequest, ::oram::InitReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::oram::InitRequest, ::oram::InitReply>* streamer) {
                       return this->Streamedinit_enclave(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_init_enclave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status init_enclave(::grpc::ServerContext* /*context*/, const ::oram::InitRequest* /*request*/, ::oram::InitReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedinit_enclave(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::oram::InitRequest,::oram::InitReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_init_oram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_init_oram() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::oram::OramInitRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::oram::OramInitRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedinit_oram(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_init_oram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status init_oram(::grpc::ServerContext* /*context*/, const ::oram::OramInitRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedinit_oram(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::oram::OramInitRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_generate_session_key : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_generate_session_key() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::oram::InitRequest, ::oram::InitReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::oram::InitRequest, ::oram::InitReply>* streamer) {
                       return this->Streamedgenerate_session_key(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_generate_session_key() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status generate_session_key(::grpc::ServerContext* /*context*/, const ::oram::InitRequest* /*request*/, ::oram::InitReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedgenerate_session_key(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::oram::InitRequest,::oram::InitReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_remote_attestation_begin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_remote_attestation_begin() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::oram::InitialMessage, ::oram::Message0>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::oram::InitialMessage, ::oram::Message0>* streamer) {
                       return this->Streamedremote_attestation_begin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_remote_attestation_begin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status remote_attestation_begin(::grpc::ServerContext* /*context*/, const ::oram::InitialMessage* /*request*/, ::oram::Message0* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedremote_attestation_begin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::oram::InitialMessage,::oram::Message0>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_remote_attestation_msg0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_remote_attestation_msg0() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::oram::Message0, ::oram::Message1>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::oram::Message0, ::oram::Message1>* streamer) {
                       return this->Streamedremote_attestation_msg0(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_remote_attestation_msg0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status remote_attestation_msg0(::grpc::ServerContext* /*context*/, const ::oram::Message0* /*request*/, ::oram::Message1* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedremote_attestation_msg0(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::oram::Message0,::oram::Message1>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_remote_attestation_msg2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_remote_attestation_msg2() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::oram::Message2, ::oram::Message3>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::oram::Message2, ::oram::Message3>* streamer) {
                       return this->Streamedremote_attestation_msg2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_remote_attestation_msg2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status remote_attestation_msg2(::grpc::ServerContext* /*context*/, const ::oram::Message2* /*request*/, ::oram::Message3* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedremote_attestation_msg2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::oram::Message2,::oram::Message3>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_remote_attestation_final : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_remote_attestation_final() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::oram::AttestationMessage, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::oram::AttestationMessage, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedremote_attestation_final(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_remote_attestation_final() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status remote_attestation_final(::grpc::ServerContext* /*context*/, const ::oram::AttestationMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedremote_attestation_final(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::oram::AttestationMessage,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_read_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_read_block() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::oram::ReadRequest, ::oram::ReadReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::oram::ReadRequest, ::oram::ReadReply>* streamer) {
                       return this->Streamedread_block(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_read_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status read_block(::grpc::ServerContext* /*context*/, const ::oram::ReadRequest* /*request*/, ::oram::ReadReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedread_block(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::oram::ReadRequest,::oram::ReadReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_write_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_write_block() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::oram::WriteRequest, ::oram::WriteReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::oram::WriteRequest, ::oram::WriteReply>* streamer) {
                       return this->Streamedwrite_block(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_write_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status write_block(::grpc::ServerContext* /*context*/, const ::oram::WriteRequest* /*request*/, ::oram::WriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedwrite_block(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::oram::WriteRequest,::oram::WriteReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_test_oram_cache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_test_oram_cache() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedtest_oram_cache(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_test_oram_cache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status test_oram_cache(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedtest_oram_cache(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_close_connection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_close_connection() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::oram::CloseRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::oram::CloseRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedclose_connection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_close_connection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status close_connection(::grpc::ServerContext* /*context*/, const ::oram::CloseRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedclose_connection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::oram::CloseRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_init_enclave<WithStreamedUnaryMethod_init_oram<WithStreamedUnaryMethod_generate_session_key<WithStreamedUnaryMethod_remote_attestation_begin<WithStreamedUnaryMethod_remote_attestation_msg0<WithStreamedUnaryMethod_remote_attestation_msg2<WithStreamedUnaryMethod_remote_attestation_final<WithStreamedUnaryMethod_read_block<WithStreamedUnaryMethod_write_block<WithStreamedUnaryMethod_test_oram_cache<WithStreamedUnaryMethod_close_connection<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_init_enclave<WithStreamedUnaryMethod_init_oram<WithStreamedUnaryMethod_generate_session_key<WithStreamedUnaryMethod_remote_attestation_begin<WithStreamedUnaryMethod_remote_attestation_msg0<WithStreamedUnaryMethod_remote_attestation_msg2<WithStreamedUnaryMethod_remote_attestation_final<WithStreamedUnaryMethod_read_block<WithStreamedUnaryMethod_write_block<WithStreamedUnaryMethod_test_oram_cache<WithStreamedUnaryMethod_close_connection<Service > > > > > > > > > > > StreamedService;
};

}  // namespace oram


#endif  // GRPC_messages_2eproto__INCLUDED
