// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace oram {
class AttestationMessage;
struct AttestationMessageDefaultTypeInternal;
extern AttestationMessageDefaultTypeInternal _AttestationMessage_default_instance_;
class CloseRequest;
struct CloseRequestDefaultTypeInternal;
extern CloseRequestDefaultTypeInternal _CloseRequest_default_instance_;
class InitReply;
struct InitReplyDefaultTypeInternal;
extern InitReplyDefaultTypeInternal _InitReply_default_instance_;
class InitRequest;
struct InitRequestDefaultTypeInternal;
extern InitRequestDefaultTypeInternal _InitRequest_default_instance_;
class InitialMessage;
struct InitialMessageDefaultTypeInternal;
extern InitialMessageDefaultTypeInternal _InitialMessage_default_instance_;
class Message0;
struct Message0DefaultTypeInternal;
extern Message0DefaultTypeInternal _Message0_default_instance_;
class Message1;
struct Message1DefaultTypeInternal;
extern Message1DefaultTypeInternal _Message1_default_instance_;
class Message2;
struct Message2DefaultTypeInternal;
extern Message2DefaultTypeInternal _Message2_default_instance_;
class Message3;
struct Message3DefaultTypeInternal;
extern Message3DefaultTypeInternal _Message3_default_instance_;
class OramInitRequest;
struct OramInitRequestDefaultTypeInternal;
extern OramInitRequestDefaultTypeInternal _OramInitRequest_default_instance_;
class ReadReply;
struct ReadReplyDefaultTypeInternal;
extern ReadReplyDefaultTypeInternal _ReadReply_default_instance_;
class ReadRequest;
struct ReadRequestDefaultTypeInternal;
extern ReadRequestDefaultTypeInternal _ReadRequest_default_instance_;
class WriteReply;
struct WriteReplyDefaultTypeInternal;
extern WriteReplyDefaultTypeInternal _WriteReply_default_instance_;
class WriteRequest;
struct WriteRequestDefaultTypeInternal;
extern WriteRequestDefaultTypeInternal _WriteRequest_default_instance_;
}  // namespace oram
PROTOBUF_NAMESPACE_OPEN
template<> ::oram::AttestationMessage* Arena::CreateMaybeMessage<::oram::AttestationMessage>(Arena*);
template<> ::oram::CloseRequest* Arena::CreateMaybeMessage<::oram::CloseRequest>(Arena*);
template<> ::oram::InitReply* Arena::CreateMaybeMessage<::oram::InitReply>(Arena*);
template<> ::oram::InitRequest* Arena::CreateMaybeMessage<::oram::InitRequest>(Arena*);
template<> ::oram::InitialMessage* Arena::CreateMaybeMessage<::oram::InitialMessage>(Arena*);
template<> ::oram::Message0* Arena::CreateMaybeMessage<::oram::Message0>(Arena*);
template<> ::oram::Message1* Arena::CreateMaybeMessage<::oram::Message1>(Arena*);
template<> ::oram::Message2* Arena::CreateMaybeMessage<::oram::Message2>(Arena*);
template<> ::oram::Message3* Arena::CreateMaybeMessage<::oram::Message3>(Arena*);
template<> ::oram::OramInitRequest* Arena::CreateMaybeMessage<::oram::OramInitRequest>(Arena*);
template<> ::oram::ReadReply* Arena::CreateMaybeMessage<::oram::ReadReply>(Arena*);
template<> ::oram::ReadRequest* Arena::CreateMaybeMessage<::oram::ReadRequest>(Arena*);
template<> ::oram::WriteReply* Arena::CreateMaybeMessage<::oram::WriteReply>(Arena*);
template<> ::oram::WriteRequest* Arena::CreateMaybeMessage<::oram::WriteRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oram {

// ===================================================================

class InitRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oram.InitRequest) */ {
 public:
  inline InitRequest() : InitRequest(nullptr) {}
  ~InitRequest() override;
  explicit constexpr InitRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitRequest(const InitRequest& from);
  InitRequest(InitRequest&& from) noexcept
    : InitRequest() {
    *this = ::std::move(from);
  }

  inline InitRequest& operator=(const InitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitRequest& operator=(InitRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitRequest* internal_default_instance() {
    return reinterpret_cast<const InitRequest*>(
               &_InitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InitRequest& a, InitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InitRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oram.InitRequest";
  }
  protected:
  explicit InitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kRoundFieldNumber = 1,
  };
  // bytes content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 round = 1;
  void clear_round();
  int32_t round() const;
  void set_round(int32_t value);
  private:
  int32_t _internal_round() const;
  void _internal_set_round(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:oram.InitRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  int32_t round_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class InitReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oram.InitReply) */ {
 public:
  inline InitReply() : InitReply(nullptr) {}
  ~InitReply() override;
  explicit constexpr InitReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitReply(const InitReply& from);
  InitReply(InitReply&& from) noexcept
    : InitReply() {
    *this = ::std::move(from);
  }

  inline InitReply& operator=(const InitReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitReply& operator=(InitReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitReply* internal_default_instance() {
    return reinterpret_cast<const InitReply*>(
               &_InitReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InitReply& a, InitReply& b) {
    a.Swap(&b);
  }
  inline void Swap(InitReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oram.InitReply";
  }
  protected:
  explicit InitReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // bytes content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:oram.InitReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class OramInitRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oram.OramInitRequest) */ {
 public:
  inline OramInitRequest() : OramInitRequest(nullptr) {}
  ~OramInitRequest() override;
  explicit constexpr OramInitRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OramInitRequest(const OramInitRequest& from);
  OramInitRequest(OramInitRequest&& from) noexcept
    : OramInitRequest() {
    *this = ::std::move(from);
  }

  inline OramInitRequest& operator=(const OramInitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OramInitRequest& operator=(OramInitRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OramInitRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OramInitRequest* internal_default_instance() {
    return reinterpret_cast<const OramInitRequest*>(
               &_OramInitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OramInitRequest& a, OramInitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OramInitRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OramInitRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OramInitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OramInitRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OramInitRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OramInitRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OramInitRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oram.OramInitRequest";
  }
  protected:
  explicit OramInitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermutationFieldNumber = 9,
    kVerificationFieldNumber = 8,
    kWayFieldNumber = 1,
    kNumberFieldNumber = 2,
    kBucketSizeFieldNumber = 3,
    kTypeFieldNumber = 4,
    kConstantFieldNumber = 5,
    kRoundFieldNumber = 6,
    kOramTypeFieldNumber = 7,
  };
  // repeated uint32 permutation = 9;
  int permutation_size() const;
  private:
  int _internal_permutation_size() const;
  public:
  void clear_permutation();
  private:
  uint32_t _internal_permutation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_permutation() const;
  void _internal_add_permutation(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_permutation();
  public:
  uint32_t permutation(int index) const;
  void set_permutation(int index, uint32_t value);
  void add_permutation(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      permutation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_permutation();

  // optional bytes verification = 8;
  bool has_verification() const;
  private:
  bool _internal_has_verification() const;
  public:
  void clear_verification();
  const std::string& verification() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verification(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verification();
  PROTOBUF_NODISCARD std::string* release_verification();
  void set_allocated_verification(std::string* verification);
  private:
  const std::string& _internal_verification() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verification(const std::string& value);
  std::string* _internal_mutable_verification();
  public:

  // uint32 way = 1;
  void clear_way();
  uint32_t way() const;
  void set_way(uint32_t value);
  private:
  uint32_t _internal_way() const;
  void _internal_set_way(uint32_t value);
  public:

  // uint32 number = 2;
  void clear_number();
  uint32_t number() const;
  void set_number(uint32_t value);
  private:
  uint32_t _internal_number() const;
  void _internal_set_number(uint32_t value);
  public:

  // uint32 bucket_size = 3;
  void clear_bucket_size();
  uint32_t bucket_size() const;
  void set_bucket_size(uint32_t value);
  private:
  uint32_t _internal_bucket_size() const;
  void _internal_set_bucket_size(uint32_t value);
  public:

  // uint32 type = 4;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 constant = 5;
  void clear_constant();
  uint32_t constant() const;
  void set_constant(uint32_t value);
  private:
  uint32_t _internal_constant() const;
  void _internal_set_constant(uint32_t value);
  public:

  // uint32 round = 6;
  void clear_round();
  uint32_t round() const;
  void set_round(uint32_t value);
  private:
  uint32_t _internal_round() const;
  void _internal_set_round(uint32_t value);
  public:

  // optional uint32 oram_type = 7;
  bool has_oram_type() const;
  private:
  bool _internal_has_oram_type() const;
  public:
  void clear_oram_type();
  uint32_t oram_type() const;
  void set_oram_type(uint32_t value);
  private:
  uint32_t _internal_oram_type() const;
  void _internal_set_oram_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:oram.OramInitRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > permutation_;
  mutable std::atomic<int> _permutation_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verification_;
  uint32_t way_;
  uint32_t number_;
  uint32_t bucket_size_;
  uint32_t type_;
  uint32_t constant_;
  uint32_t round_;
  uint32_t oram_type_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ReadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oram.ReadRequest) */ {
 public:
  inline ReadRequest() : ReadRequest(nullptr) {}
  ~ReadRequest() override;
  explicit constexpr ReadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRequest(const ReadRequest& from);
  ReadRequest(ReadRequest&& from) noexcept
    : ReadRequest() {
    *this = ::std::move(from);
  }

  inline ReadRequest& operator=(const ReadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRequest& operator=(ReadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRequest* internal_default_instance() {
    return reinterpret_cast<const ReadRequest*>(
               &_ReadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReadRequest& a, ReadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oram.ReadRequest";
  }
  protected:
  explicit ReadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // uint32 address = 1;
  void clear_address();
  uint32_t address() const;
  void set_address(uint32_t value);
  private:
  uint32_t _internal_address() const;
  void _internal_set_address(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:oram.ReadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ReadReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oram.ReadReply) */ {
 public:
  inline ReadReply() : ReadReply(nullptr) {}
  ~ReadReply() override;
  explicit constexpr ReadReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadReply(const ReadReply& from);
  ReadReply(ReadReply&& from) noexcept
    : ReadReply() {
    *this = ::std::move(from);
  }

  inline ReadReply& operator=(const ReadReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadReply& operator=(ReadReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadReply* internal_default_instance() {
    return reinterpret_cast<const ReadReply*>(
               &_ReadReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReadReply& a, ReadReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oram.ReadReply";
  }
  protected:
  explicit ReadReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // bytes block = 1;
  void clear_block();
  const std::string& block() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block();
  PROTOBUF_NODISCARD std::string* release_block();
  void set_allocated_block(std::string* block);
  private:
  const std::string& _internal_block() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block(const std::string& value);
  std::string* _internal_mutable_block();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:oram.ReadReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class WriteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oram.WriteRequest) */ {
 public:
  inline WriteRequest() : WriteRequest(nullptr) {}
  ~WriteRequest() override;
  explicit constexpr WriteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteRequest(const WriteRequest& from);
  WriteRequest(WriteRequest&& from) noexcept
    : WriteRequest() {
    *this = ::std::move(from);
  }

  inline WriteRequest& operator=(const WriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteRequest& operator=(WriteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteRequest* internal_default_instance() {
    return reinterpret_cast<const WriteRequest*>(
               &_WriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WriteRequest& a, WriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oram.WriteRequest";
  }
  protected:
  explicit WriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 address = 1;
  void clear_address();
  uint32_t address() const;
  void set_address(uint32_t value);
  private:
  uint32_t _internal_address() const;
  void _internal_set_address(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:oram.WriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint32_t address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class WriteReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oram.WriteReply) */ {
 public:
  inline WriteReply() : WriteReply(nullptr) {}
  ~WriteReply() override;
  explicit constexpr WriteReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteReply(const WriteReply& from);
  WriteReply(WriteReply&& from) noexcept
    : WriteReply() {
    *this = ::std::move(from);
  }

  inline WriteReply& operator=(const WriteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteReply& operator=(WriteReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteReply* internal_default_instance() {
    return reinterpret_cast<const WriteReply*>(
               &_WriteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WriteReply& a, WriteReply& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriteReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oram.WriteReply";
  }
  protected:
  explicit WriteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:oram.WriteReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class CloseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:oram.CloseRequest) */ {
 public:
  inline CloseRequest() : CloseRequest(nullptr) {}
  explicit constexpr CloseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseRequest(const CloseRequest& from);
  CloseRequest(CloseRequest&& from) noexcept
    : CloseRequest() {
    *this = ::std::move(from);
  }

  inline CloseRequest& operator=(const CloseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseRequest& operator=(CloseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseRequest* internal_default_instance() {
    return reinterpret_cast<const CloseRequest*>(
               &_CloseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CloseRequest& a, CloseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CloseRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CloseRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oram.CloseRequest";
  }
  protected:
  explicit CloseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:oram.CloseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class InitialMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oram.InitialMessage) */ {
 public:
  inline InitialMessage() : InitialMessage(nullptr) {}
  ~InitialMessage() override;
  explicit constexpr InitialMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitialMessage(const InitialMessage& from);
  InitialMessage(InitialMessage&& from) noexcept
    : InitialMessage() {
    *this = ::std::move(from);
  }

  inline InitialMessage& operator=(const InitialMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitialMessage& operator=(InitialMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitialMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitialMessage* internal_default_instance() {
    return reinterpret_cast<const InitialMessage*>(
               &_InitialMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InitialMessage& a, InitialMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InitialMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitialMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitialMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitialMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitialMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitialMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitialMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oram.InitialMessage";
  }
  protected:
  explicit InitialMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // optional uint32 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:oram.InitialMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t type_;
  uint32_t size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Message0 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oram.Message0) */ {
 public:
  inline Message0() : Message0(nullptr) {}
  ~Message0() override;
  explicit constexpr Message0(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message0(const Message0& from);
  Message0(Message0&& from) noexcept
    : Message0() {
    *this = ::std::move(from);
  }

  inline Message0& operator=(const Message0& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message0& operator=(Message0&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message0& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message0* internal_default_instance() {
    return reinterpret_cast<const Message0*>(
               &_Message0_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Message0& a, Message0& b) {
    a.Swap(&b);
  }
  inline void Swap(Message0* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message0* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message0* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message0>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message0& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message0& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message0* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oram.Message0";
  }
  protected:
  explicit Message0(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kEpidFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 epid = 2;
  void clear_epid();
  uint32_t epid() const;
  void set_epid(uint32_t value);
  private:
  uint32_t _internal_epid() const;
  void _internal_set_epid(uint32_t value);
  public:

  // optional uint32 status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:oram.Message0)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t type_;
  uint32_t epid_;
  uint32_t status_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Message1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oram.Message1) */ {
 public:
  inline Message1() : Message1(nullptr) {}
  ~Message1() override;
  explicit constexpr Message1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message1(const Message1& from);
  Message1(Message1&& from) noexcept
    : Message1() {
    *this = ::std::move(from);
  }

  inline Message1& operator=(const Message1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1& operator=(Message1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1* internal_default_instance() {
    return reinterpret_cast<const Message1*>(
               &_Message1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Message1& a, Message1& b) {
    a.Swap(&b);
  }
  inline void Swap(Message1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message1& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oram.Message1";
  }
  protected:
  explicit Message1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGaXFieldNumber = 2,
    kGaYFieldNumber = 3,
    kGIDFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // repeated uint32 GaX = 2 [packed = true];
  int gax_size() const;
  private:
  int _internal_gax_size() const;
  public:
  void clear_gax();
  private:
  uint32_t _internal_gax(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_gax() const;
  void _internal_add_gax(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_gax();
  public:
  uint32_t gax(int index) const;
  void set_gax(int index, uint32_t value);
  void add_gax(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      gax() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_gax();

  // repeated uint32 GaY = 3 [packed = true];
  int gay_size() const;
  private:
  int _internal_gay_size() const;
  public:
  void clear_gay();
  private:
  uint32_t _internal_gay(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_gay() const;
  void _internal_add_gay(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_gay();
  public:
  uint32_t gay(int index) const;
  void set_gay(int index, uint32_t value);
  void add_gay(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      gay() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_gay();

  // repeated uint32 GID = 4 [packed = true];
  int gid_size() const;
  private:
  int _internal_gid_size() const;
  public:
  void clear_gid();
  private:
  uint32_t _internal_gid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_gid() const;
  void _internal_add_gid(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_gid();
  public:
  uint32_t gid(int index) const;
  void set_gid(int index, uint32_t value);
  void add_gid(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      gid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_gid();

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:oram.Message1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > gax_;
  mutable std::atomic<int> _gax_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > gay_;
  mutable std::atomic<int> _gay_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > gid_;
  mutable std::atomic<int> _gid_cached_byte_size_;
  uint32_t type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Message2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oram.Message2) */ {
 public:
  inline Message2() : Message2(nullptr) {}
  ~Message2() override;
  explicit constexpr Message2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message2(const Message2& from);
  Message2(Message2&& from) noexcept
    : Message2() {
    *this = ::std::move(from);
  }

  inline Message2& operator=(const Message2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message2& operator=(Message2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message2* internal_default_instance() {
    return reinterpret_cast<const Message2*>(
               &_Message2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Message2& a, Message2& b) {
    a.Swap(&b);
  }
  inline void Swap(Message2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oram.Message2";
  }
  protected:
  explicit Message2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyGxFieldNumber = 3,
    kPublicKeyGyFieldNumber = 4,
    kSpidFieldNumber = 6,
    kSignatureXFieldNumber = 8,
    kSignatureYFieldNumber = 9,
    kSmacFieldNumber = 10,
    kSigrlFieldNumber = 12,
    kTypeFieldNumber = 1,
    kSizeFieldNumber = 2,
    kQuoteTypeFieldNumber = 5,
    kCmacKdfIdFieldNumber = 7,
    kSizeSigrlFieldNumber = 11,
  };
  // repeated uint32 public_key_gx = 3 [packed = true];
  int public_key_gx_size() const;
  private:
  int _internal_public_key_gx_size() const;
  public:
  void clear_public_key_gx();
  private:
  uint32_t _internal_public_key_gx(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_public_key_gx() const;
  void _internal_add_public_key_gx(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_public_key_gx();
  public:
  uint32_t public_key_gx(int index) const;
  void set_public_key_gx(int index, uint32_t value);
  void add_public_key_gx(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      public_key_gx() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_public_key_gx();

  // repeated uint32 public_key_gy = 4 [packed = true];
  int public_key_gy_size() const;
  private:
  int _internal_public_key_gy_size() const;
  public:
  void clear_public_key_gy();
  private:
  uint32_t _internal_public_key_gy(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_public_key_gy() const;
  void _internal_add_public_key_gy(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_public_key_gy();
  public:
  uint32_t public_key_gy(int index) const;
  void set_public_key_gy(int index, uint32_t value);
  void add_public_key_gy(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      public_key_gy() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_public_key_gy();

  // repeated uint32 spid = 6 [packed = true];
  int spid_size() const;
  private:
  int _internal_spid_size() const;
  public:
  void clear_spid();
  private:
  uint32_t _internal_spid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_spid() const;
  void _internal_add_spid(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_spid();
  public:
  uint32_t spid(int index) const;
  void set_spid(int index, uint32_t value);
  void add_spid(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      spid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_spid();

  // repeated uint32 signature_x = 8 [packed = true];
  int signature_x_size() const;
  private:
  int _internal_signature_x_size() const;
  public:
  void clear_signature_x();
  private:
  uint32_t _internal_signature_x(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_signature_x() const;
  void _internal_add_signature_x(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_signature_x();
  public:
  uint32_t signature_x(int index) const;
  void set_signature_x(int index, uint32_t value);
  void add_signature_x(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      signature_x() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_signature_x();

  // repeated uint32 signature_y = 9 [packed = true];
  int signature_y_size() const;
  private:
  int _internal_signature_y_size() const;
  public:
  void clear_signature_y();
  private:
  uint32_t _internal_signature_y(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_signature_y() const;
  void _internal_add_signature_y(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_signature_y();
  public:
  uint32_t signature_y(int index) const;
  void set_signature_y(int index, uint32_t value);
  void add_signature_y(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      signature_y() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_signature_y();

  // repeated uint32 smac = 10 [packed = true];
  int smac_size() const;
  private:
  int _internal_smac_size() const;
  public:
  void clear_smac();
  private:
  uint32_t _internal_smac(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_smac() const;
  void _internal_add_smac(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_smac();
  public:
  uint32_t smac(int index) const;
  void set_smac(int index, uint32_t value);
  void add_smac(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      smac() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_smac();

  // repeated uint32 sigrl = 12 [packed = true];
  int sigrl_size() const;
  private:
  int _internal_sigrl_size() const;
  public:
  void clear_sigrl();
  private:
  uint32_t _internal_sigrl(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_sigrl() const;
  void _internal_add_sigrl(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_sigrl();
  public:
  uint32_t sigrl(int index) const;
  void set_sigrl(int index, uint32_t value);
  void add_sigrl(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      sigrl() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_sigrl();

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // optional uint32 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // optional uint32 quote_type = 5;
  bool has_quote_type() const;
  private:
  bool _internal_has_quote_type() const;
  public:
  void clear_quote_type();
  uint32_t quote_type() const;
  void set_quote_type(uint32_t value);
  private:
  uint32_t _internal_quote_type() const;
  void _internal_set_quote_type(uint32_t value);
  public:

  // optional uint32 cmac_kdf_id = 7;
  bool has_cmac_kdf_id() const;
  private:
  bool _internal_has_cmac_kdf_id() const;
  public:
  void clear_cmac_kdf_id();
  uint32_t cmac_kdf_id() const;
  void set_cmac_kdf_id(uint32_t value);
  private:
  uint32_t _internal_cmac_kdf_id() const;
  void _internal_set_cmac_kdf_id(uint32_t value);
  public:

  // optional uint32 size_sigrl = 11;
  bool has_size_sigrl() const;
  private:
  bool _internal_has_size_sigrl() const;
  public:
  void clear_size_sigrl();
  uint32_t size_sigrl() const;
  void set_size_sigrl(uint32_t value);
  private:
  uint32_t _internal_size_sigrl() const;
  void _internal_set_size_sigrl(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:oram.Message2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > public_key_gx_;
  mutable std::atomic<int> _public_key_gx_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > public_key_gy_;
  mutable std::atomic<int> _public_key_gy_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > spid_;
  mutable std::atomic<int> _spid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > signature_x_;
  mutable std::atomic<int> _signature_x_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > signature_y_;
  mutable std::atomic<int> _signature_y_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > smac_;
  mutable std::atomic<int> _smac_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > sigrl_;
  mutable std::atomic<int> _sigrl_cached_byte_size_;
  uint32_t type_;
  uint32_t size_;
  uint32_t quote_type_;
  uint32_t cmac_kdf_id_;
  uint32_t size_sigrl_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Message3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oram.Message3) */ {
 public:
  inline Message3() : Message3(nullptr) {}
  ~Message3() override;
  explicit constexpr Message3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message3(const Message3& from);
  Message3(Message3&& from) noexcept
    : Message3() {
    *this = ::std::move(from);
  }

  inline Message3& operator=(const Message3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message3& operator=(Message3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message3* internal_default_instance() {
    return reinterpret_cast<const Message3*>(
               &_Message3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Message3& a, Message3& b) {
    a.Swap(&b);
  }
  inline void Swap(Message3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oram.Message3";
  }
  protected:
  explicit Message3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSgxMacFieldNumber = 3,
    kGaxMsg3FieldNumber = 4,
    kGayMsg3FieldNumber = 5,
    kSecPropertyFieldNumber = 6,
    kQuoteFieldNumber = 7,
    kTypeFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // repeated uint32 sgx_mac = 3 [packed = true];
  int sgx_mac_size() const;
  private:
  int _internal_sgx_mac_size() const;
  public:
  void clear_sgx_mac();
  private:
  uint32_t _internal_sgx_mac(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_sgx_mac() const;
  void _internal_add_sgx_mac(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_sgx_mac();
  public:
  uint32_t sgx_mac(int index) const;
  void set_sgx_mac(int index, uint32_t value);
  void add_sgx_mac(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      sgx_mac() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_sgx_mac();

  // repeated uint32 gax_msg3 = 4 [packed = true];
  int gax_msg3_size() const;
  private:
  int _internal_gax_msg3_size() const;
  public:
  void clear_gax_msg3();
  private:
  uint32_t _internal_gax_msg3(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_gax_msg3() const;
  void _internal_add_gax_msg3(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_gax_msg3();
  public:
  uint32_t gax_msg3(int index) const;
  void set_gax_msg3(int index, uint32_t value);
  void add_gax_msg3(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      gax_msg3() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_gax_msg3();

  // repeated uint32 gay_msg3 = 5 [packed = true];
  int gay_msg3_size() const;
  private:
  int _internal_gay_msg3_size() const;
  public:
  void clear_gay_msg3();
  private:
  uint32_t _internal_gay_msg3(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_gay_msg3() const;
  void _internal_add_gay_msg3(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_gay_msg3();
  public:
  uint32_t gay_msg3(int index) const;
  void set_gay_msg3(int index, uint32_t value);
  void add_gay_msg3(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      gay_msg3() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_gay_msg3();

  // repeated uint32 sec_property = 6 [packed = true];
  int sec_property_size() const;
  private:
  int _internal_sec_property_size() const;
  public:
  void clear_sec_property();
  private:
  uint32_t _internal_sec_property(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_sec_property() const;
  void _internal_add_sec_property(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_sec_property();
  public:
  uint32_t sec_property(int index) const;
  void set_sec_property(int index, uint32_t value);
  void add_sec_property(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      sec_property() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_sec_property();

  // repeated uint32 quote = 7 [packed = true];
  int quote_size() const;
  private:
  int _internal_quote_size() const;
  public:
  void clear_quote();
  private:
  uint32_t _internal_quote(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_quote() const;
  void _internal_add_quote(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_quote();
  public:
  uint32_t quote(int index) const;
  void set_quote(int index, uint32_t value);
  void add_quote(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      quote() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_quote();

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // optional uint32 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:oram.Message3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > sgx_mac_;
  mutable std::atomic<int> _sgx_mac_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > gax_msg3_;
  mutable std::atomic<int> _gax_msg3_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > gay_msg3_;
  mutable std::atomic<int> _gay_msg3_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > sec_property_;
  mutable std::atomic<int> _sec_property_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > quote_;
  mutable std::atomic<int> _quote_cached_byte_size_;
  uint32_t type_;
  uint32_t size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class AttestationMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oram.AttestationMessage) */ {
 public:
  inline AttestationMessage() : AttestationMessage(nullptr) {}
  ~AttestationMessage() override;
  explicit constexpr AttestationMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttestationMessage(const AttestationMessage& from);
  AttestationMessage(AttestationMessage&& from) noexcept
    : AttestationMessage() {
    *this = ::std::move(from);
  }

  inline AttestationMessage& operator=(const AttestationMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttestationMessage& operator=(AttestationMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttestationMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttestationMessage* internal_default_instance() {
    return reinterpret_cast<const AttestationMessage*>(
               &_AttestationMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AttestationMessage& a, AttestationMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AttestationMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttestationMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttestationMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttestationMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttestationMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AttestationMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttestationMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oram.AttestationMessage";
  }
  protected:
  explicit AttestationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatestEquivalentTcbPsvnFieldNumber = 6,
    kLatestPseIsvsvnFieldNumber = 7,
    kLatestPsdaSvnFieldNumber = 8,
    kPerformanceRekeyGidFieldNumber = 9,
    kEcSign256XFieldNumber = 10,
    kEcSign256YFieldNumber = 11,
    kMacSmkFieldNumber = 12,
    kReservedFieldNumber = 14,
    kPayloadTagFieldNumber = 15,
    kPayloadFieldNumber = 16,
    kTypeFieldNumber = 1,
    kSizeFieldNumber = 2,
    kEpidGroupStatusFieldNumber = 3,
    kTcbEvaluationStatusFieldNumber = 4,
    kPseEvaluationStatusFieldNumber = 5,
    kResultSizeFieldNumber = 13,
  };
  // repeated uint32 latest_equivalent_tcb_psvn = 6 [packed = true];
  int latest_equivalent_tcb_psvn_size() const;
  private:
  int _internal_latest_equivalent_tcb_psvn_size() const;
  public:
  void clear_latest_equivalent_tcb_psvn();
  private:
  uint32_t _internal_latest_equivalent_tcb_psvn(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_latest_equivalent_tcb_psvn() const;
  void _internal_add_latest_equivalent_tcb_psvn(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_latest_equivalent_tcb_psvn();
  public:
  uint32_t latest_equivalent_tcb_psvn(int index) const;
  void set_latest_equivalent_tcb_psvn(int index, uint32_t value);
  void add_latest_equivalent_tcb_psvn(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      latest_equivalent_tcb_psvn() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_latest_equivalent_tcb_psvn();

  // repeated uint32 latest_pse_isvsvn = 7 [packed = true];
  int latest_pse_isvsvn_size() const;
  private:
  int _internal_latest_pse_isvsvn_size() const;
  public:
  void clear_latest_pse_isvsvn();
  private:
  uint32_t _internal_latest_pse_isvsvn(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_latest_pse_isvsvn() const;
  void _internal_add_latest_pse_isvsvn(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_latest_pse_isvsvn();
  public:
  uint32_t latest_pse_isvsvn(int index) const;
  void set_latest_pse_isvsvn(int index, uint32_t value);
  void add_latest_pse_isvsvn(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      latest_pse_isvsvn() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_latest_pse_isvsvn();

  // repeated uint32 latest_psda_svn = 8 [packed = true];
  int latest_psda_svn_size() const;
  private:
  int _internal_latest_psda_svn_size() const;
  public:
  void clear_latest_psda_svn();
  private:
  uint32_t _internal_latest_psda_svn(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_latest_psda_svn() const;
  void _internal_add_latest_psda_svn(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_latest_psda_svn();
  public:
  uint32_t latest_psda_svn(int index) const;
  void set_latest_psda_svn(int index, uint32_t value);
  void add_latest_psda_svn(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      latest_psda_svn() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_latest_psda_svn();

  // repeated uint32 performance_rekey_gid = 9 [packed = true];
  int performance_rekey_gid_size() const;
  private:
  int _internal_performance_rekey_gid_size() const;
  public:
  void clear_performance_rekey_gid();
  private:
  uint32_t _internal_performance_rekey_gid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_performance_rekey_gid() const;
  void _internal_add_performance_rekey_gid(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_performance_rekey_gid();
  public:
  uint32_t performance_rekey_gid(int index) const;
  void set_performance_rekey_gid(int index, uint32_t value);
  void add_performance_rekey_gid(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      performance_rekey_gid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_performance_rekey_gid();

  // repeated uint32 ec_sign256_x = 10 [packed = true];
  int ec_sign256_x_size() const;
  private:
  int _internal_ec_sign256_x_size() const;
  public:
  void clear_ec_sign256_x();
  private:
  uint32_t _internal_ec_sign256_x(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_ec_sign256_x() const;
  void _internal_add_ec_sign256_x(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_ec_sign256_x();
  public:
  uint32_t ec_sign256_x(int index) const;
  void set_ec_sign256_x(int index, uint32_t value);
  void add_ec_sign256_x(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      ec_sign256_x() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_ec_sign256_x();

  // repeated uint32 ec_sign256_y = 11 [packed = true];
  int ec_sign256_y_size() const;
  private:
  int _internal_ec_sign256_y_size() const;
  public:
  void clear_ec_sign256_y();
  private:
  uint32_t _internal_ec_sign256_y(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_ec_sign256_y() const;
  void _internal_add_ec_sign256_y(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_ec_sign256_y();
  public:
  uint32_t ec_sign256_y(int index) const;
  void set_ec_sign256_y(int index, uint32_t value);
  void add_ec_sign256_y(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      ec_sign256_y() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_ec_sign256_y();

  // repeated uint32 mac_smk = 12 [packed = true];
  int mac_smk_size() const;
  private:
  int _internal_mac_smk_size() const;
  public:
  void clear_mac_smk();
  private:
  uint32_t _internal_mac_smk(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_mac_smk() const;
  void _internal_add_mac_smk(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_mac_smk();
  public:
  uint32_t mac_smk(int index) const;
  void set_mac_smk(int index, uint32_t value);
  void add_mac_smk(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      mac_smk() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_mac_smk();

  // repeated uint32 reserved = 14 [packed = true];
  int reserved_size() const;
  private:
  int _internal_reserved_size() const;
  public:
  void clear_reserved();
  private:
  uint32_t _internal_reserved(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_reserved() const;
  void _internal_add_reserved(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_reserved();
  public:
  uint32_t reserved(int index) const;
  void set_reserved(int index, uint32_t value);
  void add_reserved(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      reserved() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_reserved();

  // repeated uint32 payload_tag = 15 [packed = true];
  int payload_tag_size() const;
  private:
  int _internal_payload_tag_size() const;
  public:
  void clear_payload_tag();
  private:
  uint32_t _internal_payload_tag(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_payload_tag() const;
  void _internal_add_payload_tag(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_payload_tag();
  public:
  uint32_t payload_tag(int index) const;
  void set_payload_tag(int index, uint32_t value);
  void add_payload_tag(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      payload_tag() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_payload_tag();

  // repeated uint32 payload = 16 [packed = true];
  int payload_size() const;
  private:
  int _internal_payload_size() const;
  public:
  void clear_payload();
  private:
  uint32_t _internal_payload(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_payload() const;
  void _internal_add_payload(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_payload();
  public:
  uint32_t payload(int index) const;
  void set_payload(int index, uint32_t value);
  void add_payload(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      payload() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_payload();

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 size = 2;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // optional uint32 epid_group_status = 3;
  bool has_epid_group_status() const;
  private:
  bool _internal_has_epid_group_status() const;
  public:
  void clear_epid_group_status();
  uint32_t epid_group_status() const;
  void set_epid_group_status(uint32_t value);
  private:
  uint32_t _internal_epid_group_status() const;
  void _internal_set_epid_group_status(uint32_t value);
  public:

  // optional uint32 tcb_evaluation_status = 4;
  bool has_tcb_evaluation_status() const;
  private:
  bool _internal_has_tcb_evaluation_status() const;
  public:
  void clear_tcb_evaluation_status();
  uint32_t tcb_evaluation_status() const;
  void set_tcb_evaluation_status(uint32_t value);
  private:
  uint32_t _internal_tcb_evaluation_status() const;
  void _internal_set_tcb_evaluation_status(uint32_t value);
  public:

  // optional uint32 pse_evaluation_status = 5;
  bool has_pse_evaluation_status() const;
  private:
  bool _internal_has_pse_evaluation_status() const;
  public:
  void clear_pse_evaluation_status();
  uint32_t pse_evaluation_status() const;
  void set_pse_evaluation_status(uint32_t value);
  private:
  uint32_t _internal_pse_evaluation_status() const;
  void _internal_set_pse_evaluation_status(uint32_t value);
  public:

  // optional uint32 result_size = 13;
  bool has_result_size() const;
  private:
  bool _internal_has_result_size() const;
  public:
  void clear_result_size();
  uint32_t result_size() const;
  void set_result_size(uint32_t value);
  private:
  uint32_t _internal_result_size() const;
  void _internal_set_result_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:oram.AttestationMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > latest_equivalent_tcb_psvn_;
  mutable std::atomic<int> _latest_equivalent_tcb_psvn_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > latest_pse_isvsvn_;
  mutable std::atomic<int> _latest_pse_isvsvn_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > latest_psda_svn_;
  mutable std::atomic<int> _latest_psda_svn_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > performance_rekey_gid_;
  mutable std::atomic<int> _performance_rekey_gid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > ec_sign256_x_;
  mutable std::atomic<int> _ec_sign256_x_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > ec_sign256_y_;
  mutable std::atomic<int> _ec_sign256_y_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > mac_smk_;
  mutable std::atomic<int> _mac_smk_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > reserved_;
  mutable std::atomic<int> _reserved_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > payload_tag_;
  mutable std::atomic<int> _payload_tag_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > payload_;
  mutable std::atomic<int> _payload_cached_byte_size_;
  uint32_t type_;
  uint32_t size_;
  uint32_t epid_group_status_;
  uint32_t tcb_evaluation_status_;
  uint32_t pse_evaluation_status_;
  uint32_t result_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InitRequest

// int32 round = 1;
inline void InitRequest::clear_round() {
  round_ = 0;
}
inline int32_t InitRequest::_internal_round() const {
  return round_;
}
inline int32_t InitRequest::round() const {
  // @@protoc_insertion_point(field_get:oram.InitRequest.round)
  return _internal_round();
}
inline void InitRequest::_internal_set_round(int32_t value) {
  
  round_ = value;
}
inline void InitRequest::set_round(int32_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:oram.InitRequest.round)
}

// bytes content = 2;
inline void InitRequest::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& InitRequest::content() const {
  // @@protoc_insertion_point(field_get:oram.InitRequest.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitRequest::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oram.InitRequest.content)
}
inline std::string* InitRequest::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:oram.InitRequest.content)
  return _s;
}
inline const std::string& InitRequest::_internal_content() const {
  return content_.Get();
}
inline void InitRequest::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitRequest::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitRequest::release_content() {
  // @@protoc_insertion_point(field_release:oram.InitRequest.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:oram.InitRequest.content)
}

// -------------------------------------------------------------------

// InitReply

// bool success = 1;
inline void InitReply::clear_success() {
  success_ = false;
}
inline bool InitReply::_internal_success() const {
  return success_;
}
inline bool InitReply::success() const {
  // @@protoc_insertion_point(field_get:oram.InitReply.success)
  return _internal_success();
}
inline void InitReply::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void InitReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:oram.InitReply.success)
}

// bytes content = 2;
inline void InitReply::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& InitReply::content() const {
  // @@protoc_insertion_point(field_get:oram.InitReply.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitReply::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oram.InitReply.content)
}
inline std::string* InitReply::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:oram.InitReply.content)
  return _s;
}
inline const std::string& InitReply::_internal_content() const {
  return content_.Get();
}
inline void InitReply::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitReply::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitReply::release_content() {
  // @@protoc_insertion_point(field_release:oram.InitReply.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitReply::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:oram.InitReply.content)
}

// -------------------------------------------------------------------

// OramInitRequest

// uint32 way = 1;
inline void OramInitRequest::clear_way() {
  way_ = 0u;
}
inline uint32_t OramInitRequest::_internal_way() const {
  return way_;
}
inline uint32_t OramInitRequest::way() const {
  // @@protoc_insertion_point(field_get:oram.OramInitRequest.way)
  return _internal_way();
}
inline void OramInitRequest::_internal_set_way(uint32_t value) {
  
  way_ = value;
}
inline void OramInitRequest::set_way(uint32_t value) {
  _internal_set_way(value);
  // @@protoc_insertion_point(field_set:oram.OramInitRequest.way)
}

// uint32 number = 2;
inline void OramInitRequest::clear_number() {
  number_ = 0u;
}
inline uint32_t OramInitRequest::_internal_number() const {
  return number_;
}
inline uint32_t OramInitRequest::number() const {
  // @@protoc_insertion_point(field_get:oram.OramInitRequest.number)
  return _internal_number();
}
inline void OramInitRequest::_internal_set_number(uint32_t value) {
  
  number_ = value;
}
inline void OramInitRequest::set_number(uint32_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:oram.OramInitRequest.number)
}

// uint32 bucket_size = 3;
inline void OramInitRequest::clear_bucket_size() {
  bucket_size_ = 0u;
}
inline uint32_t OramInitRequest::_internal_bucket_size() const {
  return bucket_size_;
}
inline uint32_t OramInitRequest::bucket_size() const {
  // @@protoc_insertion_point(field_get:oram.OramInitRequest.bucket_size)
  return _internal_bucket_size();
}
inline void OramInitRequest::_internal_set_bucket_size(uint32_t value) {
  
  bucket_size_ = value;
}
inline void OramInitRequest::set_bucket_size(uint32_t value) {
  _internal_set_bucket_size(value);
  // @@protoc_insertion_point(field_set:oram.OramInitRequest.bucket_size)
}

// uint32 type = 4;
inline void OramInitRequest::clear_type() {
  type_ = 0u;
}
inline uint32_t OramInitRequest::_internal_type() const {
  return type_;
}
inline uint32_t OramInitRequest::type() const {
  // @@protoc_insertion_point(field_get:oram.OramInitRequest.type)
  return _internal_type();
}
inline void OramInitRequest::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void OramInitRequest::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:oram.OramInitRequest.type)
}

// uint32 constant = 5;
inline void OramInitRequest::clear_constant() {
  constant_ = 0u;
}
inline uint32_t OramInitRequest::_internal_constant() const {
  return constant_;
}
inline uint32_t OramInitRequest::constant() const {
  // @@protoc_insertion_point(field_get:oram.OramInitRequest.constant)
  return _internal_constant();
}
inline void OramInitRequest::_internal_set_constant(uint32_t value) {
  
  constant_ = value;
}
inline void OramInitRequest::set_constant(uint32_t value) {
  _internal_set_constant(value);
  // @@protoc_insertion_point(field_set:oram.OramInitRequest.constant)
}

// uint32 round = 6;
inline void OramInitRequest::clear_round() {
  round_ = 0u;
}
inline uint32_t OramInitRequest::_internal_round() const {
  return round_;
}
inline uint32_t OramInitRequest::round() const {
  // @@protoc_insertion_point(field_get:oram.OramInitRequest.round)
  return _internal_round();
}
inline void OramInitRequest::_internal_set_round(uint32_t value) {
  
  round_ = value;
}
inline void OramInitRequest::set_round(uint32_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:oram.OramInitRequest.round)
}

// optional uint32 oram_type = 7;
inline bool OramInitRequest::_internal_has_oram_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OramInitRequest::has_oram_type() const {
  return _internal_has_oram_type();
}
inline void OramInitRequest::clear_oram_type() {
  oram_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t OramInitRequest::_internal_oram_type() const {
  return oram_type_;
}
inline uint32_t OramInitRequest::oram_type() const {
  // @@protoc_insertion_point(field_get:oram.OramInitRequest.oram_type)
  return _internal_oram_type();
}
inline void OramInitRequest::_internal_set_oram_type(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  oram_type_ = value;
}
inline void OramInitRequest::set_oram_type(uint32_t value) {
  _internal_set_oram_type(value);
  // @@protoc_insertion_point(field_set:oram.OramInitRequest.oram_type)
}

// optional bytes verification = 8;
inline bool OramInitRequest::_internal_has_verification() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OramInitRequest::has_verification() const {
  return _internal_has_verification();
}
inline void OramInitRequest::clear_verification() {
  verification_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OramInitRequest::verification() const {
  // @@protoc_insertion_point(field_get:oram.OramInitRequest.verification)
  return _internal_verification();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OramInitRequest::set_verification(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 verification_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oram.OramInitRequest.verification)
}
inline std::string* OramInitRequest::mutable_verification() {
  std::string* _s = _internal_mutable_verification();
  // @@protoc_insertion_point(field_mutable:oram.OramInitRequest.verification)
  return _s;
}
inline const std::string& OramInitRequest::_internal_verification() const {
  return verification_.Get();
}
inline void OramInitRequest::_internal_set_verification(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  verification_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OramInitRequest::_internal_mutable_verification() {
  _has_bits_[0] |= 0x00000001u;
  return verification_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OramInitRequest::release_verification() {
  // @@protoc_insertion_point(field_release:oram.OramInitRequest.verification)
  if (!_internal_has_verification()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = verification_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (verification_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    verification_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OramInitRequest::set_allocated_verification(std::string* verification) {
  if (verification != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  verification_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verification,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (verification_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    verification_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:oram.OramInitRequest.verification)
}

// repeated uint32 permutation = 9;
inline int OramInitRequest::_internal_permutation_size() const {
  return permutation_.size();
}
inline int OramInitRequest::permutation_size() const {
  return _internal_permutation_size();
}
inline void OramInitRequest::clear_permutation() {
  permutation_.Clear();
}
inline uint32_t OramInitRequest::_internal_permutation(int index) const {
  return permutation_.Get(index);
}
inline uint32_t OramInitRequest::permutation(int index) const {
  // @@protoc_insertion_point(field_get:oram.OramInitRequest.permutation)
  return _internal_permutation(index);
}
inline void OramInitRequest::set_permutation(int index, uint32_t value) {
  permutation_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.OramInitRequest.permutation)
}
inline void OramInitRequest::_internal_add_permutation(uint32_t value) {
  permutation_.Add(value);
}
inline void OramInitRequest::add_permutation(uint32_t value) {
  _internal_add_permutation(value);
  // @@protoc_insertion_point(field_add:oram.OramInitRequest.permutation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
OramInitRequest::_internal_permutation() const {
  return permutation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
OramInitRequest::permutation() const {
  // @@protoc_insertion_point(field_list:oram.OramInitRequest.permutation)
  return _internal_permutation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
OramInitRequest::_internal_mutable_permutation() {
  return &permutation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
OramInitRequest::mutable_permutation() {
  // @@protoc_insertion_point(field_mutable_list:oram.OramInitRequest.permutation)
  return _internal_mutable_permutation();
}

// -------------------------------------------------------------------

// ReadRequest

// uint32 address = 1;
inline void ReadRequest::clear_address() {
  address_ = 0u;
}
inline uint32_t ReadRequest::_internal_address() const {
  return address_;
}
inline uint32_t ReadRequest::address() const {
  // @@protoc_insertion_point(field_get:oram.ReadRequest.address)
  return _internal_address();
}
inline void ReadRequest::_internal_set_address(uint32_t value) {
  
  address_ = value;
}
inline void ReadRequest::set_address(uint32_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:oram.ReadRequest.address)
}

// -------------------------------------------------------------------

// ReadReply

// bytes block = 1;
inline void ReadReply::clear_block() {
  block_.ClearToEmpty();
}
inline const std::string& ReadReply::block() const {
  // @@protoc_insertion_point(field_get:oram.ReadReply.block)
  return _internal_block();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadReply::set_block(ArgT0&& arg0, ArgT... args) {
 
 block_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oram.ReadReply.block)
}
inline std::string* ReadReply::mutable_block() {
  std::string* _s = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:oram.ReadReply.block)
  return _s;
}
inline const std::string& ReadReply::_internal_block() const {
  return block_.Get();
}
inline void ReadReply::_internal_set_block(const std::string& value) {
  
  block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadReply::_internal_mutable_block() {
  
  return block_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadReply::release_block() {
  // @@protoc_insertion_point(field_release:oram.ReadReply.block)
  return block_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadReply::set_allocated_block(std::string* block) {
  if (block != nullptr) {
    
  } else {
    
  }
  block_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (block_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:oram.ReadReply.block)
}

// bool success = 2;
inline void ReadReply::clear_success() {
  success_ = false;
}
inline bool ReadReply::_internal_success() const {
  return success_;
}
inline bool ReadReply::success() const {
  // @@protoc_insertion_point(field_get:oram.ReadReply.success)
  return _internal_success();
}
inline void ReadReply::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ReadReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:oram.ReadReply.success)
}

// -------------------------------------------------------------------

// WriteRequest

// uint32 address = 1;
inline void WriteRequest::clear_address() {
  address_ = 0u;
}
inline uint32_t WriteRequest::_internal_address() const {
  return address_;
}
inline uint32_t WriteRequest::address() const {
  // @@protoc_insertion_point(field_get:oram.WriteRequest.address)
  return _internal_address();
}
inline void WriteRequest::_internal_set_address(uint32_t value) {
  
  address_ = value;
}
inline void WriteRequest::set_address(uint32_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:oram.WriteRequest.address)
}

// bytes data = 2;
inline void WriteRequest::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& WriteRequest::data() const {
  // @@protoc_insertion_point(field_get:oram.WriteRequest.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteRequest::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oram.WriteRequest.data)
}
inline std::string* WriteRequest::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:oram.WriteRequest.data)
  return _s;
}
inline const std::string& WriteRequest::_internal_data() const {
  return data_.Get();
}
inline void WriteRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriteRequest::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriteRequest::release_data() {
  // @@protoc_insertion_point(field_release:oram.WriteRequest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriteRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:oram.WriteRequest.data)
}

// -------------------------------------------------------------------

// WriteReply

// bool success = 1;
inline void WriteReply::clear_success() {
  success_ = false;
}
inline bool WriteReply::_internal_success() const {
  return success_;
}
inline bool WriteReply::success() const {
  // @@protoc_insertion_point(field_get:oram.WriteReply.success)
  return _internal_success();
}
inline void WriteReply::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void WriteReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:oram.WriteReply.success)
}

// -------------------------------------------------------------------

// CloseRequest

// -------------------------------------------------------------------

// InitialMessage

// uint32 type = 1;
inline void InitialMessage::clear_type() {
  type_ = 0u;
}
inline uint32_t InitialMessage::_internal_type() const {
  return type_;
}
inline uint32_t InitialMessage::type() const {
  // @@protoc_insertion_point(field_get:oram.InitialMessage.type)
  return _internal_type();
}
inline void InitialMessage::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void InitialMessage::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:oram.InitialMessage.type)
}

// optional uint32 size = 2;
inline bool InitialMessage::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InitialMessage::has_size() const {
  return _internal_has_size();
}
inline void InitialMessage::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t InitialMessage::_internal_size() const {
  return size_;
}
inline uint32_t InitialMessage::size() const {
  // @@protoc_insertion_point(field_get:oram.InitialMessage.size)
  return _internal_size();
}
inline void InitialMessage::_internal_set_size(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  size_ = value;
}
inline void InitialMessage::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:oram.InitialMessage.size)
}

// -------------------------------------------------------------------

// Message0

// uint32 type = 1;
inline void Message0::clear_type() {
  type_ = 0u;
}
inline uint32_t Message0::_internal_type() const {
  return type_;
}
inline uint32_t Message0::type() const {
  // @@protoc_insertion_point(field_get:oram.Message0.type)
  return _internal_type();
}
inline void Message0::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void Message0::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:oram.Message0.type)
}

// uint32 epid = 2;
inline void Message0::clear_epid() {
  epid_ = 0u;
}
inline uint32_t Message0::_internal_epid() const {
  return epid_;
}
inline uint32_t Message0::epid() const {
  // @@protoc_insertion_point(field_get:oram.Message0.epid)
  return _internal_epid();
}
inline void Message0::_internal_set_epid(uint32_t value) {
  
  epid_ = value;
}
inline void Message0::set_epid(uint32_t value) {
  _internal_set_epid(value);
  // @@protoc_insertion_point(field_set:oram.Message0.epid)
}

// optional uint32 status = 3;
inline bool Message0::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Message0::has_status() const {
  return _internal_has_status();
}
inline void Message0::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Message0::_internal_status() const {
  return status_;
}
inline uint32_t Message0::status() const {
  // @@protoc_insertion_point(field_get:oram.Message0.status)
  return _internal_status();
}
inline void Message0::_internal_set_status(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void Message0::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:oram.Message0.status)
}

// -------------------------------------------------------------------

// Message1

// uint32 type = 1;
inline void Message1::clear_type() {
  type_ = 0u;
}
inline uint32_t Message1::_internal_type() const {
  return type_;
}
inline uint32_t Message1::type() const {
  // @@protoc_insertion_point(field_get:oram.Message1.type)
  return _internal_type();
}
inline void Message1::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void Message1::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:oram.Message1.type)
}

// repeated uint32 GaX = 2 [packed = true];
inline int Message1::_internal_gax_size() const {
  return gax_.size();
}
inline int Message1::gax_size() const {
  return _internal_gax_size();
}
inline void Message1::clear_gax() {
  gax_.Clear();
}
inline uint32_t Message1::_internal_gax(int index) const {
  return gax_.Get(index);
}
inline uint32_t Message1::gax(int index) const {
  // @@protoc_insertion_point(field_get:oram.Message1.GaX)
  return _internal_gax(index);
}
inline void Message1::set_gax(int index, uint32_t value) {
  gax_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.Message1.GaX)
}
inline void Message1::_internal_add_gax(uint32_t value) {
  gax_.Add(value);
}
inline void Message1::add_gax(uint32_t value) {
  _internal_add_gax(value);
  // @@protoc_insertion_point(field_add:oram.Message1.GaX)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message1::_internal_gax() const {
  return gax_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message1::gax() const {
  // @@protoc_insertion_point(field_list:oram.Message1.GaX)
  return _internal_gax();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message1::_internal_mutable_gax() {
  return &gax_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message1::mutable_gax() {
  // @@protoc_insertion_point(field_mutable_list:oram.Message1.GaX)
  return _internal_mutable_gax();
}

// repeated uint32 GaY = 3 [packed = true];
inline int Message1::_internal_gay_size() const {
  return gay_.size();
}
inline int Message1::gay_size() const {
  return _internal_gay_size();
}
inline void Message1::clear_gay() {
  gay_.Clear();
}
inline uint32_t Message1::_internal_gay(int index) const {
  return gay_.Get(index);
}
inline uint32_t Message1::gay(int index) const {
  // @@protoc_insertion_point(field_get:oram.Message1.GaY)
  return _internal_gay(index);
}
inline void Message1::set_gay(int index, uint32_t value) {
  gay_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.Message1.GaY)
}
inline void Message1::_internal_add_gay(uint32_t value) {
  gay_.Add(value);
}
inline void Message1::add_gay(uint32_t value) {
  _internal_add_gay(value);
  // @@protoc_insertion_point(field_add:oram.Message1.GaY)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message1::_internal_gay() const {
  return gay_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message1::gay() const {
  // @@protoc_insertion_point(field_list:oram.Message1.GaY)
  return _internal_gay();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message1::_internal_mutable_gay() {
  return &gay_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message1::mutable_gay() {
  // @@protoc_insertion_point(field_mutable_list:oram.Message1.GaY)
  return _internal_mutable_gay();
}

// repeated uint32 GID = 4 [packed = true];
inline int Message1::_internal_gid_size() const {
  return gid_.size();
}
inline int Message1::gid_size() const {
  return _internal_gid_size();
}
inline void Message1::clear_gid() {
  gid_.Clear();
}
inline uint32_t Message1::_internal_gid(int index) const {
  return gid_.Get(index);
}
inline uint32_t Message1::gid(int index) const {
  // @@protoc_insertion_point(field_get:oram.Message1.GID)
  return _internal_gid(index);
}
inline void Message1::set_gid(int index, uint32_t value) {
  gid_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.Message1.GID)
}
inline void Message1::_internal_add_gid(uint32_t value) {
  gid_.Add(value);
}
inline void Message1::add_gid(uint32_t value) {
  _internal_add_gid(value);
  // @@protoc_insertion_point(field_add:oram.Message1.GID)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message1::_internal_gid() const {
  return gid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message1::gid() const {
  // @@protoc_insertion_point(field_list:oram.Message1.GID)
  return _internal_gid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message1::_internal_mutable_gid() {
  return &gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message1::mutable_gid() {
  // @@protoc_insertion_point(field_mutable_list:oram.Message1.GID)
  return _internal_mutable_gid();
}

// -------------------------------------------------------------------

// Message2

// uint32 type = 1;
inline void Message2::clear_type() {
  type_ = 0u;
}
inline uint32_t Message2::_internal_type() const {
  return type_;
}
inline uint32_t Message2::type() const {
  // @@protoc_insertion_point(field_get:oram.Message2.type)
  return _internal_type();
}
inline void Message2::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void Message2::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:oram.Message2.type)
}

// optional uint32 size = 2;
inline bool Message2::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Message2::has_size() const {
  return _internal_has_size();
}
inline void Message2::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Message2::_internal_size() const {
  return size_;
}
inline uint32_t Message2::size() const {
  // @@protoc_insertion_point(field_get:oram.Message2.size)
  return _internal_size();
}
inline void Message2::_internal_set_size(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  size_ = value;
}
inline void Message2::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:oram.Message2.size)
}

// repeated uint32 public_key_gx = 3 [packed = true];
inline int Message2::_internal_public_key_gx_size() const {
  return public_key_gx_.size();
}
inline int Message2::public_key_gx_size() const {
  return _internal_public_key_gx_size();
}
inline void Message2::clear_public_key_gx() {
  public_key_gx_.Clear();
}
inline uint32_t Message2::_internal_public_key_gx(int index) const {
  return public_key_gx_.Get(index);
}
inline uint32_t Message2::public_key_gx(int index) const {
  // @@protoc_insertion_point(field_get:oram.Message2.public_key_gx)
  return _internal_public_key_gx(index);
}
inline void Message2::set_public_key_gx(int index, uint32_t value) {
  public_key_gx_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.Message2.public_key_gx)
}
inline void Message2::_internal_add_public_key_gx(uint32_t value) {
  public_key_gx_.Add(value);
}
inline void Message2::add_public_key_gx(uint32_t value) {
  _internal_add_public_key_gx(value);
  // @@protoc_insertion_point(field_add:oram.Message2.public_key_gx)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message2::_internal_public_key_gx() const {
  return public_key_gx_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message2::public_key_gx() const {
  // @@protoc_insertion_point(field_list:oram.Message2.public_key_gx)
  return _internal_public_key_gx();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message2::_internal_mutable_public_key_gx() {
  return &public_key_gx_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message2::mutable_public_key_gx() {
  // @@protoc_insertion_point(field_mutable_list:oram.Message2.public_key_gx)
  return _internal_mutable_public_key_gx();
}

// repeated uint32 public_key_gy = 4 [packed = true];
inline int Message2::_internal_public_key_gy_size() const {
  return public_key_gy_.size();
}
inline int Message2::public_key_gy_size() const {
  return _internal_public_key_gy_size();
}
inline void Message2::clear_public_key_gy() {
  public_key_gy_.Clear();
}
inline uint32_t Message2::_internal_public_key_gy(int index) const {
  return public_key_gy_.Get(index);
}
inline uint32_t Message2::public_key_gy(int index) const {
  // @@protoc_insertion_point(field_get:oram.Message2.public_key_gy)
  return _internal_public_key_gy(index);
}
inline void Message2::set_public_key_gy(int index, uint32_t value) {
  public_key_gy_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.Message2.public_key_gy)
}
inline void Message2::_internal_add_public_key_gy(uint32_t value) {
  public_key_gy_.Add(value);
}
inline void Message2::add_public_key_gy(uint32_t value) {
  _internal_add_public_key_gy(value);
  // @@protoc_insertion_point(field_add:oram.Message2.public_key_gy)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message2::_internal_public_key_gy() const {
  return public_key_gy_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message2::public_key_gy() const {
  // @@protoc_insertion_point(field_list:oram.Message2.public_key_gy)
  return _internal_public_key_gy();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message2::_internal_mutable_public_key_gy() {
  return &public_key_gy_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message2::mutable_public_key_gy() {
  // @@protoc_insertion_point(field_mutable_list:oram.Message2.public_key_gy)
  return _internal_mutable_public_key_gy();
}

// optional uint32 quote_type = 5;
inline bool Message2::_internal_has_quote_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Message2::has_quote_type() const {
  return _internal_has_quote_type();
}
inline void Message2::clear_quote_type() {
  quote_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Message2::_internal_quote_type() const {
  return quote_type_;
}
inline uint32_t Message2::quote_type() const {
  // @@protoc_insertion_point(field_get:oram.Message2.quote_type)
  return _internal_quote_type();
}
inline void Message2::_internal_set_quote_type(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  quote_type_ = value;
}
inline void Message2::set_quote_type(uint32_t value) {
  _internal_set_quote_type(value);
  // @@protoc_insertion_point(field_set:oram.Message2.quote_type)
}

// repeated uint32 spid = 6 [packed = true];
inline int Message2::_internal_spid_size() const {
  return spid_.size();
}
inline int Message2::spid_size() const {
  return _internal_spid_size();
}
inline void Message2::clear_spid() {
  spid_.Clear();
}
inline uint32_t Message2::_internal_spid(int index) const {
  return spid_.Get(index);
}
inline uint32_t Message2::spid(int index) const {
  // @@protoc_insertion_point(field_get:oram.Message2.spid)
  return _internal_spid(index);
}
inline void Message2::set_spid(int index, uint32_t value) {
  spid_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.Message2.spid)
}
inline void Message2::_internal_add_spid(uint32_t value) {
  spid_.Add(value);
}
inline void Message2::add_spid(uint32_t value) {
  _internal_add_spid(value);
  // @@protoc_insertion_point(field_add:oram.Message2.spid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message2::_internal_spid() const {
  return spid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message2::spid() const {
  // @@protoc_insertion_point(field_list:oram.Message2.spid)
  return _internal_spid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message2::_internal_mutable_spid() {
  return &spid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message2::mutable_spid() {
  // @@protoc_insertion_point(field_mutable_list:oram.Message2.spid)
  return _internal_mutable_spid();
}

// optional uint32 cmac_kdf_id = 7;
inline bool Message2::_internal_has_cmac_kdf_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Message2::has_cmac_kdf_id() const {
  return _internal_has_cmac_kdf_id();
}
inline void Message2::clear_cmac_kdf_id() {
  cmac_kdf_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Message2::_internal_cmac_kdf_id() const {
  return cmac_kdf_id_;
}
inline uint32_t Message2::cmac_kdf_id() const {
  // @@protoc_insertion_point(field_get:oram.Message2.cmac_kdf_id)
  return _internal_cmac_kdf_id();
}
inline void Message2::_internal_set_cmac_kdf_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  cmac_kdf_id_ = value;
}
inline void Message2::set_cmac_kdf_id(uint32_t value) {
  _internal_set_cmac_kdf_id(value);
  // @@protoc_insertion_point(field_set:oram.Message2.cmac_kdf_id)
}

// repeated uint32 signature_x = 8 [packed = true];
inline int Message2::_internal_signature_x_size() const {
  return signature_x_.size();
}
inline int Message2::signature_x_size() const {
  return _internal_signature_x_size();
}
inline void Message2::clear_signature_x() {
  signature_x_.Clear();
}
inline uint32_t Message2::_internal_signature_x(int index) const {
  return signature_x_.Get(index);
}
inline uint32_t Message2::signature_x(int index) const {
  // @@protoc_insertion_point(field_get:oram.Message2.signature_x)
  return _internal_signature_x(index);
}
inline void Message2::set_signature_x(int index, uint32_t value) {
  signature_x_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.Message2.signature_x)
}
inline void Message2::_internal_add_signature_x(uint32_t value) {
  signature_x_.Add(value);
}
inline void Message2::add_signature_x(uint32_t value) {
  _internal_add_signature_x(value);
  // @@protoc_insertion_point(field_add:oram.Message2.signature_x)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message2::_internal_signature_x() const {
  return signature_x_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message2::signature_x() const {
  // @@protoc_insertion_point(field_list:oram.Message2.signature_x)
  return _internal_signature_x();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message2::_internal_mutable_signature_x() {
  return &signature_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message2::mutable_signature_x() {
  // @@protoc_insertion_point(field_mutable_list:oram.Message2.signature_x)
  return _internal_mutable_signature_x();
}

// repeated uint32 signature_y = 9 [packed = true];
inline int Message2::_internal_signature_y_size() const {
  return signature_y_.size();
}
inline int Message2::signature_y_size() const {
  return _internal_signature_y_size();
}
inline void Message2::clear_signature_y() {
  signature_y_.Clear();
}
inline uint32_t Message2::_internal_signature_y(int index) const {
  return signature_y_.Get(index);
}
inline uint32_t Message2::signature_y(int index) const {
  // @@protoc_insertion_point(field_get:oram.Message2.signature_y)
  return _internal_signature_y(index);
}
inline void Message2::set_signature_y(int index, uint32_t value) {
  signature_y_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.Message2.signature_y)
}
inline void Message2::_internal_add_signature_y(uint32_t value) {
  signature_y_.Add(value);
}
inline void Message2::add_signature_y(uint32_t value) {
  _internal_add_signature_y(value);
  // @@protoc_insertion_point(field_add:oram.Message2.signature_y)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message2::_internal_signature_y() const {
  return signature_y_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message2::signature_y() const {
  // @@protoc_insertion_point(field_list:oram.Message2.signature_y)
  return _internal_signature_y();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message2::_internal_mutable_signature_y() {
  return &signature_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message2::mutable_signature_y() {
  // @@protoc_insertion_point(field_mutable_list:oram.Message2.signature_y)
  return _internal_mutable_signature_y();
}

// repeated uint32 smac = 10 [packed = true];
inline int Message2::_internal_smac_size() const {
  return smac_.size();
}
inline int Message2::smac_size() const {
  return _internal_smac_size();
}
inline void Message2::clear_smac() {
  smac_.Clear();
}
inline uint32_t Message2::_internal_smac(int index) const {
  return smac_.Get(index);
}
inline uint32_t Message2::smac(int index) const {
  // @@protoc_insertion_point(field_get:oram.Message2.smac)
  return _internal_smac(index);
}
inline void Message2::set_smac(int index, uint32_t value) {
  smac_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.Message2.smac)
}
inline void Message2::_internal_add_smac(uint32_t value) {
  smac_.Add(value);
}
inline void Message2::add_smac(uint32_t value) {
  _internal_add_smac(value);
  // @@protoc_insertion_point(field_add:oram.Message2.smac)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message2::_internal_smac() const {
  return smac_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message2::smac() const {
  // @@protoc_insertion_point(field_list:oram.Message2.smac)
  return _internal_smac();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message2::_internal_mutable_smac() {
  return &smac_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message2::mutable_smac() {
  // @@protoc_insertion_point(field_mutable_list:oram.Message2.smac)
  return _internal_mutable_smac();
}

// optional uint32 size_sigrl = 11;
inline bool Message2::_internal_has_size_sigrl() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Message2::has_size_sigrl() const {
  return _internal_has_size_sigrl();
}
inline void Message2::clear_size_sigrl() {
  size_sigrl_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t Message2::_internal_size_sigrl() const {
  return size_sigrl_;
}
inline uint32_t Message2::size_sigrl() const {
  // @@protoc_insertion_point(field_get:oram.Message2.size_sigrl)
  return _internal_size_sigrl();
}
inline void Message2::_internal_set_size_sigrl(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  size_sigrl_ = value;
}
inline void Message2::set_size_sigrl(uint32_t value) {
  _internal_set_size_sigrl(value);
  // @@protoc_insertion_point(field_set:oram.Message2.size_sigrl)
}

// repeated uint32 sigrl = 12 [packed = true];
inline int Message2::_internal_sigrl_size() const {
  return sigrl_.size();
}
inline int Message2::sigrl_size() const {
  return _internal_sigrl_size();
}
inline void Message2::clear_sigrl() {
  sigrl_.Clear();
}
inline uint32_t Message2::_internal_sigrl(int index) const {
  return sigrl_.Get(index);
}
inline uint32_t Message2::sigrl(int index) const {
  // @@protoc_insertion_point(field_get:oram.Message2.sigrl)
  return _internal_sigrl(index);
}
inline void Message2::set_sigrl(int index, uint32_t value) {
  sigrl_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.Message2.sigrl)
}
inline void Message2::_internal_add_sigrl(uint32_t value) {
  sigrl_.Add(value);
}
inline void Message2::add_sigrl(uint32_t value) {
  _internal_add_sigrl(value);
  // @@protoc_insertion_point(field_add:oram.Message2.sigrl)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message2::_internal_sigrl() const {
  return sigrl_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message2::sigrl() const {
  // @@protoc_insertion_point(field_list:oram.Message2.sigrl)
  return _internal_sigrl();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message2::_internal_mutable_sigrl() {
  return &sigrl_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message2::mutable_sigrl() {
  // @@protoc_insertion_point(field_mutable_list:oram.Message2.sigrl)
  return _internal_mutable_sigrl();
}

// -------------------------------------------------------------------

// Message3

// uint32 type = 1;
inline void Message3::clear_type() {
  type_ = 0u;
}
inline uint32_t Message3::_internal_type() const {
  return type_;
}
inline uint32_t Message3::type() const {
  // @@protoc_insertion_point(field_get:oram.Message3.type)
  return _internal_type();
}
inline void Message3::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void Message3::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:oram.Message3.type)
}

// optional uint32 size = 2;
inline bool Message3::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Message3::has_size() const {
  return _internal_has_size();
}
inline void Message3::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Message3::_internal_size() const {
  return size_;
}
inline uint32_t Message3::size() const {
  // @@protoc_insertion_point(field_get:oram.Message3.size)
  return _internal_size();
}
inline void Message3::_internal_set_size(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  size_ = value;
}
inline void Message3::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:oram.Message3.size)
}

// repeated uint32 sgx_mac = 3 [packed = true];
inline int Message3::_internal_sgx_mac_size() const {
  return sgx_mac_.size();
}
inline int Message3::sgx_mac_size() const {
  return _internal_sgx_mac_size();
}
inline void Message3::clear_sgx_mac() {
  sgx_mac_.Clear();
}
inline uint32_t Message3::_internal_sgx_mac(int index) const {
  return sgx_mac_.Get(index);
}
inline uint32_t Message3::sgx_mac(int index) const {
  // @@protoc_insertion_point(field_get:oram.Message3.sgx_mac)
  return _internal_sgx_mac(index);
}
inline void Message3::set_sgx_mac(int index, uint32_t value) {
  sgx_mac_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.Message3.sgx_mac)
}
inline void Message3::_internal_add_sgx_mac(uint32_t value) {
  sgx_mac_.Add(value);
}
inline void Message3::add_sgx_mac(uint32_t value) {
  _internal_add_sgx_mac(value);
  // @@protoc_insertion_point(field_add:oram.Message3.sgx_mac)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message3::_internal_sgx_mac() const {
  return sgx_mac_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message3::sgx_mac() const {
  // @@protoc_insertion_point(field_list:oram.Message3.sgx_mac)
  return _internal_sgx_mac();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message3::_internal_mutable_sgx_mac() {
  return &sgx_mac_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message3::mutable_sgx_mac() {
  // @@protoc_insertion_point(field_mutable_list:oram.Message3.sgx_mac)
  return _internal_mutable_sgx_mac();
}

// repeated uint32 gax_msg3 = 4 [packed = true];
inline int Message3::_internal_gax_msg3_size() const {
  return gax_msg3_.size();
}
inline int Message3::gax_msg3_size() const {
  return _internal_gax_msg3_size();
}
inline void Message3::clear_gax_msg3() {
  gax_msg3_.Clear();
}
inline uint32_t Message3::_internal_gax_msg3(int index) const {
  return gax_msg3_.Get(index);
}
inline uint32_t Message3::gax_msg3(int index) const {
  // @@protoc_insertion_point(field_get:oram.Message3.gax_msg3)
  return _internal_gax_msg3(index);
}
inline void Message3::set_gax_msg3(int index, uint32_t value) {
  gax_msg3_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.Message3.gax_msg3)
}
inline void Message3::_internal_add_gax_msg3(uint32_t value) {
  gax_msg3_.Add(value);
}
inline void Message3::add_gax_msg3(uint32_t value) {
  _internal_add_gax_msg3(value);
  // @@protoc_insertion_point(field_add:oram.Message3.gax_msg3)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message3::_internal_gax_msg3() const {
  return gax_msg3_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message3::gax_msg3() const {
  // @@protoc_insertion_point(field_list:oram.Message3.gax_msg3)
  return _internal_gax_msg3();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message3::_internal_mutable_gax_msg3() {
  return &gax_msg3_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message3::mutable_gax_msg3() {
  // @@protoc_insertion_point(field_mutable_list:oram.Message3.gax_msg3)
  return _internal_mutable_gax_msg3();
}

// repeated uint32 gay_msg3 = 5 [packed = true];
inline int Message3::_internal_gay_msg3_size() const {
  return gay_msg3_.size();
}
inline int Message3::gay_msg3_size() const {
  return _internal_gay_msg3_size();
}
inline void Message3::clear_gay_msg3() {
  gay_msg3_.Clear();
}
inline uint32_t Message3::_internal_gay_msg3(int index) const {
  return gay_msg3_.Get(index);
}
inline uint32_t Message3::gay_msg3(int index) const {
  // @@protoc_insertion_point(field_get:oram.Message3.gay_msg3)
  return _internal_gay_msg3(index);
}
inline void Message3::set_gay_msg3(int index, uint32_t value) {
  gay_msg3_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.Message3.gay_msg3)
}
inline void Message3::_internal_add_gay_msg3(uint32_t value) {
  gay_msg3_.Add(value);
}
inline void Message3::add_gay_msg3(uint32_t value) {
  _internal_add_gay_msg3(value);
  // @@protoc_insertion_point(field_add:oram.Message3.gay_msg3)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message3::_internal_gay_msg3() const {
  return gay_msg3_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message3::gay_msg3() const {
  // @@protoc_insertion_point(field_list:oram.Message3.gay_msg3)
  return _internal_gay_msg3();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message3::_internal_mutable_gay_msg3() {
  return &gay_msg3_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message3::mutable_gay_msg3() {
  // @@protoc_insertion_point(field_mutable_list:oram.Message3.gay_msg3)
  return _internal_mutable_gay_msg3();
}

// repeated uint32 sec_property = 6 [packed = true];
inline int Message3::_internal_sec_property_size() const {
  return sec_property_.size();
}
inline int Message3::sec_property_size() const {
  return _internal_sec_property_size();
}
inline void Message3::clear_sec_property() {
  sec_property_.Clear();
}
inline uint32_t Message3::_internal_sec_property(int index) const {
  return sec_property_.Get(index);
}
inline uint32_t Message3::sec_property(int index) const {
  // @@protoc_insertion_point(field_get:oram.Message3.sec_property)
  return _internal_sec_property(index);
}
inline void Message3::set_sec_property(int index, uint32_t value) {
  sec_property_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.Message3.sec_property)
}
inline void Message3::_internal_add_sec_property(uint32_t value) {
  sec_property_.Add(value);
}
inline void Message3::add_sec_property(uint32_t value) {
  _internal_add_sec_property(value);
  // @@protoc_insertion_point(field_add:oram.Message3.sec_property)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message3::_internal_sec_property() const {
  return sec_property_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message3::sec_property() const {
  // @@protoc_insertion_point(field_list:oram.Message3.sec_property)
  return _internal_sec_property();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message3::_internal_mutable_sec_property() {
  return &sec_property_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message3::mutable_sec_property() {
  // @@protoc_insertion_point(field_mutable_list:oram.Message3.sec_property)
  return _internal_mutable_sec_property();
}

// repeated uint32 quote = 7 [packed = true];
inline int Message3::_internal_quote_size() const {
  return quote_.size();
}
inline int Message3::quote_size() const {
  return _internal_quote_size();
}
inline void Message3::clear_quote() {
  quote_.Clear();
}
inline uint32_t Message3::_internal_quote(int index) const {
  return quote_.Get(index);
}
inline uint32_t Message3::quote(int index) const {
  // @@protoc_insertion_point(field_get:oram.Message3.quote)
  return _internal_quote(index);
}
inline void Message3::set_quote(int index, uint32_t value) {
  quote_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.Message3.quote)
}
inline void Message3::_internal_add_quote(uint32_t value) {
  quote_.Add(value);
}
inline void Message3::add_quote(uint32_t value) {
  _internal_add_quote(value);
  // @@protoc_insertion_point(field_add:oram.Message3.quote)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message3::_internal_quote() const {
  return quote_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message3::quote() const {
  // @@protoc_insertion_point(field_list:oram.Message3.quote)
  return _internal_quote();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message3::_internal_mutable_quote() {
  return &quote_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message3::mutable_quote() {
  // @@protoc_insertion_point(field_mutable_list:oram.Message3.quote)
  return _internal_mutable_quote();
}

// -------------------------------------------------------------------

// AttestationMessage

// uint32 type = 1;
inline void AttestationMessage::clear_type() {
  type_ = 0u;
}
inline uint32_t AttestationMessage::_internal_type() const {
  return type_;
}
inline uint32_t AttestationMessage::type() const {
  // @@protoc_insertion_point(field_get:oram.AttestationMessage.type)
  return _internal_type();
}
inline void AttestationMessage::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void AttestationMessage::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:oram.AttestationMessage.type)
}

// uint32 size = 2;
inline void AttestationMessage::clear_size() {
  size_ = 0u;
}
inline uint32_t AttestationMessage::_internal_size() const {
  return size_;
}
inline uint32_t AttestationMessage::size() const {
  // @@protoc_insertion_point(field_get:oram.AttestationMessage.size)
  return _internal_size();
}
inline void AttestationMessage::_internal_set_size(uint32_t value) {
  
  size_ = value;
}
inline void AttestationMessage::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:oram.AttestationMessage.size)
}

// optional uint32 epid_group_status = 3;
inline bool AttestationMessage::_internal_has_epid_group_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AttestationMessage::has_epid_group_status() const {
  return _internal_has_epid_group_status();
}
inline void AttestationMessage::clear_epid_group_status() {
  epid_group_status_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t AttestationMessage::_internal_epid_group_status() const {
  return epid_group_status_;
}
inline uint32_t AttestationMessage::epid_group_status() const {
  // @@protoc_insertion_point(field_get:oram.AttestationMessage.epid_group_status)
  return _internal_epid_group_status();
}
inline void AttestationMessage::_internal_set_epid_group_status(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  epid_group_status_ = value;
}
inline void AttestationMessage::set_epid_group_status(uint32_t value) {
  _internal_set_epid_group_status(value);
  // @@protoc_insertion_point(field_set:oram.AttestationMessage.epid_group_status)
}

// optional uint32 tcb_evaluation_status = 4;
inline bool AttestationMessage::_internal_has_tcb_evaluation_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AttestationMessage::has_tcb_evaluation_status() const {
  return _internal_has_tcb_evaluation_status();
}
inline void AttestationMessage::clear_tcb_evaluation_status() {
  tcb_evaluation_status_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t AttestationMessage::_internal_tcb_evaluation_status() const {
  return tcb_evaluation_status_;
}
inline uint32_t AttestationMessage::tcb_evaluation_status() const {
  // @@protoc_insertion_point(field_get:oram.AttestationMessage.tcb_evaluation_status)
  return _internal_tcb_evaluation_status();
}
inline void AttestationMessage::_internal_set_tcb_evaluation_status(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  tcb_evaluation_status_ = value;
}
inline void AttestationMessage::set_tcb_evaluation_status(uint32_t value) {
  _internal_set_tcb_evaluation_status(value);
  // @@protoc_insertion_point(field_set:oram.AttestationMessage.tcb_evaluation_status)
}

// optional uint32 pse_evaluation_status = 5;
inline bool AttestationMessage::_internal_has_pse_evaluation_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AttestationMessage::has_pse_evaluation_status() const {
  return _internal_has_pse_evaluation_status();
}
inline void AttestationMessage::clear_pse_evaluation_status() {
  pse_evaluation_status_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t AttestationMessage::_internal_pse_evaluation_status() const {
  return pse_evaluation_status_;
}
inline uint32_t AttestationMessage::pse_evaluation_status() const {
  // @@protoc_insertion_point(field_get:oram.AttestationMessage.pse_evaluation_status)
  return _internal_pse_evaluation_status();
}
inline void AttestationMessage::_internal_set_pse_evaluation_status(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  pse_evaluation_status_ = value;
}
inline void AttestationMessage::set_pse_evaluation_status(uint32_t value) {
  _internal_set_pse_evaluation_status(value);
  // @@protoc_insertion_point(field_set:oram.AttestationMessage.pse_evaluation_status)
}

// repeated uint32 latest_equivalent_tcb_psvn = 6 [packed = true];
inline int AttestationMessage::_internal_latest_equivalent_tcb_psvn_size() const {
  return latest_equivalent_tcb_psvn_.size();
}
inline int AttestationMessage::latest_equivalent_tcb_psvn_size() const {
  return _internal_latest_equivalent_tcb_psvn_size();
}
inline void AttestationMessage::clear_latest_equivalent_tcb_psvn() {
  latest_equivalent_tcb_psvn_.Clear();
}
inline uint32_t AttestationMessage::_internal_latest_equivalent_tcb_psvn(int index) const {
  return latest_equivalent_tcb_psvn_.Get(index);
}
inline uint32_t AttestationMessage::latest_equivalent_tcb_psvn(int index) const {
  // @@protoc_insertion_point(field_get:oram.AttestationMessage.latest_equivalent_tcb_psvn)
  return _internal_latest_equivalent_tcb_psvn(index);
}
inline void AttestationMessage::set_latest_equivalent_tcb_psvn(int index, uint32_t value) {
  latest_equivalent_tcb_psvn_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.AttestationMessage.latest_equivalent_tcb_psvn)
}
inline void AttestationMessage::_internal_add_latest_equivalent_tcb_psvn(uint32_t value) {
  latest_equivalent_tcb_psvn_.Add(value);
}
inline void AttestationMessage::add_latest_equivalent_tcb_psvn(uint32_t value) {
  _internal_add_latest_equivalent_tcb_psvn(value);
  // @@protoc_insertion_point(field_add:oram.AttestationMessage.latest_equivalent_tcb_psvn)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AttestationMessage::_internal_latest_equivalent_tcb_psvn() const {
  return latest_equivalent_tcb_psvn_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AttestationMessage::latest_equivalent_tcb_psvn() const {
  // @@protoc_insertion_point(field_list:oram.AttestationMessage.latest_equivalent_tcb_psvn)
  return _internal_latest_equivalent_tcb_psvn();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AttestationMessage::_internal_mutable_latest_equivalent_tcb_psvn() {
  return &latest_equivalent_tcb_psvn_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AttestationMessage::mutable_latest_equivalent_tcb_psvn() {
  // @@protoc_insertion_point(field_mutable_list:oram.AttestationMessage.latest_equivalent_tcb_psvn)
  return _internal_mutable_latest_equivalent_tcb_psvn();
}

// repeated uint32 latest_pse_isvsvn = 7 [packed = true];
inline int AttestationMessage::_internal_latest_pse_isvsvn_size() const {
  return latest_pse_isvsvn_.size();
}
inline int AttestationMessage::latest_pse_isvsvn_size() const {
  return _internal_latest_pse_isvsvn_size();
}
inline void AttestationMessage::clear_latest_pse_isvsvn() {
  latest_pse_isvsvn_.Clear();
}
inline uint32_t AttestationMessage::_internal_latest_pse_isvsvn(int index) const {
  return latest_pse_isvsvn_.Get(index);
}
inline uint32_t AttestationMessage::latest_pse_isvsvn(int index) const {
  // @@protoc_insertion_point(field_get:oram.AttestationMessage.latest_pse_isvsvn)
  return _internal_latest_pse_isvsvn(index);
}
inline void AttestationMessage::set_latest_pse_isvsvn(int index, uint32_t value) {
  latest_pse_isvsvn_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.AttestationMessage.latest_pse_isvsvn)
}
inline void AttestationMessage::_internal_add_latest_pse_isvsvn(uint32_t value) {
  latest_pse_isvsvn_.Add(value);
}
inline void AttestationMessage::add_latest_pse_isvsvn(uint32_t value) {
  _internal_add_latest_pse_isvsvn(value);
  // @@protoc_insertion_point(field_add:oram.AttestationMessage.latest_pse_isvsvn)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AttestationMessage::_internal_latest_pse_isvsvn() const {
  return latest_pse_isvsvn_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AttestationMessage::latest_pse_isvsvn() const {
  // @@protoc_insertion_point(field_list:oram.AttestationMessage.latest_pse_isvsvn)
  return _internal_latest_pse_isvsvn();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AttestationMessage::_internal_mutable_latest_pse_isvsvn() {
  return &latest_pse_isvsvn_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AttestationMessage::mutable_latest_pse_isvsvn() {
  // @@protoc_insertion_point(field_mutable_list:oram.AttestationMessage.latest_pse_isvsvn)
  return _internal_mutable_latest_pse_isvsvn();
}

// repeated uint32 latest_psda_svn = 8 [packed = true];
inline int AttestationMessage::_internal_latest_psda_svn_size() const {
  return latest_psda_svn_.size();
}
inline int AttestationMessage::latest_psda_svn_size() const {
  return _internal_latest_psda_svn_size();
}
inline void AttestationMessage::clear_latest_psda_svn() {
  latest_psda_svn_.Clear();
}
inline uint32_t AttestationMessage::_internal_latest_psda_svn(int index) const {
  return latest_psda_svn_.Get(index);
}
inline uint32_t AttestationMessage::latest_psda_svn(int index) const {
  // @@protoc_insertion_point(field_get:oram.AttestationMessage.latest_psda_svn)
  return _internal_latest_psda_svn(index);
}
inline void AttestationMessage::set_latest_psda_svn(int index, uint32_t value) {
  latest_psda_svn_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.AttestationMessage.latest_psda_svn)
}
inline void AttestationMessage::_internal_add_latest_psda_svn(uint32_t value) {
  latest_psda_svn_.Add(value);
}
inline void AttestationMessage::add_latest_psda_svn(uint32_t value) {
  _internal_add_latest_psda_svn(value);
  // @@protoc_insertion_point(field_add:oram.AttestationMessage.latest_psda_svn)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AttestationMessage::_internal_latest_psda_svn() const {
  return latest_psda_svn_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AttestationMessage::latest_psda_svn() const {
  // @@protoc_insertion_point(field_list:oram.AttestationMessage.latest_psda_svn)
  return _internal_latest_psda_svn();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AttestationMessage::_internal_mutable_latest_psda_svn() {
  return &latest_psda_svn_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AttestationMessage::mutable_latest_psda_svn() {
  // @@protoc_insertion_point(field_mutable_list:oram.AttestationMessage.latest_psda_svn)
  return _internal_mutable_latest_psda_svn();
}

// repeated uint32 performance_rekey_gid = 9 [packed = true];
inline int AttestationMessage::_internal_performance_rekey_gid_size() const {
  return performance_rekey_gid_.size();
}
inline int AttestationMessage::performance_rekey_gid_size() const {
  return _internal_performance_rekey_gid_size();
}
inline void AttestationMessage::clear_performance_rekey_gid() {
  performance_rekey_gid_.Clear();
}
inline uint32_t AttestationMessage::_internal_performance_rekey_gid(int index) const {
  return performance_rekey_gid_.Get(index);
}
inline uint32_t AttestationMessage::performance_rekey_gid(int index) const {
  // @@protoc_insertion_point(field_get:oram.AttestationMessage.performance_rekey_gid)
  return _internal_performance_rekey_gid(index);
}
inline void AttestationMessage::set_performance_rekey_gid(int index, uint32_t value) {
  performance_rekey_gid_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.AttestationMessage.performance_rekey_gid)
}
inline void AttestationMessage::_internal_add_performance_rekey_gid(uint32_t value) {
  performance_rekey_gid_.Add(value);
}
inline void AttestationMessage::add_performance_rekey_gid(uint32_t value) {
  _internal_add_performance_rekey_gid(value);
  // @@protoc_insertion_point(field_add:oram.AttestationMessage.performance_rekey_gid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AttestationMessage::_internal_performance_rekey_gid() const {
  return performance_rekey_gid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AttestationMessage::performance_rekey_gid() const {
  // @@protoc_insertion_point(field_list:oram.AttestationMessage.performance_rekey_gid)
  return _internal_performance_rekey_gid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AttestationMessage::_internal_mutable_performance_rekey_gid() {
  return &performance_rekey_gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AttestationMessage::mutable_performance_rekey_gid() {
  // @@protoc_insertion_point(field_mutable_list:oram.AttestationMessage.performance_rekey_gid)
  return _internal_mutable_performance_rekey_gid();
}

// repeated uint32 ec_sign256_x = 10 [packed = true];
inline int AttestationMessage::_internal_ec_sign256_x_size() const {
  return ec_sign256_x_.size();
}
inline int AttestationMessage::ec_sign256_x_size() const {
  return _internal_ec_sign256_x_size();
}
inline void AttestationMessage::clear_ec_sign256_x() {
  ec_sign256_x_.Clear();
}
inline uint32_t AttestationMessage::_internal_ec_sign256_x(int index) const {
  return ec_sign256_x_.Get(index);
}
inline uint32_t AttestationMessage::ec_sign256_x(int index) const {
  // @@protoc_insertion_point(field_get:oram.AttestationMessage.ec_sign256_x)
  return _internal_ec_sign256_x(index);
}
inline void AttestationMessage::set_ec_sign256_x(int index, uint32_t value) {
  ec_sign256_x_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.AttestationMessage.ec_sign256_x)
}
inline void AttestationMessage::_internal_add_ec_sign256_x(uint32_t value) {
  ec_sign256_x_.Add(value);
}
inline void AttestationMessage::add_ec_sign256_x(uint32_t value) {
  _internal_add_ec_sign256_x(value);
  // @@protoc_insertion_point(field_add:oram.AttestationMessage.ec_sign256_x)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AttestationMessage::_internal_ec_sign256_x() const {
  return ec_sign256_x_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AttestationMessage::ec_sign256_x() const {
  // @@protoc_insertion_point(field_list:oram.AttestationMessage.ec_sign256_x)
  return _internal_ec_sign256_x();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AttestationMessage::_internal_mutable_ec_sign256_x() {
  return &ec_sign256_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AttestationMessage::mutable_ec_sign256_x() {
  // @@protoc_insertion_point(field_mutable_list:oram.AttestationMessage.ec_sign256_x)
  return _internal_mutable_ec_sign256_x();
}

// repeated uint32 ec_sign256_y = 11 [packed = true];
inline int AttestationMessage::_internal_ec_sign256_y_size() const {
  return ec_sign256_y_.size();
}
inline int AttestationMessage::ec_sign256_y_size() const {
  return _internal_ec_sign256_y_size();
}
inline void AttestationMessage::clear_ec_sign256_y() {
  ec_sign256_y_.Clear();
}
inline uint32_t AttestationMessage::_internal_ec_sign256_y(int index) const {
  return ec_sign256_y_.Get(index);
}
inline uint32_t AttestationMessage::ec_sign256_y(int index) const {
  // @@protoc_insertion_point(field_get:oram.AttestationMessage.ec_sign256_y)
  return _internal_ec_sign256_y(index);
}
inline void AttestationMessage::set_ec_sign256_y(int index, uint32_t value) {
  ec_sign256_y_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.AttestationMessage.ec_sign256_y)
}
inline void AttestationMessage::_internal_add_ec_sign256_y(uint32_t value) {
  ec_sign256_y_.Add(value);
}
inline void AttestationMessage::add_ec_sign256_y(uint32_t value) {
  _internal_add_ec_sign256_y(value);
  // @@protoc_insertion_point(field_add:oram.AttestationMessage.ec_sign256_y)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AttestationMessage::_internal_ec_sign256_y() const {
  return ec_sign256_y_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AttestationMessage::ec_sign256_y() const {
  // @@protoc_insertion_point(field_list:oram.AttestationMessage.ec_sign256_y)
  return _internal_ec_sign256_y();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AttestationMessage::_internal_mutable_ec_sign256_y() {
  return &ec_sign256_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AttestationMessage::mutable_ec_sign256_y() {
  // @@protoc_insertion_point(field_mutable_list:oram.AttestationMessage.ec_sign256_y)
  return _internal_mutable_ec_sign256_y();
}

// repeated uint32 mac_smk = 12 [packed = true];
inline int AttestationMessage::_internal_mac_smk_size() const {
  return mac_smk_.size();
}
inline int AttestationMessage::mac_smk_size() const {
  return _internal_mac_smk_size();
}
inline void AttestationMessage::clear_mac_smk() {
  mac_smk_.Clear();
}
inline uint32_t AttestationMessage::_internal_mac_smk(int index) const {
  return mac_smk_.Get(index);
}
inline uint32_t AttestationMessage::mac_smk(int index) const {
  // @@protoc_insertion_point(field_get:oram.AttestationMessage.mac_smk)
  return _internal_mac_smk(index);
}
inline void AttestationMessage::set_mac_smk(int index, uint32_t value) {
  mac_smk_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.AttestationMessage.mac_smk)
}
inline void AttestationMessage::_internal_add_mac_smk(uint32_t value) {
  mac_smk_.Add(value);
}
inline void AttestationMessage::add_mac_smk(uint32_t value) {
  _internal_add_mac_smk(value);
  // @@protoc_insertion_point(field_add:oram.AttestationMessage.mac_smk)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AttestationMessage::_internal_mac_smk() const {
  return mac_smk_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AttestationMessage::mac_smk() const {
  // @@protoc_insertion_point(field_list:oram.AttestationMessage.mac_smk)
  return _internal_mac_smk();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AttestationMessage::_internal_mutable_mac_smk() {
  return &mac_smk_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AttestationMessage::mutable_mac_smk() {
  // @@protoc_insertion_point(field_mutable_list:oram.AttestationMessage.mac_smk)
  return _internal_mutable_mac_smk();
}

// optional uint32 result_size = 13;
inline bool AttestationMessage::_internal_has_result_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AttestationMessage::has_result_size() const {
  return _internal_has_result_size();
}
inline void AttestationMessage::clear_result_size() {
  result_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t AttestationMessage::_internal_result_size() const {
  return result_size_;
}
inline uint32_t AttestationMessage::result_size() const {
  // @@protoc_insertion_point(field_get:oram.AttestationMessage.result_size)
  return _internal_result_size();
}
inline void AttestationMessage::_internal_set_result_size(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  result_size_ = value;
}
inline void AttestationMessage::set_result_size(uint32_t value) {
  _internal_set_result_size(value);
  // @@protoc_insertion_point(field_set:oram.AttestationMessage.result_size)
}

// repeated uint32 reserved = 14 [packed = true];
inline int AttestationMessage::_internal_reserved_size() const {
  return reserved_.size();
}
inline int AttestationMessage::reserved_size() const {
  return _internal_reserved_size();
}
inline void AttestationMessage::clear_reserved() {
  reserved_.Clear();
}
inline uint32_t AttestationMessage::_internal_reserved(int index) const {
  return reserved_.Get(index);
}
inline uint32_t AttestationMessage::reserved(int index) const {
  // @@protoc_insertion_point(field_get:oram.AttestationMessage.reserved)
  return _internal_reserved(index);
}
inline void AttestationMessage::set_reserved(int index, uint32_t value) {
  reserved_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.AttestationMessage.reserved)
}
inline void AttestationMessage::_internal_add_reserved(uint32_t value) {
  reserved_.Add(value);
}
inline void AttestationMessage::add_reserved(uint32_t value) {
  _internal_add_reserved(value);
  // @@protoc_insertion_point(field_add:oram.AttestationMessage.reserved)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AttestationMessage::_internal_reserved() const {
  return reserved_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AttestationMessage::reserved() const {
  // @@protoc_insertion_point(field_list:oram.AttestationMessage.reserved)
  return _internal_reserved();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AttestationMessage::_internal_mutable_reserved() {
  return &reserved_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AttestationMessage::mutable_reserved() {
  // @@protoc_insertion_point(field_mutable_list:oram.AttestationMessage.reserved)
  return _internal_mutable_reserved();
}

// repeated uint32 payload_tag = 15 [packed = true];
inline int AttestationMessage::_internal_payload_tag_size() const {
  return payload_tag_.size();
}
inline int AttestationMessage::payload_tag_size() const {
  return _internal_payload_tag_size();
}
inline void AttestationMessage::clear_payload_tag() {
  payload_tag_.Clear();
}
inline uint32_t AttestationMessage::_internal_payload_tag(int index) const {
  return payload_tag_.Get(index);
}
inline uint32_t AttestationMessage::payload_tag(int index) const {
  // @@protoc_insertion_point(field_get:oram.AttestationMessage.payload_tag)
  return _internal_payload_tag(index);
}
inline void AttestationMessage::set_payload_tag(int index, uint32_t value) {
  payload_tag_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.AttestationMessage.payload_tag)
}
inline void AttestationMessage::_internal_add_payload_tag(uint32_t value) {
  payload_tag_.Add(value);
}
inline void AttestationMessage::add_payload_tag(uint32_t value) {
  _internal_add_payload_tag(value);
  // @@protoc_insertion_point(field_add:oram.AttestationMessage.payload_tag)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AttestationMessage::_internal_payload_tag() const {
  return payload_tag_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AttestationMessage::payload_tag() const {
  // @@protoc_insertion_point(field_list:oram.AttestationMessage.payload_tag)
  return _internal_payload_tag();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AttestationMessage::_internal_mutable_payload_tag() {
  return &payload_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AttestationMessage::mutable_payload_tag() {
  // @@protoc_insertion_point(field_mutable_list:oram.AttestationMessage.payload_tag)
  return _internal_mutable_payload_tag();
}

// repeated uint32 payload = 16 [packed = true];
inline int AttestationMessage::_internal_payload_size() const {
  return payload_.size();
}
inline int AttestationMessage::payload_size() const {
  return _internal_payload_size();
}
inline void AttestationMessage::clear_payload() {
  payload_.Clear();
}
inline uint32_t AttestationMessage::_internal_payload(int index) const {
  return payload_.Get(index);
}
inline uint32_t AttestationMessage::payload(int index) const {
  // @@protoc_insertion_point(field_get:oram.AttestationMessage.payload)
  return _internal_payload(index);
}
inline void AttestationMessage::set_payload(int index, uint32_t value) {
  payload_.Set(index, value);
  // @@protoc_insertion_point(field_set:oram.AttestationMessage.payload)
}
inline void AttestationMessage::_internal_add_payload(uint32_t value) {
  payload_.Add(value);
}
inline void AttestationMessage::add_payload(uint32_t value) {
  _internal_add_payload(value);
  // @@protoc_insertion_point(field_add:oram.AttestationMessage.payload)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AttestationMessage::_internal_payload() const {
  return payload_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AttestationMessage::payload() const {
  // @@protoc_insertion_point(field_list:oram.AttestationMessage.payload)
  return _internal_payload();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AttestationMessage::_internal_mutable_payload() {
  return &payload_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AttestationMessage::mutable_payload() {
  // @@protoc_insertion_point(field_mutable_list:oram.AttestationMessage.payload)
  return _internal_mutable_payload();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oram

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
