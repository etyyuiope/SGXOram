// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* InitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_messages_2eproto() {
  protobuf_AddDesc_messages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages.proto");
  GOOGLE_CHECK(file != NULL);
  InitRequest_descriptor_ = file->message_type(0);
  static const int InitRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRequest, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRequest, content_),
  };
  InitRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InitRequest_descriptor_,
      InitRequest::default_instance_,
      InitRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(InitRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRequest, _is_default_instance_));
  InitReply_descriptor_ = file->message_type(1);
  static const int InitReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitReply, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitReply, secret_key_),
  };
  InitReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InitReply_descriptor_,
      InitReply::default_instance_,
      InitReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(InitReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitReply, _is_default_instance_));
  ReadRequest_descriptor_ = file->message_type(2);
  static const int ReadRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRequest, address_),
  };
  ReadRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadRequest_descriptor_,
      ReadRequest::default_instance_,
      ReadRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReadRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRequest, _is_default_instance_));
  ReadReply_descriptor_ = file->message_type(3);
  static const int ReadReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadReply, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadReply, success_),
  };
  ReadReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadReply_descriptor_,
      ReadReply::default_instance_,
      ReadReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReadReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadReply, _is_default_instance_));
  WriteRequest_descriptor_ = file->message_type(4);
  static const int WriteRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, data_),
  };
  WriteRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WriteRequest_descriptor_,
      WriteRequest::default_instance_,
      WriteRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(WriteRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, _is_default_instance_));
  WriteReply_descriptor_ = file->message_type(5);
  static const int WriteReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteReply, success_),
  };
  WriteReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WriteReply_descriptor_,
      WriteReply::default_instance_,
      WriteReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(WriteReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteReply, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InitRequest_descriptor_, &InitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InitReply_descriptor_, &InitReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadRequest_descriptor_, &ReadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadReply_descriptor_, &ReadReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WriteRequest_descriptor_, &WriteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WriteReply_descriptor_, &WriteReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2eproto() {
  delete InitRequest::default_instance_;
  delete InitRequest_reflection_;
  delete InitReply::default_instance_;
  delete InitReply_reflection_;
  delete ReadRequest::default_instance_;
  delete ReadRequest_reflection_;
  delete ReadReply::default_instance_;
  delete ReadReply_reflection_;
  delete WriteRequest::default_instance_;
  delete WriteRequest_reflection_;
  delete WriteReply::default_instance_;
  delete WriteReply_reflection_;
}

void protobuf_AddDesc_messages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_messages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016messages.proto\"-\n\013InitRequest\022\r\n\005round"
    "\030\001 \001(\005\022\017\n\007content\030\002 \001(\t\"0\n\tInitReply\022\017\n\007"
    "success\030\001 \001(\010\022\022\n\nsecret_key\030\002 \001(\t\"\036\n\013Rea"
    "dRequest\022\017\n\007address\030\001 \001(\r\"+\n\tReadReply\022\r"
    "\n\005block\030\001 \001(\t\022\017\n\007success\030\002 \001(\010\"-\n\014WriteR"
    "equest\022\017\n\007address\030\001 \001(\r\022\014\n\004data\030\002 \001(\t\"\035\n"
    "\nWriteReply\022\017\n\007success\030\001 \001(\0102\215\001\n\010sgx_ora"
    "m\022*\n\014init_enclave\022\014.InitRequest\032\n.InitRe"
    "ply\"\000\022(\n\nread_block\022\014.ReadRequest\032\n.Read"
    "Reply\"\000\022+\n\013write_block\022\r.WriteRequest\032\013."
    "WriteReply\"\000b\006proto3", 420);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages.proto", &protobuf_RegisterTypes);
  InitRequest::default_instance_ = new InitRequest();
  InitReply::default_instance_ = new InitReply();
  ReadRequest::default_instance_ = new ReadRequest();
  ReadReply::default_instance_ = new ReadReply();
  WriteRequest::default_instance_ = new WriteRequest();
  WriteReply::default_instance_ = new WriteReply();
  InitRequest::default_instance_->InitAsDefaultInstance();
  InitReply::default_instance_->InitAsDefaultInstance();
  ReadRequest::default_instance_->InitAsDefaultInstance();
  ReadReply::default_instance_->InitAsDefaultInstance();
  WriteRequest::default_instance_->InitAsDefaultInstance();
  WriteReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2eproto {
  StaticDescriptorInitializer_messages_2eproto() {
    protobuf_AddDesc_messages_2eproto();
  }
} static_descriptor_initializer_messages_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitRequest::kRoundFieldNumber;
const int InitRequest::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitRequest::InitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitRequest)
}

void InitRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InitRequest::InitRequest(const InitRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InitRequest)
}

void InitRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  round_ = 0;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InitRequest::~InitRequest() {
  // @@protoc_insertion_point(destructor:InitRequest)
  SharedDtor();
}

void InitRequest::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void InitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitRequest_descriptor_;
}

const InitRequest& InitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

InitRequest* InitRequest::default_instance_ = NULL;

InitRequest* InitRequest::New(::google::protobuf::Arena* arena) const {
  InitRequest* n = new InitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:InitRequest)
  round_ = 0;
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 round = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "InitRequest.content"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitRequest)
  return false;
#undef DO_
}

void InitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitRequest)
  // optional int32 round = 1;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->round(), output);
  }

  // optional string content = 2;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InitRequest.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // @@protoc_insertion_point(serialize_end:InitRequest)
}

::google::protobuf::uint8* InitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InitRequest)
  // optional int32 round = 1;
  if (this->round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->round(), target);
  }

  // optional string content = 2;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InitRequest.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:InitRequest)
  return target;
}

int InitRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:InitRequest)
  int total_size = 0;

  // optional int32 round = 1;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->round());
  }

  // optional string content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InitRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InitRequest)
    MergeFrom(*source);
  }
}

void InitRequest::MergeFrom(const InitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.round() != 0) {
    set_round(from.round());
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void InitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitRequest::CopyFrom(const InitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRequest::IsInitialized() const {

  return true;
}

void InitRequest::Swap(InitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitRequest::InternalSwap(InitRequest* other) {
  std::swap(round_, other->round_);
  content_.Swap(&other->content_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitRequest_descriptor_;
  metadata.reflection = InitRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitRequest

// optional int32 round = 1;
void InitRequest::clear_round() {
  round_ = 0;
}
 ::google::protobuf::int32 InitRequest::round() const {
  // @@protoc_insertion_point(field_get:InitRequest.round)
  return round_;
}
 void InitRequest::set_round(::google::protobuf::int32 value) {
  
  round_ = value;
  // @@protoc_insertion_point(field_set:InitRequest.round)
}

// optional string content = 2;
void InitRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& InitRequest::content() const {
  // @@protoc_insertion_point(field_get:InitRequest.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitRequest::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InitRequest.content)
}
 void InitRequest::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InitRequest.content)
}
 void InitRequest::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InitRequest.content)
}
 ::std::string* InitRequest::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:InitRequest.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InitRequest::release_content() {
  // @@protoc_insertion_point(field_release:InitRequest.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:InitRequest.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitReply::kSuccessFieldNumber;
const int InitReply::kSecretKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitReply::InitReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitReply)
}

void InitReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InitReply::InitReply(const InitReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InitReply)
}

void InitReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_ = false;
  secret_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InitReply::~InitReply() {
  // @@protoc_insertion_point(destructor:InitReply)
  SharedDtor();
}

void InitReply::SharedDtor() {
  secret_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void InitReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitReply_descriptor_;
}

const InitReply& InitReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

InitReply* InitReply::default_instance_ = NULL;

InitReply* InitReply::New(::google::protobuf::Arena* arena) const {
  InitReply* n = new InitReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitReply::Clear() {
// @@protoc_insertion_point(message_clear_start:InitReply)
  success_ = false;
  secret_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InitReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InitReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_secret_key;
        break;
      }

      // optional string secret_key = 2;
      case 2: {
        if (tag == 18) {
         parse_secret_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secret_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secret_key().data(), this->secret_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "InitReply.secret_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitReply)
  return false;
#undef DO_
}

void InitReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitReply)
  // optional bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional string secret_key = 2;
  if (this->secret_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secret_key().data(), this->secret_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InitReply.secret_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->secret_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:InitReply)
}

::google::protobuf::uint8* InitReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InitReply)
  // optional bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional string secret_key = 2;
  if (this->secret_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secret_key().data(), this->secret_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InitReply.secret_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->secret_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:InitReply)
  return target;
}

int InitReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:InitReply)
  int total_size = 0;

  // optional bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // optional string secret_key = 2;
  if (this->secret_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secret_key());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InitReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InitReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InitReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InitReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InitReply)
    MergeFrom(*source);
  }
}

void InitReply::MergeFrom(const InitReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.secret_key().size() > 0) {

    secret_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_key_);
  }
}

void InitReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InitReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitReply::CopyFrom(const InitReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitReply::IsInitialized() const {

  return true;
}

void InitReply::Swap(InitReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitReply::InternalSwap(InitReply* other) {
  std::swap(success_, other->success_);
  secret_key_.Swap(&other->secret_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitReply_descriptor_;
  metadata.reflection = InitReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitReply

// optional bool success = 1;
void InitReply::clear_success() {
  success_ = false;
}
 bool InitReply::success() const {
  // @@protoc_insertion_point(field_get:InitReply.success)
  return success_;
}
 void InitReply::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:InitReply.success)
}

// optional string secret_key = 2;
void InitReply::clear_secret_key() {
  secret_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& InitReply::secret_key() const {
  // @@protoc_insertion_point(field_get:InitReply.secret_key)
  return secret_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitReply::set_secret_key(const ::std::string& value) {
  
  secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InitReply.secret_key)
}
 void InitReply::set_secret_key(const char* value) {
  
  secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InitReply.secret_key)
}
 void InitReply::set_secret_key(const char* value, size_t size) {
  
  secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InitReply.secret_key)
}
 ::std::string* InitReply::mutable_secret_key() {
  
  // @@protoc_insertion_point(field_mutable:InitReply.secret_key)
  return secret_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InitReply::release_secret_key() {
  // @@protoc_insertion_point(field_release:InitReply.secret_key)
  
  return secret_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitReply::set_allocated_secret_key(::std::string* secret_key) {
  if (secret_key != NULL) {
    
  } else {
    
  }
  secret_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret_key);
  // @@protoc_insertion_point(field_set_allocated:InitReply.secret_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadRequest::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadRequest::ReadRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReadRequest)
}

void ReadRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ReadRequest::ReadRequest(const ReadRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ReadRequest)
}

void ReadRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  address_ = 0u;
}

ReadRequest::~ReadRequest() {
  // @@protoc_insertion_point(destructor:ReadRequest)
  SharedDtor();
}

void ReadRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadRequest_descriptor_;
}

const ReadRequest& ReadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ReadRequest* ReadRequest::default_instance_ = NULL;

ReadRequest* ReadRequest::New(::google::protobuf::Arena* arena) const {
  ReadRequest* n = new ReadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ReadRequest)
  address_ = 0u;
}

bool ReadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 address = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &address_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReadRequest)
  return false;
#undef DO_
}

void ReadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReadRequest)
  // optional uint32 address = 1;
  if (this->address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->address(), output);
  }

  // @@protoc_insertion_point(serialize_end:ReadRequest)
}

::google::protobuf::uint8* ReadRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReadRequest)
  // optional uint32 address = 1;
  if (this->address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->address(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ReadRequest)
  return target;
}

int ReadRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ReadRequest)
  int total_size = 0;

  // optional uint32 address = 1;
  if (this->address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->address());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReadRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReadRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReadRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReadRequest)
    MergeFrom(*source);
  }
}

void ReadRequest::MergeFrom(const ReadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReadRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.address() != 0) {
    set_address(from.address());
  }
}

void ReadRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRequest::CopyFrom(const ReadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRequest::IsInitialized() const {

  return true;
}

void ReadRequest::Swap(ReadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadRequest::InternalSwap(ReadRequest* other) {
  std::swap(address_, other->address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadRequest_descriptor_;
  metadata.reflection = ReadRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadRequest

// optional uint32 address = 1;
void ReadRequest::clear_address() {
  address_ = 0u;
}
 ::google::protobuf::uint32 ReadRequest::address() const {
  // @@protoc_insertion_point(field_get:ReadRequest.address)
  return address_;
}
 void ReadRequest::set_address(::google::protobuf::uint32 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:ReadRequest.address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadReply::kBlockFieldNumber;
const int ReadReply::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadReply::ReadReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReadReply)
}

void ReadReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ReadReply::ReadReply(const ReadReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ReadReply)
}

void ReadReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  block_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

ReadReply::~ReadReply() {
  // @@protoc_insertion_point(destructor:ReadReply)
  SharedDtor();
}

void ReadReply::SharedDtor() {
  block_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ReadReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadReply_descriptor_;
}

const ReadReply& ReadReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ReadReply* ReadReply::default_instance_ = NULL;

ReadReply* ReadReply::New(::google::protobuf::Arena* arena) const {
  ReadReply* n = new ReadReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ReadReply)
  block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

bool ReadReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReadReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string block = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->block().data(), this->block().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ReadReply.block"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // optional bool success = 2;
      case 2: {
        if (tag == 16) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReadReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReadReply)
  return false;
#undef DO_
}

void ReadReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReadReply)
  // optional string block = 1;
  if (this->block().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->block().data(), this->block().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ReadReply.block");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->block(), output);
  }

  // optional bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // @@protoc_insertion_point(serialize_end:ReadReply)
}

::google::protobuf::uint8* ReadReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReadReply)
  // optional string block = 1;
  if (this->block().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->block().data(), this->block().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ReadReply.block");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->block(), target);
  }

  // optional bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ReadReply)
  return target;
}

int ReadReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ReadReply)
  int total_size = 0;

  // optional string block = 1;
  if (this->block().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->block());
  }

  // optional bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReadReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReadReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReadReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReadReply)
    MergeFrom(*source);
  }
}

void ReadReply::MergeFrom(const ReadReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReadReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.block().size() > 0) {

    block_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void ReadReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReadReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadReply::CopyFrom(const ReadReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReadReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadReply::IsInitialized() const {

  return true;
}

void ReadReply::Swap(ReadReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadReply::InternalSwap(ReadReply* other) {
  block_.Swap(&other->block_);
  std::swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadReply_descriptor_;
  metadata.reflection = ReadReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadReply

// optional string block = 1;
void ReadReply::clear_block() {
  block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ReadReply::block() const {
  // @@protoc_insertion_point(field_get:ReadReply.block)
  return block_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadReply::set_block(const ::std::string& value) {
  
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReadReply.block)
}
 void ReadReply::set_block(const char* value) {
  
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReadReply.block)
}
 void ReadReply::set_block(const char* value, size_t size) {
  
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReadReply.block)
}
 ::std::string* ReadReply::mutable_block() {
  
  // @@protoc_insertion_point(field_mutable:ReadReply.block)
  return block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReadReply::release_block() {
  // @@protoc_insertion_point(field_release:ReadReply.block)
  
  return block_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadReply::set_allocated_block(::std::string* block) {
  if (block != NULL) {
    
  } else {
    
  }
  block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block);
  // @@protoc_insertion_point(field_set_allocated:ReadReply.block)
}

// optional bool success = 2;
void ReadReply::clear_success() {
  success_ = false;
}
 bool ReadReply::success() const {
  // @@protoc_insertion_point(field_get:ReadReply.success)
  return success_;
}
 void ReadReply::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:ReadReply.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteRequest::kAddressFieldNumber;
const int WriteRequest::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteRequest::WriteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WriteRequest)
}

void WriteRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

WriteRequest::WriteRequest(const WriteRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WriteRequest)
}

void WriteRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  address_ = 0u;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

WriteRequest::~WriteRequest() {
  // @@protoc_insertion_point(destructor:WriteRequest)
  SharedDtor();
}

void WriteRequest::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WriteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteRequest_descriptor_;
}

const WriteRequest& WriteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

WriteRequest* WriteRequest::default_instance_ = NULL;

WriteRequest* WriteRequest::New(::google::protobuf::Arena* arena) const {
  WriteRequest* n = new WriteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:WriteRequest)
  address_ = 0u;
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool WriteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WriteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 address = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &address_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional string data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "WriteRequest.data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WriteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WriteRequest)
  return false;
#undef DO_
}

void WriteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WriteRequest)
  // optional uint32 address = 1;
  if (this->address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->address(), output);
  }

  // optional string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WriteRequest.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:WriteRequest)
}

::google::protobuf::uint8* WriteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WriteRequest)
  // optional uint32 address = 1;
  if (this->address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->address(), target);
  }

  // optional string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WriteRequest.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:WriteRequest)
  return target;
}

int WriteRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:WriteRequest)
  int total_size = 0;

  // optional uint32 address = 1;
  if (this->address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->address());
  }

  // optional string data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WriteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WriteRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WriteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WriteRequest)
    MergeFrom(*source);
  }
}

void WriteRequest::MergeFrom(const WriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WriteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.address() != 0) {
    set_address(from.address());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void WriteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteRequest::CopyFrom(const WriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteRequest::IsInitialized() const {

  return true;
}

void WriteRequest::Swap(WriteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteRequest::InternalSwap(WriteRequest* other) {
  std::swap(address_, other->address_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WriteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteRequest_descriptor_;
  metadata.reflection = WriteRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WriteRequest

// optional uint32 address = 1;
void WriteRequest::clear_address() {
  address_ = 0u;
}
 ::google::protobuf::uint32 WriteRequest::address() const {
  // @@protoc_insertion_point(field_get:WriteRequest.address)
  return address_;
}
 void WriteRequest::set_address(::google::protobuf::uint32 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:WriteRequest.address)
}

// optional string data = 2;
void WriteRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WriteRequest::data() const {
  // @@protoc_insertion_point(field_get:WriteRequest.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WriteRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WriteRequest.data)
}
 void WriteRequest::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WriteRequest.data)
}
 void WriteRequest::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WriteRequest.data)
}
 ::std::string* WriteRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:WriteRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WriteRequest::release_data() {
  // @@protoc_insertion_point(field_release:WriteRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WriteRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:WriteRequest.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteReply::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteReply::WriteReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WriteReply)
}

void WriteReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

WriteReply::WriteReply(const WriteReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WriteReply)
}

void WriteReply::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  success_ = false;
}

WriteReply::~WriteReply() {
  // @@protoc_insertion_point(destructor:WriteReply)
  SharedDtor();
}

void WriteReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WriteReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteReply_descriptor_;
}

const WriteReply& WriteReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

WriteReply* WriteReply::default_instance_ = NULL;

WriteReply* WriteReply::New(::google::protobuf::Arena* arena) const {
  WriteReply* n = new WriteReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WriteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:WriteReply)
  success_ = false;
}

bool WriteReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WriteReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WriteReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WriteReply)
  return false;
#undef DO_
}

void WriteReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WriteReply)
  // optional bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // @@protoc_insertion_point(serialize_end:WriteReply)
}

::google::protobuf::uint8* WriteReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WriteReply)
  // optional bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:WriteReply)
  return target;
}

int WriteReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:WriteReply)
  int total_size = 0;

  // optional bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WriteReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WriteReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WriteReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WriteReply)
    MergeFrom(*source);
  }
}

void WriteReply::MergeFrom(const WriteReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WriteReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void WriteReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WriteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteReply::CopyFrom(const WriteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WriteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteReply::IsInitialized() const {

  return true;
}

void WriteReply::Swap(WriteReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteReply::InternalSwap(WriteReply* other) {
  std::swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WriteReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteReply_descriptor_;
  metadata.reflection = WriteReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WriteReply

// optional bool success = 1;
void WriteReply::clear_success() {
  success_ = false;
}
 bool WriteReply::success() const {
  // @@protoc_insertion_point(field_get:WriteReply.success)
  return success_;
}
 void WriteReply::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:WriteReply.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
