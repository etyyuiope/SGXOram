// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: messages.proto

#include "messages.pb.h"
#include "messages.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>

static const char* sgx_oram_method_names[] = {
  "/sgx_oram/init_enclave",
  "/sgx_oram/read_block",
  "/sgx_oram/write_block",
};

std::unique_ptr< sgx_oram::Stub> sgx_oram::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< sgx_oram::Stub> stub(new sgx_oram::Stub(channel));
  return stub;
}

sgx_oram::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_init_enclave_(sgx_oram_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_read_block_(sgx_oram_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_write_block_(sgx_oram_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status sgx_oram::Stub::init_enclave(::grpc::ClientContext* context, const ::InitRequest& request, ::InitReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_init_enclave_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::InitReply>* sgx_oram::Stub::Asyncinit_enclaveRaw(::grpc::ClientContext* context, const ::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::InitReply>(channel_.get(), cq, rpcmethod_init_enclave_, context, request);
}

::grpc::Status sgx_oram::Stub::read_block(::grpc::ClientContext* context, const ::ReadRequest& request, ::ReadReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_read_block_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ReadReply>* sgx_oram::Stub::Asyncread_blockRaw(::grpc::ClientContext* context, const ::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::ReadReply>(channel_.get(), cq, rpcmethod_read_block_, context, request);
}

::grpc::Status sgx_oram::Stub::write_block(::grpc::ClientContext* context, const ::WriteRequest& request, ::WriteReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_write_block_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::WriteReply>* sgx_oram::Stub::Asyncwrite_blockRaw(::grpc::ClientContext* context, const ::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::WriteReply>(channel_.get(), cq, rpcmethod_write_block_, context, request);
}

sgx_oram::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      sgx_oram_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< sgx_oram::Service, ::InitRequest, ::InitReply>(
          std::mem_fn(&sgx_oram::Service::init_enclave), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      sgx_oram_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< sgx_oram::Service, ::ReadRequest, ::ReadReply>(
          std::mem_fn(&sgx_oram::Service::read_block), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      sgx_oram_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< sgx_oram::Service, ::WriteRequest, ::WriteReply>(
          std::mem_fn(&sgx_oram::Service::write_block), this)));
}

sgx_oram::Service::~Service() {
}

::grpc::Status sgx_oram::Service::init_enclave(::grpc::ServerContext* context, const ::InitRequest* request, ::InitReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status sgx_oram::Service::read_block(::grpc::ServerContext* context, const ::ReadRequest* request, ::ReadReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status sgx_oram::Service::write_block(::grpc::ServerContext* context, const ::WriteRequest* request, ::WriteReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


