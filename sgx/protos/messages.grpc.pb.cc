// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: messages.proto

#include "messages.pb.h"
#include "messages.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace oram {

static const char* sgx_oram_method_names[] = {
  "/oram.sgx_oram/init_enclave",
  "/oram.sgx_oram/init_oram",
  "/oram.sgx_oram/generate_session_key",
  "/oram.sgx_oram/remote_attestation_begin",
  "/oram.sgx_oram/remote_attestation_msg0",
  "/oram.sgx_oram/remote_attestation_msg2",
  "/oram.sgx_oram/remote_attestation_final",
  "/oram.sgx_oram/read_block",
  "/oram.sgx_oram/write_block",
  "/oram.sgx_oram/test_oram_cache",
  "/oram.sgx_oram/close_connection",
};

std::unique_ptr< sgx_oram::Stub> sgx_oram::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< sgx_oram::Stub> stub(new sgx_oram::Stub(channel, options));
  return stub;
}

sgx_oram::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_init_enclave_(sgx_oram_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_init_oram_(sgx_oram_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_generate_session_key_(sgx_oram_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_remote_attestation_begin_(sgx_oram_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_remote_attestation_msg0_(sgx_oram_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_remote_attestation_msg2_(sgx_oram_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_remote_attestation_final_(sgx_oram_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_read_block_(sgx_oram_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_write_block_(sgx_oram_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_test_oram_cache_(sgx_oram_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_close_connection_(sgx_oram_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status sgx_oram::Stub::init_enclave(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::oram::InitReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::oram::InitRequest, ::oram::InitReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_init_enclave_, context, request, response);
}

void sgx_oram::Stub::async::init_enclave(::grpc::ClientContext* context, const ::oram::InitRequest* request, ::oram::InitReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::oram::InitRequest, ::oram::InitReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_enclave_, context, request, response, std::move(f));
}

void sgx_oram::Stub::async::init_enclave(::grpc::ClientContext* context, const ::oram::InitRequest* request, ::oram::InitReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_enclave_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::oram::InitReply>* sgx_oram::Stub::PrepareAsyncinit_enclaveRaw(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::oram::InitReply, ::oram::InitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_init_enclave_, context, request);
}

::grpc::ClientAsyncResponseReader< ::oram::InitReply>* sgx_oram::Stub::Asyncinit_enclaveRaw(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinit_enclaveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status sgx_oram::Stub::init_oram(::grpc::ClientContext* context, const ::oram::OramInitRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::oram::OramInitRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_init_oram_, context, request, response);
}

void sgx_oram::Stub::async::init_oram(::grpc::ClientContext* context, const ::oram::OramInitRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::oram::OramInitRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_oram_, context, request, response, std::move(f));
}

void sgx_oram::Stub::async::init_oram(::grpc::ClientContext* context, const ::oram::OramInitRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_oram_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* sgx_oram::Stub::PrepareAsyncinit_oramRaw(::grpc::ClientContext* context, const ::oram::OramInitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::oram::OramInitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_init_oram_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* sgx_oram::Stub::Asyncinit_oramRaw(::grpc::ClientContext* context, const ::oram::OramInitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinit_oramRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status sgx_oram::Stub::generate_session_key(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::oram::InitReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::oram::InitRequest, ::oram::InitReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_generate_session_key_, context, request, response);
}

void sgx_oram::Stub::async::generate_session_key(::grpc::ClientContext* context, const ::oram::InitRequest* request, ::oram::InitReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::oram::InitRequest, ::oram::InitReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_generate_session_key_, context, request, response, std::move(f));
}

void sgx_oram::Stub::async::generate_session_key(::grpc::ClientContext* context, const ::oram::InitRequest* request, ::oram::InitReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_generate_session_key_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::oram::InitReply>* sgx_oram::Stub::PrepareAsyncgenerate_session_keyRaw(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::oram::InitReply, ::oram::InitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_generate_session_key_, context, request);
}

::grpc::ClientAsyncResponseReader< ::oram::InitReply>* sgx_oram::Stub::Asyncgenerate_session_keyRaw(::grpc::ClientContext* context, const ::oram::InitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgenerate_session_keyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status sgx_oram::Stub::remote_attestation_begin(::grpc::ClientContext* context, const ::oram::InitialMessage& request, ::oram::Message0* response) {
  return ::grpc::internal::BlockingUnaryCall< ::oram::InitialMessage, ::oram::Message0, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_remote_attestation_begin_, context, request, response);
}

void sgx_oram::Stub::async::remote_attestation_begin(::grpc::ClientContext* context, const ::oram::InitialMessage* request, ::oram::Message0* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::oram::InitialMessage, ::oram::Message0, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_remote_attestation_begin_, context, request, response, std::move(f));
}

void sgx_oram::Stub::async::remote_attestation_begin(::grpc::ClientContext* context, const ::oram::InitialMessage* request, ::oram::Message0* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_remote_attestation_begin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::oram::Message0>* sgx_oram::Stub::PrepareAsyncremote_attestation_beginRaw(::grpc::ClientContext* context, const ::oram::InitialMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::oram::Message0, ::oram::InitialMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_remote_attestation_begin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::oram::Message0>* sgx_oram::Stub::Asyncremote_attestation_beginRaw(::grpc::ClientContext* context, const ::oram::InitialMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncremote_attestation_beginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status sgx_oram::Stub::remote_attestation_msg0(::grpc::ClientContext* context, const ::oram::Message0& request, ::oram::Message1* response) {
  return ::grpc::internal::BlockingUnaryCall< ::oram::Message0, ::oram::Message1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_remote_attestation_msg0_, context, request, response);
}

void sgx_oram::Stub::async::remote_attestation_msg0(::grpc::ClientContext* context, const ::oram::Message0* request, ::oram::Message1* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::oram::Message0, ::oram::Message1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_remote_attestation_msg0_, context, request, response, std::move(f));
}

void sgx_oram::Stub::async::remote_attestation_msg0(::grpc::ClientContext* context, const ::oram::Message0* request, ::oram::Message1* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_remote_attestation_msg0_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::oram::Message1>* sgx_oram::Stub::PrepareAsyncremote_attestation_msg0Raw(::grpc::ClientContext* context, const ::oram::Message0& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::oram::Message1, ::oram::Message0, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_remote_attestation_msg0_, context, request);
}

::grpc::ClientAsyncResponseReader< ::oram::Message1>* sgx_oram::Stub::Asyncremote_attestation_msg0Raw(::grpc::ClientContext* context, const ::oram::Message0& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncremote_attestation_msg0Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status sgx_oram::Stub::remote_attestation_msg2(::grpc::ClientContext* context, const ::oram::Message2& request, ::oram::Message3* response) {
  return ::grpc::internal::BlockingUnaryCall< ::oram::Message2, ::oram::Message3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_remote_attestation_msg2_, context, request, response);
}

void sgx_oram::Stub::async::remote_attestation_msg2(::grpc::ClientContext* context, const ::oram::Message2* request, ::oram::Message3* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::oram::Message2, ::oram::Message3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_remote_attestation_msg2_, context, request, response, std::move(f));
}

void sgx_oram::Stub::async::remote_attestation_msg2(::grpc::ClientContext* context, const ::oram::Message2* request, ::oram::Message3* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_remote_attestation_msg2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::oram::Message3>* sgx_oram::Stub::PrepareAsyncremote_attestation_msg2Raw(::grpc::ClientContext* context, const ::oram::Message2& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::oram::Message3, ::oram::Message2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_remote_attestation_msg2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::oram::Message3>* sgx_oram::Stub::Asyncremote_attestation_msg2Raw(::grpc::ClientContext* context, const ::oram::Message2& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncremote_attestation_msg2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status sgx_oram::Stub::remote_attestation_final(::grpc::ClientContext* context, const ::oram::AttestationMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::oram::AttestationMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_remote_attestation_final_, context, request, response);
}

void sgx_oram::Stub::async::remote_attestation_final(::grpc::ClientContext* context, const ::oram::AttestationMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::oram::AttestationMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_remote_attestation_final_, context, request, response, std::move(f));
}

void sgx_oram::Stub::async::remote_attestation_final(::grpc::ClientContext* context, const ::oram::AttestationMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_remote_attestation_final_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* sgx_oram::Stub::PrepareAsyncremote_attestation_finalRaw(::grpc::ClientContext* context, const ::oram::AttestationMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::oram::AttestationMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_remote_attestation_final_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* sgx_oram::Stub::Asyncremote_attestation_finalRaw(::grpc::ClientContext* context, const ::oram::AttestationMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncremote_attestation_finalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status sgx_oram::Stub::read_block(::grpc::ClientContext* context, const ::oram::ReadRequest& request, ::oram::ReadReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::oram::ReadRequest, ::oram::ReadReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_read_block_, context, request, response);
}

void sgx_oram::Stub::async::read_block(::grpc::ClientContext* context, const ::oram::ReadRequest* request, ::oram::ReadReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::oram::ReadRequest, ::oram::ReadReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_read_block_, context, request, response, std::move(f));
}

void sgx_oram::Stub::async::read_block(::grpc::ClientContext* context, const ::oram::ReadRequest* request, ::oram::ReadReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_read_block_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::oram::ReadReply>* sgx_oram::Stub::PrepareAsyncread_blockRaw(::grpc::ClientContext* context, const ::oram::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::oram::ReadReply, ::oram::ReadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_read_block_, context, request);
}

::grpc::ClientAsyncResponseReader< ::oram::ReadReply>* sgx_oram::Stub::Asyncread_blockRaw(::grpc::ClientContext* context, const ::oram::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncread_blockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status sgx_oram::Stub::write_block(::grpc::ClientContext* context, const ::oram::WriteRequest& request, ::oram::WriteReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::oram::WriteRequest, ::oram::WriteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_write_block_, context, request, response);
}

void sgx_oram::Stub::async::write_block(::grpc::ClientContext* context, const ::oram::WriteRequest* request, ::oram::WriteReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::oram::WriteRequest, ::oram::WriteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_write_block_, context, request, response, std::move(f));
}

void sgx_oram::Stub::async::write_block(::grpc::ClientContext* context, const ::oram::WriteRequest* request, ::oram::WriteReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_write_block_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::oram::WriteReply>* sgx_oram::Stub::PrepareAsyncwrite_blockRaw(::grpc::ClientContext* context, const ::oram::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::oram::WriteReply, ::oram::WriteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_write_block_, context, request);
}

::grpc::ClientAsyncResponseReader< ::oram::WriteReply>* sgx_oram::Stub::Asyncwrite_blockRaw(::grpc::ClientContext* context, const ::oram::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncwrite_blockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status sgx_oram::Stub::test_oram_cache(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_test_oram_cache_, context, request, response);
}

void sgx_oram::Stub::async::test_oram_cache(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_test_oram_cache_, context, request, response, std::move(f));
}

void sgx_oram::Stub::async::test_oram_cache(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_test_oram_cache_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* sgx_oram::Stub::PrepareAsynctest_oram_cacheRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_test_oram_cache_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* sgx_oram::Stub::Asynctest_oram_cacheRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctest_oram_cacheRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status sgx_oram::Stub::close_connection(::grpc::ClientContext* context, const ::oram::CloseRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::oram::CloseRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_close_connection_, context, request, response);
}

void sgx_oram::Stub::async::close_connection(::grpc::ClientContext* context, const ::oram::CloseRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::oram::CloseRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_close_connection_, context, request, response, std::move(f));
}

void sgx_oram::Stub::async::close_connection(::grpc::ClientContext* context, const ::oram::CloseRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_close_connection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* sgx_oram::Stub::PrepareAsyncclose_connectionRaw(::grpc::ClientContext* context, const ::oram::CloseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::oram::CloseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_close_connection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* sgx_oram::Stub::Asyncclose_connectionRaw(::grpc::ClientContext* context, const ::oram::CloseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclose_connectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

sgx_oram::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sgx_oram_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< sgx_oram::Service, ::oram::InitRequest, ::oram::InitReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](sgx_oram::Service* service,
             ::grpc::ServerContext* ctx,
             const ::oram::InitRequest* req,
             ::oram::InitReply* resp) {
               return service->init_enclave(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sgx_oram_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< sgx_oram::Service, ::oram::OramInitRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](sgx_oram::Service* service,
             ::grpc::ServerContext* ctx,
             const ::oram::OramInitRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->init_oram(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sgx_oram_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< sgx_oram::Service, ::oram::InitRequest, ::oram::InitReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](sgx_oram::Service* service,
             ::grpc::ServerContext* ctx,
             const ::oram::InitRequest* req,
             ::oram::InitReply* resp) {
               return service->generate_session_key(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sgx_oram_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< sgx_oram::Service, ::oram::InitialMessage, ::oram::Message0, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](sgx_oram::Service* service,
             ::grpc::ServerContext* ctx,
             const ::oram::InitialMessage* req,
             ::oram::Message0* resp) {
               return service->remote_attestation_begin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sgx_oram_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< sgx_oram::Service, ::oram::Message0, ::oram::Message1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](sgx_oram::Service* service,
             ::grpc::ServerContext* ctx,
             const ::oram::Message0* req,
             ::oram::Message1* resp) {
               return service->remote_attestation_msg0(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sgx_oram_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< sgx_oram::Service, ::oram::Message2, ::oram::Message3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](sgx_oram::Service* service,
             ::grpc::ServerContext* ctx,
             const ::oram::Message2* req,
             ::oram::Message3* resp) {
               return service->remote_attestation_msg2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sgx_oram_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< sgx_oram::Service, ::oram::AttestationMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](sgx_oram::Service* service,
             ::grpc::ServerContext* ctx,
             const ::oram::AttestationMessage* req,
             ::google::protobuf::Empty* resp) {
               return service->remote_attestation_final(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sgx_oram_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< sgx_oram::Service, ::oram::ReadRequest, ::oram::ReadReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](sgx_oram::Service* service,
             ::grpc::ServerContext* ctx,
             const ::oram::ReadRequest* req,
             ::oram::ReadReply* resp) {
               return service->read_block(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sgx_oram_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< sgx_oram::Service, ::oram::WriteRequest, ::oram::WriteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](sgx_oram::Service* service,
             ::grpc::ServerContext* ctx,
             const ::oram::WriteRequest* req,
             ::oram::WriteReply* resp) {
               return service->write_block(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sgx_oram_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< sgx_oram::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](sgx_oram::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->test_oram_cache(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sgx_oram_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< sgx_oram::Service, ::oram::CloseRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](sgx_oram::Service* service,
             ::grpc::ServerContext* ctx,
             const ::oram::CloseRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->close_connection(ctx, req, resp);
             }, this)));
}

sgx_oram::Service::~Service() {
}

::grpc::Status sgx_oram::Service::init_enclave(::grpc::ServerContext* context, const ::oram::InitRequest* request, ::oram::InitReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status sgx_oram::Service::init_oram(::grpc::ServerContext* context, const ::oram::OramInitRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status sgx_oram::Service::generate_session_key(::grpc::ServerContext* context, const ::oram::InitRequest* request, ::oram::InitReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status sgx_oram::Service::remote_attestation_begin(::grpc::ServerContext* context, const ::oram::InitialMessage* request, ::oram::Message0* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status sgx_oram::Service::remote_attestation_msg0(::grpc::ServerContext* context, const ::oram::Message0* request, ::oram::Message1* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status sgx_oram::Service::remote_attestation_msg2(::grpc::ServerContext* context, const ::oram::Message2* request, ::oram::Message3* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status sgx_oram::Service::remote_attestation_final(::grpc::ServerContext* context, const ::oram::AttestationMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status sgx_oram::Service::read_block(::grpc::ServerContext* context, const ::oram::ReadRequest* request, ::oram::ReadReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status sgx_oram::Service::write_block(::grpc::ServerContext* context, const ::oram::WriteRequest* request, ::oram::WriteReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status sgx_oram::Service::test_oram_cache(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status sgx_oram::Service::close_connection(::grpc::ServerContext* context, const ::oram::CloseRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace oram

